components:
  schemas:
    AbstractComponentResponse:
      properties:
        brandIdentifier:
          type: string
        name:
          type: string
      type: object
    ActiveJackpotsResponse:
      properties:
        jackpots:
          items:
            $ref: '#/components/schemas/JackpotParticipantResponse'
          type: array
      type: object
    ActivePoolsResponse:
      properties:
        list:
          items:
            $ref: '#/components/schemas/PoolResponse'
          type: array
        total:
          format: int64
          type: integer
      type: object
    AddUserDerivedDataRequest:
      properties:
        key:
          description: Use service/team/brand prefix to avoid colliding with already
            existing keys
          example: language
          type: string
        value:
          type: string
      required:
        - key
        - value
      type: object
    AdditionalViewDto:
      properties:
        path:
          type: string
      type: object
    AdminBetslipIdRequest:
      properties:
        id:
          description: Betslip Id
          example: '1'
          type: string
      type: object
    AdminBetslipRequest:
      properties:
        maxResult:
          description: Max Result
          example: 10
          format: int32
          type: integer
        offset:
          description: Offset
          example: 2
          format: int32
          type: integer
        status:
          description: Status
          example: PLACED
          type: string
        userId:
          description: User Id
          example: '1'
          type: string
      type: object
    AdminBetslipResponse:
      properties:
        approvedAt:
          format: date-time
          type: string
        approvedBy:
          type: string
        cancelledAt:
          format: date-time
          type: string
        cancelledBy:
          type: string
        details:
          $ref: '#/components/schemas/BetslipDetails'
      type: object
    AdminBetslipsIdListRequest:
      properties:
        betslipIds:
          items:
            format: int64
            type: integer
          type: array
      type: object
    AdminDto:
      properties:
        brandId:
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
      type: object
    AdminEventResultRequest:
      properties:
        cancelled:
          type: boolean
        eventId:
          format: int64
          type: integer
        poolId:
          format: int64
          type: integer
        scoreAway:
          format: int32
          type: integer
        scoreHome:
          format: int32
          type: integer
      type: object
    AdminInfo:
      properties:
        adminUuid:
          format: uuid
          type: string
        email:
          type: string
        name:
          type: string
      type: object
    AdminJackpotRowDto:
      properties:
        cancelled:
          type: boolean
        id:
          format: int64
          type: integer
        poolId:
          format: int64
          type: integer
        position:
          format: int32
          type: integer
        result:
          type: string
      type: object
    AdminPoolRowUpdateRequest:
      properties:
        cancelled:
          type: boolean
        poolId:
          format: int64
          type: integer
        result:
          format: int32
          type: integer
        rowId:
          format: int64
          type: integer
      type: object
    AdminTicketSummaryDto:
      properties:
        freeTicketsUsed:
          format: int32
          type: integer
        listedTicketDto:
          $ref: '#/components/schemas/ListedTicketDto'
        userUuid:
          format: uuid
          type: string
      type: object
    AdminTiebreakerResultDto:
      properties:
        result:
          format: int32
          type: integer
        tiebreakerId:
          format: int64
          type: integer
      type: object
    AgeRuleValueDto:
      allOf:
        - $ref: '#/components/schemas/RuleDto'
        - properties:
            years:
              format: int32
              type: integer
          type: object
      type: object
    AggregatedCategoryResponse:
      properties:
        categories:
          items:
            $ref: '#/components/schemas/CategoryEventCount'
          type: array
        regions:
          $ref: '#/components/schemas/CategoryActiveRegionsResponse'
      type: object
    AleaSetup:
      properties:
        brandIdentifier:
          type: string
        casinoIds:
          items:
            type: string
          type: array
        enabled:
          type: boolean
        environmentCredential:
          type: string
        environmentId:
          type: string
        gamesReady:
          type: boolean
        launchUrl:
          type: string
        name:
          type: string
        secretApiKey:
          type: string
        url:
          type: string
      required:
        - casinoIds
        - environmentCredential
        - launchUrl
        - secretApiKey
        - url
      type: object
    AllCategoriesResponseV2:
      properties:
        onlyMeta:
          items:
            $ref: '#/components/schemas/CategoryResponseV2'
          type: array
        withRegions:
          items:
            $ref: '#/components/schemas/CategoryResponseV2'
          type: array
      type: object
    AllCategoriesResponseV3:
      properties:
        onlyMeta:
          items:
            $ref: '#/components/schemas/CategoryResponseV3'
          type: array
        withRegions:
          items:
            $ref: '#/components/schemas/CategoryResponseV3'
          type: array
      type: object
    ApproveOrDeclineManualDepositRequest:
      properties:
        id:
          format: int32
          type: integer
        status:
          type: string
      type: object
    ApprovedDepositDTO:
      properties:
        amount:
          format: double
          type: number
        depositInitId:
          type: string
        depositType:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        receiptNo:
          type: string
      type: object
    ApprovedStatementDTO:
      properties:
        approvedDeposits:
          items:
            $ref: '#/components/schemas/ApprovedDepositDTO'
          type: array
        channel:
          type: string
        type:
          type: string
      required:
        - type
      type: object
    ArchiveRequest:
      properties:
        brandIdentifier:
          description: User's brand
          type: string
        userNote:
          description: Comment on the reason of user deletion
          type: string
        userUuid:
          format: uuid
          type: string
      required:
        - userNote
        - userUuid
      type: object
    AuthenticationRequest:
      properties:
        password:
          type: string
        rememberMe:
          description: When true token will be saved for extended time, e.g. 30 days
          type: boolean
        username:
          description: Usually its a phone number
          type: string
      required:
        - password
        - username
      type: object
    AuthenticationResponse:
      properties:
        connectedUser:
          items:
            $ref: '#/components/schemas/ConnectedUserResponse'
          type: array
        forcePasswordUpdate:
          type: boolean
        phoneNumber:
          type: string
        region:
          type: string
        signedUpAt:
          format: date-time
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    AuthenticationResponseV3:
      properties:
        userUuid:
          format: uuid
          type: string
      type: object
    AutomaticPayoutTypeResponse:
      properties:
        AutomaticPayoutsEnabled:
          type: boolean
        Name:
          type: string
        Type:
          type: string
        brandIdentifier:
          type: string
        telcoName:
          type: string
      type: object
    AvailabilityAuditResponse:
      properties:
        available:
          type: string
        inPlayOddsCache:
          type: string
        inPlayPollingSeconds:
          type: string
        inPlayRequestLimit:
          type: string
        liveDelaySeconds:
          type: string
        pollingEnabled:
          type: string
        preMatchOddsCache:
          type: string
        preMatchPollingSeconds:
          type: string
        preMatchRequestLimit:
          type: string
        revisionDto:
          $ref: '#/components/schemas/RevisionDto'
      type: object
    BalanceAdminRequest:
      properties:
        brandIdentifier:
          type: string
        currency:
          description: Currency should be in ISO 4217 (3 characters) and upper case
          type: string
        userUuid:
          format: uuid
          type: string
      required:
        - brandIdentifier
        - userUuid
      type: object
    BalanceAdminResponse:
      properties:
        balance:
          type: number
        currency:
          type: string
      type: object
    BalanceRequest:
      properties:
        currency:
          description: Currency should be in ISO 4217 (3 characters) and upper case
          type: string
      required:
        - currency
      type: object
    BalanceResponse:
      properties:
        balance:
          type: number
        currency:
          type: string
      type: object
    BanRequest:
      properties:
        banned:
          description: Default value true. To unban user set value to false
          type: boolean
        bannedUntil:
          description: If banned is true, default value current time plus 100 years
          format: date-time
          type: string
        brandIdentifier:
          description: User's brand. For v2 endpoint only
          type: string
        userNote:
          description: Comment on the reason of this action
          type: string
        userUuid:
          format: uuid
          type: string
      required:
        - userNote
        - userUuid
      type: object
    BankAccountDetails:
      properties:
        accountNumber:
          type: string
        bankName:
          type: string
      type: object
    BasicPagination:
      properties:
        skip:
          format: int32
          type: integer
        take:
          format: int32
          type: integer
      type: object
    BetItemDetailOddsResponse:
      properties:
        cancellationReason:
          type: string
        cashoutable:
          type: boolean
        itemId:
          format: int64
          type: integer
        price:
          type: number
        resultText:
          type: string
        selection:
          $ref: '#/components/schemas/Selection'
        status:
          type: string
        twoUp:
          type: boolean
        wasInPlay:
          type: boolean
      type: object
    BetItemStatsResponse:
      properties:
        betslipCount:
          format: int32
          type: integer
        firstPlaced:
          format: date-time
          type: string
        lastPlaced:
          format: date-time
          type: string
        stake:
          type: number
        userCount:
          format: int32
          type: integer
      type: object
    BetSettlementSelectionResponse:
      properties:
        betItemSettlementIds:
          items:
            format: int64
            type: integer
          type: array
        cancellationReason:
          type: string
        currentEventResult:
          type: string
        currentStatus:
          enum:
            - INVALID_ENUM
            - PENDING
            - CANCELLED
            - LOSE
            - HALF_LOSE_HALF_BACK
            - STAKE_BACK
            - HALF_BACK_HALF_WIN
            - WIN
            - WIN_CUT_PLUS
            - REJECTED
          type: string
        lastBetTimestamp:
          format: date-time
          type: string
        selectionId:
          format: int64
          type: integer
      type: object
    BetpawaSetup:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        gameUrl:
          type: string
        name:
          type: string
      required:
        - gameUrl
      type: object
    BetslipCancellationVerdictRequest:
      properties:
        id:
          description: Betslip ID
          example: '1'
          type: string
        verdictType:
          description: Veredict Type
          enum:
            - APPROVED
            - DECLINED
          example: APPROVED
          type: string
      required:
        - id
        - verdictType
      type: object
    BetslipCashoutInfo:
      properties:
        cashoutable:
          type: boolean
        result:
          $ref: '#/components/schemas/CashoutPayoutResponse'
      type: object
    BetslipCutPlusInfo:
      properties:
        activeCutCount:
          format: int32
          type: integer
        generatedCuts:
          items:
            $ref: '#/components/schemas/GeneratedCut'
          type: array
        templateId:
          type: string
      type: object
    BetslipDetails:
      properties:
        amount:
          type: number
        archived:
          type: boolean
        betslipType:
          enum:
            - REAL
            - VIRTUAL
          type: string
        cashoutInfo:
          $ref: '#/components/schemas/BetslipCashoutInfo'
        currencyCode:
          type: string
        cutPlusInfo:
          $ref: '#/components/schemas/BetslipCutPlusInfo'
        deviceType:
          type: string
        id:
          type: string
        payout:
          $ref: '#/components/schemas/PayoutDetails'
        placed:
          format: date-time
          type: string
        selections:
          items:
            $ref: '#/components/schemas/BetItemDetailOddsResponse'
          type: array
        settled:
          format: date-time
          type: string
        settlementState:
          $ref: '#/components/schemas/SettlementState'
        stake:
          type: number
        status:
          enum:
            - PENDING
            - CANCELLED
            - CASHOUT
            - LOST
            - WON
            - PENDING_CUT_PLUS
            - WIN_CUT_PLUS
          type: string
        taxInfo:
          $ref: '#/components/schemas/BetslipTaxInfo'
        uuid:
          format: uuid
          type: string
        virtualInfo:
          $ref: '#/components/schemas/VirtualInfo'
      type: object
    BetslipForCancelResponse:
      properties:
        clientPhone:
          type: string
        id:
          format: int64
          type: integer
        requestTime:
          format: date-time
          type: string
        requestedCancelAdminName:
          type: string
        requestedCancelAdminUuid:
          type: string
        status:
          enum:
            - PENDING
            - CANCELLED
            - SETTLED
            - CASHOUT
            - PENDING_CUT_PLUS
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    BetslipTaxInfo:
      properties:
        amount:
          type: number
        compensationAmount:
          type: number
        compensationAmountTax:
          type: number
        compensationType:
          type: string
        enabled:
          type: boolean
        percentage:
          type: number
        stakeTax:
          type: number
        stakeTaxEnabled:
          type: boolean
        type:
          enum:
            - NET
            - GROSS
            - WHT_NET
            - STAKE
            - WHT_GROSS
            - WHT_NET_TIERED
          type: string
        whtOffset:
          type: boolean
      type: object
    BetslipTotalResponse:
      properties:
        betslips:
          items:
            $ref: '#/components/schemas/AdminBetslipResponse'
          type: array
        total:
          format: int32
          type: integer
      type: object
    BetslipTransactionsRequest:
      properties:
        betslipId:
          description: Betslip Id
          example: 1
          format: int64
          type: integer
        brand:
          description: Brand Identifier
          example: betpawa-uganda
          type: string
        userUuid:
          description: User UUID
          example: 8247caf9-bbf6-4b8c-b964-db1a01fc49c5
          type: string
      type: object
    BetslipTransactionsResponse:
      properties:
        transactions:
          items:
            $ref: '#/components/schemas/TransactionResponse'
          type: array
      type: object
    BetslipsByEventRequest:
      properties:
        allJurisdictions:
          type: boolean
        eventId:
          format: int32
          type: integer
      type: object
    BlockedParticipantExchange:
      properties:
        userUuids:
          items:
            format: uuid
            type: string
          type: array
      required:
        - userUuids
      type: object
    BookingCodeResponse:
      properties:
        code:
          type: string
      type: object
    BookingNumberResponse:
      properties:
        selectionResponses:
          items:
            $ref: '#/components/schemas/EventSelectionResponse1'
          type: array
      type: object
    BooleanFilter:
      properties:
        value:
          example: true
          type: boolean
      type: object
    BooleanRequest:
      properties:
        Enable:
          type: boolean
      type: object
    BooleanResponse:
      properties:
        value:
          type: boolean
      type: object
    BooleanResponse1:
      properties:
        success:
          type: boolean
      type: object
    BrandComponentRequest:
      properties:
        brandIdentifier:
          type: string
        data:
          description: Static data as JSON for the component.
          example:
            key: value
          type: string
        language:
          description: Leave it blank if no translations needed
          type: string
      required:
        - brandIdentifier
        - data
        - language
      type: object
    BrandConfigurationRequest:
      properties:
        approximateCurrencyRateToUsd:
          format: int32
          type: integer
        automaticCompensationThreshold:
          format: int32
          type: integer
        brandIdentifier:
          type: string
        countingSuccessfulWithdrawalsEnabled:
          type: boolean
        currencyCode:
          type: string
        currencyFormat:
          type: string
        currentTimeZone:
          type: string
        kycRequiredForDeposit:
          type: boolean
        kycRequiredForWithdrawal:
          type: boolean
        maxTotalCompAmountPerDay:
          format: int32
          type: integer
        suspiciousBetCheckEnabled:
          type: boolean
      type: object
    BrandConfigurationResponse:
      properties:
        approximateCurrencyRateToUsd:
          format: int32
          type: integer
        automaticCompensationThreshold:
          format: int32
          type: integer
        brandIdentifier:
          type: string
        countingSuccessfulWithdrawalsEnabled:
          type: boolean
        currencyCode:
          type: string
        currencyFormat:
          type: string
        currentTimeZone:
          type: string
        kycRequiredForDeposit:
          type: boolean
        kycRequiredForWithdrawal:
          type: boolean
        maxTotalCompAmountPerDay:
          format: int32
          type: integer
        suspiciousBetCheckEnabled:
          type: boolean
      type: object
    BrandDetails:
      properties:
        currency:
          description: Set of available currencies for brand in ISO-4217 code format
            (e.g. USD, UGX). NB!! first value will be set as default currency for
            this brand
          items:
            pattern: '[A-Z]{3}'
            type: string
          type: array
        isoCountryCode:
          maxLength: 2
          minLength: 2
          type: string
        locale:
          description: Set of available locales for brand in "en-US" format. NB!!
            first value will be set as default locale for this brand
          items:
            pattern: '[a-z]{2}-[A-Z]{2}'
            type: string
          type: array
        rootDomain:
          type: string
      required:
        - currency
        - isoCountryCode
        - locale
        - rootDomain
      type: object
    BrandEnabled:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
      type: object
    BrandPreferenceRequest:
      properties:
        preferences:
          additionalProperties:
            type: object
          description: Any JSON object is valid for brand preferences
          type: object
      required:
        - preferences
      type: object
    BrandResponse:
      properties:
        active:
          type: boolean
        brand:
          type: string
        details:
          $ref: '#/components/schemas/BrandDetails'
        identifier:
          type: string
        landingPageActive:
          type: boolean
        launchDate:
          format: date-time
          type: string
        media:
          additionalProperties:
            type: string
          type: object
        multiNumbersSupported:
          type: boolean
        preference:
          additionalProperties:
            type: object
          type: object
      type: object
    BrandSettingsRequest:
      properties:
        brands:
          items:
            type: string
          type: array
      type: object
    BrandSettingsResponse:
      properties:
        brandsSettings:
          additionalProperties:
            type: number
          type: object
      type: object
    BrandsResponse:
      properties:
        brands:
          items:
            $ref: '#/components/schemas/BrandResponse'
          type: array
      type: object
    BulkGameUpdateRequest:
      properties:
        brands:
          items:
            $ref: '#/components/schemas/BrandEnabled'
          type: array
        categories:
          items:
            $ref: '#/components/schemas/CategoryPosition'
          type: array
        gamePosition:
          format: int32
          type: integer
        provider:
          type: string
        providerGameId:
          type: string
      required:
        - brands
        - provider
        - providerGameId
      type: object
    BulkId:
      properties:
        id:
          format: int32
          type: integer
      type: object
    CancelWithdrawalV2:
      properties:
        withdrawalUuid:
          format: uuid
          type: string
      type: object
    CancellationSummaryRecordInfo:
      properties:
        cancellation:
          format: date-time
          type: string
        totalBetItems:
          format: int32
          type: integer
        totalUniqueUsers:
          format: int64
          type: integer
      type: object
    CarriersBasedPhoneNumberRuleValueDto:
      allOf:
        - $ref: '#/components/schemas/RuleDto'
      type: object
    CashInTaxPreviewResponse:
      properties:
        pawaChips:
          type: number
        payout:
          type: number
        payoutCurrency:
          type: string
        taxAmount:
          type: number
        taxPercentage:
          type: number
        winnings:
          type: number
      type: object
    CashoutAvailabilityDto:
      properties:
        available:
          type: boolean
        inPlayOddsCache:
          format: int32
          type: integer
        inPlayPollingSeconds:
          format: int32
          type: integer
        inPlayRequestLimit:
          format: int32
          type: integer
        liveDelaySeconds:
          format: int32
          type: integer
        pollingEnabled:
          type: boolean
        preMatchOddsCache:
          format: int32
          type: integer
        preMatchPollingSeconds:
          format: int32
          type: integer
        preMatchRequestLimit:
          format: int32
          type: integer
      type: object
    CashoutConfigurationDto:
      properties:
        allowPreMatchProfit:
          type: boolean
        brand:
          type: string
        cancellationOfferedMaxRelativeProbabilityChange:
          format: double
          type: number
        cancellationOfferedMinutes:
          format: int32
          type: integer
        cashoutAvailability:
          $ref: '#/components/schemas/CashoutAvailabilityDto'
        extraWinMarginMultiplier:
          format: double
          type: number
        fixedMargin:
          format: double
          type: number
        logProbabilityCashout:
          type: boolean
        marginReAddedLengthWin:
          format: double
          type: number
        maxAllowedChangeForConfirmation:
          format: double
          type: number
        maximumCombinationsToCalculate:
          format: int32
          type: integer
        minimumOffer:
          type: number
        offerValiditySeconds:
          format: int32
          type: integer
        polyDecreaseRateLostBet:
          format: double
          type: number
        useProbabilityCashout:
          type: boolean
      type: object
    CashoutLogDto:
      properties:
        betslipId:
          type: string
        createdAt:
          format: date-time
          type: string
        events:
          items:
            $ref: '#/components/schemas/EventDetailsDto'
          type: array
        offerErrorType:
          type: string
        offerId:
          type: string
        offerPayoutNet:
          type: number
      type: object
    CashoutPayoutResponse:
      properties:
        cashoutType:
          type: string
        gross:
          type: number
        net:
          type: number
        tax:
          type: number
        whtCompensation:
          type: number
        whtCompensationTax:
          type: number
      type: object
    CategoriesRequest:
      properties:
        ids:
          items:
            type: string
          type: array
      required:
        - ids
      type: object
    CategoryActiveRegionsResponse:
      properties:
        category:
          $ref: '#/components/schemas/CategoryStaticMeta'
        countries:
          items:
            $ref: '#/components/schemas/RegionResponse'
          type: array
        liveEventsCount:
          format: int64
          type: integer
        upcomingEventsCount:
          format: int64
          type: integer
      type: object
    CategoryAddRequest:
      properties:
        name:
          type: string
        translations:
          items:
            $ref: '#/components/schemas/CategoryTranslationAddRequest'
          type: array
        values:
          items:
            type: string
          type: array
      type: object
    CategoryEventCount:
      properties:
        category:
          $ref: '#/components/schemas/CategoryStaticMeta'
        liveEventCount:
          format: int64
          type: integer
        upcomingEventCount:
          format: int64
          type: integer
      type: object
    CategoryPosition:
      properties:
        categoryUuid:
          format: uuid
          type: string
        position:
          format: int32
          type: integer
      type: object
    CategoryResponse:
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
      type: object
    CategoryResponseV2:
      properties:
        boostedEventCount:
          format: int64
          type: integer
        category:
          $ref: '#/components/schemas/CategoryStaticMeta'
        hotEventCount:
          format: int64
          type: integer
        liveEventCount:
          format: int64
          type: integer
        regions:
          items:
            $ref: '#/components/schemas/RegionResponseV2'
          type: array
        upcomingEventCount:
          format: int64
          type: integer
      type: object
    CategoryResponseV3:
      properties:
        category:
          $ref: '#/components/schemas/CategoryStaticMeta'
        eventCounts:
          $ref: '#/components/schemas/EventCounts'
        regions:
          items:
            $ref: '#/components/schemas/RegionResponseV3'
          type: array
        week:
          $ref: '#/components/schemas/CountCalendar'
      type: object
    CategoryStaticMeta:
      properties:
        id:
          type: string
        name:
          type: string
        priority:
          format: int32
          type: integer
      type: object
    CategoryTranslationAddRequest:
      properties:
        language:
          type: string
        name:
          type: string
        values:
          items:
            type: string
          type: array
      type: object
    ChangeRecord:
      properties:
        author:
          type: string
        changeType:
          type: string
        left:
          type: object
        propertyName:
          type: string
        right:
          type: object
        timestamp:
          format: date-time
          type: string
      type: object
    ClientContext:
      properties:
        brandIdentifier:
          type: string
        clientUuid:
          format: uuid
          type: string
      required:
        - brandIdentifier
        - clientUuid
      type: object
    CloseRequest:
      properties:
        accountClosed:
          description: Default value true. To open account set value to false
          type: boolean
        brandIdentifier:
          description: User's brand. For v2 endpoint only
          type: string
        userNote:
          description: Comment on the reason of this action
          type: string
        userUuid:
          format: uuid
          type: string
      required:
        - userNote
        - userUuid
      type: object
    CloseResponse:
      properties:
        accountClosed:
          type: boolean
        banned:
          type: boolean
      type: object
    CompetitionResponse:
      properties:
        competition:
          $ref: '#/components/schemas/CompetitionStaticMeta'
        eventCount:
          format: int64
          type: integer
      type: object
    CompetitionResponseV2:
      properties:
        boostedEventCount:
          format: int64
          type: integer
        competition:
          $ref: '#/components/schemas/CompetitionStaticMeta'
        eventCount:
          format: int64
          type: integer
        liveEventCount:
          format: int64
          type: integer
        popularEventCount:
          format: int64
          type: integer
        upcomingEventCount:
          format: int64
          type: integer
      type: object
    CompetitionResponseV3:
      properties:
        competition:
          $ref: '#/components/schemas/CompetitionStaticMeta'
        eventCounts:
          $ref: '#/components/schemas/EventCounts'
        week:
          $ref: '#/components/schemas/CountCalendar'
      type: object
    CompetitionSearchResponse:
      properties:
        category:
          $ref: '#/components/schemas/CategoryStaticMeta'
        competition:
          $ref: '#/components/schemas/CompetitionStaticMeta'
        region:
          $ref: '#/components/schemas/RegionStaticMeta'
      type: object
    CompetitionStandingResponse:
      properties:
        id:
          type: string
        name:
          type: string
        participantStandings:
          items:
            $ref: '#/components/schemas/ParticipantStandingResponse'
          type: array
      type: object
    CompetitionStaticMeta:
      properties:
        id:
          type: string
        name:
          type: string
        priority:
          format: int32
          type: integer
        slug:
          type: string
      type: object
    ComponentDataRequest:
      properties:
        components:
          description: Set of component names to load
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ConfigurationAuditResponse:
      properties:
        allowPreMatchProfit:
          type: string
        cancellationOfferedMaxRelativeProbabilityChange:
          type: string
        cancellationOfferedMinutes:
          type: string
        extraWinMarginMultiplier:
          type: string
        fixedMargin:
          type: string
        logProbabilityCashout:
          type: string
        marginReAddedLengthWin:
          type: string
        maxAllowedChangeForConfirmation:
          type: string
        maximumCombinationsToCalculate:
          type: string
        minimumOffer:
          type: string
        offerValiditySeconds:
          type: string
        polyDecreaseRateLostBet:
          type: string
        revisionDto:
          $ref: '#/components/schemas/RevisionDto'
        useProbabilityCashout:
          type: string
      type: object
    ConfigurationFieldsResponse:
      properties:
        jackpotFrequencies:
          description: Progressive jackpot frequency types
          items:
            description: Progressive jackpot frequency types
            enum:
              - HOURLY
              - DAILY
              - WEEKLY
              - MONTHLY
            type: string
          type: array
        jackpotTypes:
          description: Progressive jackpot types
          items:
            description: Progressive jackpot types
            enum:
              - SPORT
              - CASINO
              - VIRTUALS
            type: string
          type: array
        transactionFilters:
          description: Progressive jackpot configuration transaction transactionFilters
            with possible values
          items:
            $ref: '#/components/schemas/FilterResponse'
          type: array
      type: object
    ConfigurationResponse:
      properties:
        amountLimit:
          description: Progressive jackpot accumulated amount limit
          nullable: true
          type: number
        bonusPerSecond:
          description: Progressive jackpot additional bonus added each second
          type: number
        brandIdentifier:
          description: Progressive jackpot brand
          type: string
        dryRun:
          description: Progressive jackpot configuration dry run indicator. Default
            true
          type: boolean
        duration:
          description: Jackpot duration expression based on the ISO-8601 duration
            format
          nullable: true
          properties:
            nano:
              format: int32
              type: integer
            negative:
              type: boolean
            positive:
              type: boolean
            seconds:
              format: int64
              type: integer
            units:
              items:
                properties:
                  dateBased:
                    type: boolean
                  duration:
                    properties:
                      nano:
                        format: int32
                        type: integer
                      negative:
                        type: boolean
                      positive:
                        type: boolean
                      seconds:
                        format: int64
                        type: integer
                      zero:
                        type: boolean
                    type: object
                  durationEstimated:
                    type: boolean
                  timeBased:
                    type: boolean
                type: object
              type: array
            zero:
              type: boolean
          type: object
        durationOffset:
          description: Jackpot duration offset based on the ISO-8601 duration format
          nullable: true
          properties:
            nano:
              format: int32
              type: integer
            negative:
              type: boolean
            positive:
              type: boolean
            seconds:
              format: int64
              type: integer
            units:
              items:
                properties:
                  dateBased:
                    type: boolean
                  duration:
                    properties:
                      nano:
                        format: int32
                        type: integer
                      negative:
                        type: boolean
                      positive:
                        type: boolean
                      seconds:
                        format: int64
                        type: integer
                      zero:
                        type: boolean
                    type: object
                  durationEstimated:
                    type: boolean
                  timeBased:
                    type: boolean
                type: object
              type: array
            zero:
              type: boolean
          type: object
        enabled:
          description: Progressive jackpot configuration enabled indicator. Default
            true
          type: boolean
        highlightColor:
          description: 'Color picker for highlight color in HEX, e.g. #00FF00'
          type: string
        imageUrl:
          description: Progressive jackpot image url
          type: string
        initialAmount:
          description: Progressive jackpot initial amount. Default is 0
          type: number
        jackpotSubtype:
          description: Subtype, e.g. Aviator, JetX, etc
          type: string
        name:
          description: Progressive jackpot configuration name
          type: string
        rules:
          description: Progressive jackpot rules
          items:
            $ref: '#/components/schemas/ConfigurationRuleResponse'
          type: array
        textColor:
          description: 'Color picker for text color in HEX, e.g. #00FF00'
          type: string
        timeLimitFrom:
          description: Progressive jackpot time limit from in UTC
          format: date-time
          nullable: true
          type: string
        timeLimitTo:
          description: Progressive jackpot time limit to in UTC
          format: date-time
          nullable: true
          type: string
        uuid:
          description: Progressive jackpot configuration UUID
          format: uuid
          type: string
      type: object
    ConfigurationRuleResponse:
      properties:
        configurationUuid:
          description: Progressive jackpot configuration UUID
          format: uuid
          type: string
        filterValue:
          description: Progressive jackpot transaction filter value
          type: string
        stakedAmountRate:
          description: Percent of staked amount to be accumulated into jackpot amount
          type: number
        transactionFilter:
          description: Progressive jackpot transaction filter
          enum:
            - CATEGORY
            - TRANSACTION_TYPE
            - CASINO_PROVIDER
            - CASINO_GAME
          type: string
        uuid:
          description: Progressive jackpot rule UUID
          format: uuid
          type: string
      type: object
    ConfigurationSummaryQuery:
      properties:
        brandIdentifier:
          type: string
        name:
          type: string
      type: object
    ConfigurationSummaryRequest:
      properties:
        query:
          $ref: '#/components/schemas/ConfigurationSummaryQuery'
        skip:
          description: Page number taken from previous search response. Default 0
          format: int32
          minimum: 0
          type: integer
        take:
          description: How many configurations to load. Default 100
          format: int32
          minimum: 1
          type: integer
      required:
        - query
      type: object
    ConfigurationSummaryRowResponse:
      description: Progressive jackpot configurations summary
      properties:
        brandIdentifier:
          description: Progressive jackpot brand
          type: string
        enabled:
          description: Progressive jackpot configuration enabled indicator. Default
            true
          type: boolean
        name:
          description: Progressive jackpot configuration name
          type: string
        uuid:
          description: Progressive jackpot configuration UUID
          format: uuid
          type: string
      type: object
    ConfigurationsSummaryResponse:
      properties:
        configurations:
          description: Progressive jackpot configurations summary
          items:
            $ref: '#/components/schemas/ConfigurationSummaryRowResponse'
          type: array
      type: object
    ConfirmRequest:
      properties:
        offerId:
          type: string
      type: object
    ConnectedUserAuthenticationRequest:
      properties:
        connectedUserUuid:
          format: uuid
          type: string
      type: object
    ConnectedUserResponse:
      properties:
        phoneNumber:
          type: string
        type:
          enum:
            - UNVERIFIED
            - VERIFIED
            - CONNECTED
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    ConnectedUsersResponse:
      properties:
        connectedUsers:
          items:
            $ref: '#/components/schemas/ConnectedUserResponse'
          type: array
      type: object
    CorrectCountDownloadRequest:
      properties:
        minCorrect:
          format: int32
          type: integer
        poolJurisdictionIds:
          items:
            format: int64
            type: integer
          type: array
      required:
        - minCorrect
        - poolJurisdictionIds
      type: object
    CountAndAdditionalViewMessagesResponse:
      properties:
        count:
          format: int64
          type: integer
        pathMessages:
          additionalProperties:
            items:
              $ref: '#/components/schemas/UserMessageDto'
            type: array
          type: object
      type: object
    CountCalendar:
      description: contain array of days for next week that has any type of events
      properties:
        days:
          items:
            $ref: '#/components/schemas/EventCountsPerDay'
          type: array
      type: object
    CountryDto:
      properties:
        id:
          format: int32
          type: integer
        iso:
          type: string
        name:
          type: string
        regionId:
          format: int32
          type: integer
      type: object
    CountryResponse:
      properties:
        brandIdentifier:
          type: string
        countryIso2Code:
          type: string
        landingPageActive:
          type: boolean
        rootDomain:
          type: string
      type: object
    CreateBrandRequest:
      properties:
        brand:
          example: bet247
          pattern: ^([a-zA-Z0-9]+)$
          type: string
        details:
          $ref: '#/components/schemas/BrandDetails'
        identifier:
          example: bit42-antarctica
          pattern: ^([a-z0-9]+)-([a-z]+)$
          type: string
        launchDate:
          format: date-time
          type: string
        media:
          additionalProperties:
            type: string
          type: object
        multiNumbersSupported:
          type: boolean
      required:
        - brand
        - identifier
        - launchDate
      type: object
    CreateConfigurationRequest:
      properties:
        amountLimit:
          description: Progressive jackpot accumulated amount limit
          exclusiveMinimum: true
          minimum: 0
          nullable: true
          type: number
        bonusPerSecond:
          description: Progressive Jackpot bonus additionally added each second
          exclusiveMinimum: false
          minimum: 0
          nullable: true
          type: number
        brandIdentifier:
          description: Progressive jackpot brand
          type: string
        dryRun:
          description: Progressive jackpot dry run indicator. Default true
          nullable: true
          type: boolean
        duration:
          description: Jackpot duration expression based on the ISO-8601 duration
            format
          nullable: true
          properties:
            nano:
              format: int32
              type: integer
            negative:
              type: boolean
            positive:
              type: boolean
            seconds:
              format: int64
              type: integer
            units:
              items:
                properties:
                  dateBased:
                    type: boolean
                  duration:
                    properties:
                      nano:
                        format: int32
                        type: integer
                      negative:
                        type: boolean
                      positive:
                        type: boolean
                      seconds:
                        format: int64
                        type: integer
                      zero:
                        type: boolean
                    type: object
                  durationEstimated:
                    type: boolean
                  timeBased:
                    type: boolean
                type: object
              type: array
            zero:
              type: boolean
          type: object
        durationOffset:
          description: Jackpot duration offset based on the ISO-8601 duration format
          nullable: true
          properties:
            nano:
              format: int32
              type: integer
            negative:
              type: boolean
            positive:
              type: boolean
            seconds:
              format: int64
              type: integer
            units:
              items:
                properties:
                  dateBased:
                    type: boolean
                  duration:
                    properties:
                      nano:
                        format: int32
                        type: integer
                      negative:
                        type: boolean
                      positive:
                        type: boolean
                      seconds:
                        format: int64
                        type: integer
                      zero:
                        type: boolean
                    type: object
                  durationEstimated:
                    type: boolean
                  timeBased:
                    type: boolean
                type: object
              type: array
            zero:
              type: boolean
          type: object
        durationOffsetValid:
          type: boolean
        durationValid:
          type: boolean
        enabled:
          description: Progressive jackpot enabled indicator. Default true
          nullable: true
          type: boolean
        highlightColor:
          description: 'Color picker for highlight colour in HEX, e.g. #00FF00'
          maxLength: 7
          minLength: 0
          type: string
        initialAmount:
          description: Progressive jackpot initial amount. Default is 0
          exclusiveMinimum: false
          minimum: 0
          nullable: true
          type: number
        jackpotSubtype:
          description: Subtype, e.g. Aviator, JetX, etc
          maxLength: 30
          minLength: 0
          type: string
        name:
          description: Progressive jackpot configuration name
          type: string
        rules:
          description: Progressive jackpot rules. At least one rule must be present
            for the configuration
          items:
            $ref: '#/components/schemas/CreateUpdateConfigurationRuleRequest'
          maxItems: 2147483647
          minItems: 1
          type: array
        textColor:
          description: 'Color picker for text colour in HEX, e.g. #00FF00'
          maxLength: 7
          minLength: 0
          type: string
        timeLimitCorrectlySet:
          type: boolean
        triggerConditionSet:
          type: boolean
      required:
        - brandIdentifier
        - name
        - rules
      type: object
    CreateForcedWithdrawalRequest:
      properties:
        brandIdentifier:
          type: string
        payoutType:
          type: string
        userUuids:
          items:
            type: string
          type: array
      type: object
    CreateManualTransactionRequest:
      properties:
        amount:
          type: number
        brandIdentifier:
          type: string
        currencyCode:
          type: string
        relatedId:
          type: string
        text:
          type: string
        transactionType:
          enum:
            - UNKNOWN
            - BET_CASINO
            - DEPOSIT
            - WITHDRAWAL
            - BET_POOL
            - BET_SPORT
            - BET_SPORT_VIRTUAL
            - DEPOSIT_FEE
            - ROLLBACK_DEPOSIT_FEE
            - COMPENSATION_CREDIT
            - COMPENSATION_CORRECTIONAL_DEBIT
            - WITHDRAWAL_FEE
            - ROLLBACK_DEPOSIT
            - ROLLBACK_WITHDRAWAL
            - ROLLBACK_WITHDRAWAL_FEE
            - WITHDRAWAL_TAX
            - ROLLBACK_WITHDRAWAL_TAX
            - KIRON_BET
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    CreateManualTransactionResponse:
      properties:
        failed:
          items:
            $ref: '#/components/schemas/CreateManualTransactionRequest'
          type: array
        successfulTransactions:
          items:
            $ref: '#/components/schemas/SuccessfulManualTransactionResponse'
          type: array
      type: object
    CreatePawapayWalletBalanceConfigurationRequest:
      properties:
        balanceLimit:
          type: number
        brandIdentifier:
          type: string
        countryCode:
          type: string
        enabled:
          type: boolean
        pawapayCorrespondent:
          type: string
      type: object
    CreateUpdateConfigurationRuleRequest:
      properties:
        filterValue:
          description: Progressive jackpot transaction filter value
          type: string
        stakedAmountRate:
          description: Percent of staked amount to be accumulated into jackpot amount
          exclusiveMinimum: true
          minimum: 0
          type: number
        transactionFilter:
          description: Progressive jackpot transaction filter
          enum:
            - CATEGORY
            - TRANSACTION_TYPE
            - CASINO_PROVIDER
            - CASINO_GAME
          type: string
      required:
        - filterValue
        - stakedAmountRate
        - transactionFilter
      type: object
    CurrencyRateDto:
      properties:
        brandIdentifier:
          type: string
        rate:
          type: number
      type: object
    CurrentPeriodResponse:
      properties:
        historicId:
          format: int32
          type: integer
      type: object
    DeclineWithdrawalV2Dto:
      properties:
        rejectionReason:
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    DeleteDerivedDataMetadataDto:
      properties:
        keyName:
          description: Immutable Key name for 'UserDerivedData' values
          type: string
      required:
        - keyName
      type: object
    DeletePawapayDepositTriggersRequest:
      properties:
        includeNonFiredTriggers:
          type: boolean
      type: object
    DeleteScenarioRequest:
      properties:
        brandIdentifier:
          description: Brand identifier where the scenario is used
          example: betpawa-uganda
          type: string
        name:
          description: The name of the validation scenario
          example: signUp
          type: string
      type: object
    DeleteTriggersRequest:
      properties:
        includeNonFiredTriggers:
          type: boolean
        jobClassName:
          type: string
      type: object
    DeleteUserPreferenceValueRequest:
      properties:
        clientContext:
          $ref: '#/components/schemas/ClientContext'
        note:
          type: string
      type: object
    DepositChargeableFeeResponse:
      properties:
        currency:
          type: string
        feeAmount:
          type: number
        feeName:
          type: string
        finalAmount:
          type: number
        initialAmount:
          type: number
      type: object
    DepositCompensatedFeeResponse:
      properties:
        amount:
          type: number
        compensationAmount:
          type: number
        currency:
          type: string
        depositType:
          type: string
        feeAmount:
          type: number
      type: object
    DepositOptionDto:
      properties:
        applicableForUserTelco:
          type: boolean
        chargeableFeeAmount:
          type: number
        chargeableFeeName:
          type: string
        chargeableFeeStructure:
          type: string
        currencyCode:
          type: string
        depositTypeName:
          type: string
        feeAmount:
          type: number
        feeStructure:
          type: string
        fractionalSupported:
          type: boolean
        maxDepositAmount:
          format: int32
          type: integer
        minDepositAmount:
          format: int32
          type: integer
        minDepositAmountForFeeCompensation:
          type: number
        pageUrl:
          type: string
        paymentProvider:
          type: string
        phoneOperatorDescription:
          type: string
        sorting:
          format: int32
          type: integer
        status:
          type: string
        text:
          type: string
        ussdAvailable:
          type: boolean
        webAvailable:
          type: boolean
      type: object
    DepositStatement:
      properties:
        amount:
          type: number
        depositInitId:
          type: string
        depositType:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        receiptNo:
          type: string
        user:
          deprecated: true
          type: string
      type: object
    DepositStatementsParsedResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/DepositStatement'
          type: array
        unReadLine:
          items:
            type: string
          type: array
      type: object
    DepositTypeCreateRequest:
      properties:
        allowManual:
          type: boolean
        availabilityCheckEnabled:
          type: boolean
        brandIdentifier:
          type: string
        chargeableFeeAmount:
          type: number
        chargeableFeeName:
          type: string
        chargeableFeeStructure:
          type: string
        compensatedFeeAmount:
          type: number
        compensatedFeeStructure:
          type: string
        currencyCode:
          type: string
        depositType:
          type: string
        depositUrl:
          type: string
        descriptionText:
          type: string
        enabled:
          type: boolean
        exIdentifierNeeded:
          type: boolean
        fractionalSupported:
          type: boolean
        id:
          format: int32
          type: integer
        importStatementSupported:
          type: boolean
        isUssd:
          type: boolean
        maxDepositAmount:
          format: int32
          type: integer
        minDepositAmount:
          format: int32
          type: integer
        minDepositAmountForFeeCompensation:
          type: number
        pawapayCorrespondent:
          type: string
        pawapayImportStatementTelcoName:
          type: string
        phoneOperatorDescription:
          type: string
        priority:
          format: int32
          type: integer
        ussdAvailable:
          type: boolean
        webAvailable:
          type: boolean
      required:
        - depositType
      type: object
    DepositTypeDetailsDto:
      properties:
        limit:
          $ref: '#/components/schemas/PaymentSystemLimit'
        status:
          type: string
      type: object
    DepositTypeDto:
      properties:
        allowedToClients:
          type: boolean
        availabilityCheckEnabled:
          type: boolean
        brandIdentifier:
          type: string
        chargeableFeeAmount:
          type: number
        chargeableFeeName:
          type: string
        chargeableFeeStructure:
          enum:
            - FIXED
            - PERCENTAGE
            - TIERED
          type: string
        compensatedFeeAmount:
          type: number
        compensatedFeeStructure:
          enum:
            - FIXED
            - PERCENTAGE
            - TIERED
          type: string
        depositType:
          type: string
        depositUrl:
          type: string
        description:
          type: string
        disabled:
          type: boolean
        enabled:
          type: boolean
        externalIdentifierRequired:
          type: boolean
        fractionalSupported:
          type: boolean
        id:
          format: int32
          type: integer
        maxDepositAmount:
          format: int32
          type: integer
        minDepositAmount:
          format: int32
          type: integer
        minDepositAmountForFeeCompensation:
          type: number
        pawapayCorrespondent:
          type: string
        pawapayImportStatementTelcoName:
          type: string
        phoneOperatorDescription:
          type: string
        priorityWithinBrand:
          format: int32
          type: integer
        supportingImportStatements:
          type: boolean
        ussdAvailable:
          type: boolean
        webAvailable:
          type: boolean
      type: object
    DepositTypeReplacement:
      properties:
        forAmountStrictlyLessThan:
          type: number
        from:
          type: string
        to:
          type: string
        valid:
          type: boolean
      type: object
    DepositTypeReplacingProperties:
      properties:
        featureDisabled:
          type: boolean
        replacements:
          items:
            $ref: '#/components/schemas/DepositTypeReplacement'
          type: array
      type: object
    DepositTypeResponse:
      properties:
        DepositType:
          type: string
        DepositTypeId:
          format: int32
          type: integer
        ExIdRequired:
          type: boolean
      type: object
    DepositTypeTierFeesDto:
      properties:
        amount:
          description: Fixed fee amount if percentage is not specified
          example: 10
          type: number
        boundFrom:
          description: Lower bound of the deposit tier range
          example: 0
          type: number
        boundTo:
          description: Upper bound of the deposit tier range
          example: 1000
          type: number
        operation:
          description: 'Operation type: COMPENSATION, DEPOSIT_FEE, ...'
          example: DEPOSIT_FEE
          type: string
        percentage:
          description: Fee percentage to be applied to the deposit amount
          example: 2.5
          type: number
      required:
        - operation
      type: object
    DepositTypeUpdateRequest:
      properties:
        allowManual:
          type: boolean
        availabilityCheckEnabled:
          type: boolean
        brandIdentifier:
          type: string
        chargeableFeeAmount:
          type: number
        chargeableFeeName:
          type: string
        chargeableFeeStructure:
          type: string
        compensatedFeeAmount:
          type: number
        compensatedFeeStructure:
          type: string
        currencyCode:
          type: string
        depositUrl:
          type: string
        descriptionText:
          type: string
        enabled:
          type: boolean
        exIdentifierNeeded:
          type: boolean
        fractionalSupported:
          type: boolean
        id:
          format: int32
          type: integer
        importStatementSupported:
          type: boolean
        isUssd:
          type: boolean
        maxDepositAmount:
          format: int32
          type: integer
        minDepositAmount:
          format: int32
          type: integer
        minDepositAmountForFeeCompensation:
          type: number
        pawapayCorrespondent:
          type: string
        pawapayImportStatementTelcoName:
          type: string
        phoneOperatorDescription:
          type: string
        priority:
          format: int32
          type: integer
        ussdAvailable:
          type: boolean
        webAvailable:
          type: boolean
      type: object
    DerivedDataMetadataDto:
      properties:
        accessModifier:
          description: Access modifier for 'UserDerivedData' values
          enum:
            - PUBLIC
            - PROTECTED
            - PRIVATE
          type: string
        keyName:
          description: Immutable Key name for 'UserDerivedData' values
          type: string
        specification:
          description: Description for 'UserDerivedData' values
          type: string
        type:
          description: Type of the value
          enum:
            - BOOLEAN
            - NUMBER
            - STRING
          type: string
      required:
        - accessModifier
        - keyName
      type: object
    DerivedDataMetadataForMultipleBrandsRequest:
      properties:
        brands:
          items:
            type: string
          type: array
        derivedDataMetadataDto:
          $ref: '#/components/schemas/DerivedDataMetadataDto'
      required:
        - brands
      type: object
    DetailedTicketResponse:
      properties:
        freeTicketsUsed:
          format: int32
          type: integer
        id:
          type: string
        payoutDetails:
          $ref: '#/components/schemas/PayoutDetails1'
        pool:
          $ref: '#/components/schemas/PoolDto'
        purchaseDate:
          format: date-time
          type: string
        rows:
          items:
            $ref: '#/components/schemas/TicketRow'
          type: array
        status:
          enum:
            - PENDING
            - LOST
            - WON
            - CANCELLED
          type: string
        tiebreaker:
          $ref: '#/components/schemas/TicketTiebreaker'
      type: object
    DigmoBalance:
      properties:
        available:
          type: string
        country:
          type: string
        currency:
          type: string
      type: object
    DigmoInvitationLinkRequest:
      properties:
        failedUrl:
          type: string
        successfulUrl:
          type: string
      type: object
    DigmoInvitationLinkResponse:
      properties:
        invitationUrl:
          type: string
      type: object
    DigmoUserBalanceResponse:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/DigmoBalance'
          type: array
        code:
          type: string
        message:
          type: string
        referenceUserId:
          type: string
        userId:
          type: string
      type: object
    DisplayNameDs:
      description: Jackpot user facing name
      properties:
        language:
          type: string
        name:
          type: string
      type: object
    DisplayResponse:
      properties:
        currentPeriod:
          $ref: '#/components/schemas/PeriodResponse1'
        currentServer:
          type: string
        minute:
          type: string
      type: object
    DisplayResponse1:
      properties:
        currentPeriod:
          $ref: '#/components/schemas/PeriodResponse2'
        currentServer:
          type: string
        minute:
          type: string
      type: object
    EntryStatusCount:
      properties:
        count:
          format: int64
          type: integer
        status:
          type: string
      type: object
    ErrorResponse:
      properties:
        error:
          type: string
        params:
          items:
            type: string
          type: array
        payload:
          additionalProperties:
            type: object
          type: object
        uuid:
          type: string
      type: object
    EventAdditionalInfo:
      properties:
        live:
          type: boolean
      type: object
    EventBetslipResponse:
      properties:
        betslipId:
          format: int64
          type: integer
        betslipUuid:
          type: string
        brand:
          type: string
        cancelled:
          type: boolean
        currencyCode:
          type: string
        formattedMarketName:
          type: string
        handicap:
          format: double
          type: number
        live:
          type: boolean
        marketTypeName:
          type: string
        outcome:
          type: string
        position:
          type: string
        price:
          type: number
        result:
          type: string
        stake:
          type: number
        time:
          format: date-time
          type: string
        totalItems:
          format: int32
          type: integer
        userUuid:
          type: string
        win:
          type: number
      type: object
    EventCounts:
      properties:
        boosted:
          format: int64
          type: integer
        hot:
          format: int64
          type: integer
        live:
          format: int64
          type: integer
        upcoming:
          format: int64
          type: integer
      type: object
    EventCountsPerDay:
      properties:
        counts:
          $ref: '#/components/schemas/EventCounts'
        day:
          format: date
          type: string
      type: object
    EventDetail:
      properties:
        groupName:
          type: string
        id:
          format: int64
          type: integer
        live:
          type: boolean
        marketId:
          format: int64
          type: integer
        name:
          type: string
        scoreAway:
          format: int32
          type: integer
        scoreHome:
          format: int32
          type: integer
        startDate:
          format: date-time
          type: string
        started:
          type: boolean
      type: object
    EventDetailedDto:
      properties:
        eventInfo:
          $ref: '#/components/schemas/EventDto'
        groupName:
          type: string
        live:
          type: boolean
        name:
          type: string
        poolId:
          format: int64
          type: integer
        startDate:
          format: date-time
          type: string
        started:
          type: boolean
      type: object
    EventDetailsDto:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    EventDto:
      properties:
        cancelled:
          type: boolean
        eventId:
          format: int64
          type: integer
        position:
          format: int32
          type: integer
        resulted:
          type: boolean
        scoreAway:
          format: int32
          type: integer
        scoreHome:
          format: int32
          type: integer
      type: object
    EventHitsDto:
      properties:
        hits:
          format: int32
          type: integer
        row:
          format: int32
          type: integer
      type: object
    EventPendingDto:
      properties:
        eventId:
          format: int64
          type: integer
        pendingCount:
          format: int64
          type: integer
      type: object
    EventResultingResponse:
      properties:
        selectedSettlements:
          items:
            $ref: '#/components/schemas/BetSettlementSelectionResponse'
          type: array
      type: object
    EventSelectionAdditionalInfo:
      properties:
        cashoutable:
          type: boolean
        live:
          type: boolean
        twoUp:
          type: boolean
      type: object
    EventSelectionResponse:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/EventSelectionAdditionalInfo'
        category:
          $ref: '#/components/schemas/IdName1'
        competition:
          $ref: '#/components/schemas/IdName1'
        event:
          $ref: '#/components/schemas/IdName1'
        id:
          type: string
        market:
          $ref: '#/components/schemas/ShortMarketInfo'
        name:
          type: string
        price:
          type: number
        region:
          $ref: '#/components/schemas/IdName1'
        startTime:
          format: date-time
          type: string
        typeId:
          type: string
      type: object
    EventSelectionResponse1:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/EventSelectionAdditionalInfo'
        category:
          $ref: '#/components/schemas/IdName2'
        competition:
          $ref: '#/components/schemas/IdName2'
        event:
          $ref: '#/components/schemas/IdName2'
        id:
          type: string
        market:
          $ref: '#/components/schemas/ShortMarketInfo'
        name:
          type: string
        price:
          type: number
        region:
          $ref: '#/components/schemas/IdName2'
        startTime:
          format: date-time
          type: string
        typeId:
          type: string
      type: object
    EventSelectionTupleResponse:
      properties:
        event:
          $ref: '#/components/schemas/EventShortInfo'
        market:
          $ref: '#/components/schemas/MarketShortInfo'
        price:
          $ref: '#/components/schemas/PriceResponse'
      type: object
    EventShortAdditionalInfo:
      properties:
        live:
          type: boolean
      type: object
    EventShortInfo:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/EventShortAdditionalInfo'
        id:
          type: string
        name:
          type: string
        startTime:
          format: date-time
          type: string
      type: object
    EventStatisticsResponse:
      properties:
        selectedStatistics:
          $ref: '#/components/schemas/BetItemStatsResponse'
        totalStatistics:
          $ref: '#/components/schemas/BetItemStatsResponse'
      type: object
    EventWithPricesByMarketResponse:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/EventAdditionalInfo'
        category:
          $ref: '#/components/schemas/IdName1'
        competition:
          $ref: '#/components/schemas/IdName1'
        id:
          type: string
        inplayBooked:
          type: boolean
        markets:
          description: Market grouped by market type
          items:
            $ref: '#/components/schemas/GroupedMarketResponse'
          type: array
        name:
          type: string
        neutralVenue:
          type: boolean
        participants:
          items:
            $ref: '#/components/schemas/ParticipantResponse'
          type: array
        region:
          $ref: '#/components/schemas/IdName1'
        results:
          $ref: '#/components/schemas/ResultsResponse'
        score:
          format: double
          type: number
        startTime:
          format: date-time
          type: string
        totalMarketCount:
          format: int64
          type: integer
        version:
          format: int64
          type: integer
        widgets:
          items:
            $ref: '#/components/schemas/WidgetResponse'
          type: array
      type: object
    EventWithPricesByMarketResponse1:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/EventAdditionalInfo'
        category:
          $ref: '#/components/schemas/IdName2'
        competition:
          $ref: '#/components/schemas/IdName2'
        id:
          type: string
        inplayBooked:
          type: boolean
        markets:
          description: Market grouped by market type
          items:
            $ref: '#/components/schemas/GroupedMarketResponse'
          type: array
        name:
          type: string
        neutralVenue:
          type: boolean
        participants:
          items:
            $ref: '#/components/schemas/ParticipantResponse'
          type: array
        region:
          $ref: '#/components/schemas/IdName2'
        results:
          $ref: '#/components/schemas/ResultsResponse'
        score:
          format: double
          type: number
        startTime:
          format: date-time
          type: string
        totalMarketCount:
          format: int64
          type: integer
        version:
          format: int64
          type: integer
        widgets:
          items:
            $ref: '#/components/schemas/WidgetResponse'
          type: array
      type: object
    EventWithPricesResponse:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/EventAdditionalInfo'
        category:
          $ref: '#/components/schemas/IdName1'
        competition:
          $ref: '#/components/schemas/IdName1'
        id:
          type: string
        markets:
          items:
            $ref: '#/components/schemas/MarketResponse'
          type: array
        name:
          type: string
        neutralVenue:
          type: boolean
        participants:
          items:
            $ref: '#/components/schemas/ParticipantResponse'
          type: array
        region:
          $ref: '#/components/schemas/IdName1'
        results:
          $ref: '#/components/schemas/ResultsResponse'
        score:
          format: double
          type: number
        scoreboard:
          $ref: '#/components/schemas/ScoreboardResponse'
          deprecated: true
        startTime:
          format: date-time
          type: string
        totalMarketCount:
          format: int32
          type: integer
        version:
          format: int64
          type: integer
        widget:
          $ref: '#/components/schemas/WidgetResponse'
          deprecated: true
        widgets:
          items:
            $ref: '#/components/schemas/WidgetResponse'
          type: array
      type: object
    EventWithPricesResponse1:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/EventAdditionalInfo'
        category:
          $ref: '#/components/schemas/IdName2'
        competition:
          $ref: '#/components/schemas/IdName2'
        id:
          type: string
        markets:
          items:
            $ref: '#/components/schemas/MarketResponse'
          type: array
        name:
          type: string
        neutralVenue:
          type: boolean
        participants:
          items:
            $ref: '#/components/schemas/ParticipantResponse'
          type: array
        region:
          $ref: '#/components/schemas/IdName2'
        results:
          $ref: '#/components/schemas/ResultsResponse'
        score:
          format: double
          type: number
        scoreboard:
          $ref: '#/components/schemas/ScoreboardResponse'
          deprecated: true
        startTime:
          format: date-time
          type: string
        totalMarketCount:
          format: int32
          type: integer
        version:
          format: int64
          type: integer
        widget:
          $ref: '#/components/schemas/WidgetResponse'
          deprecated: true
        widgets:
          items:
            $ref: '#/components/schemas/WidgetResponse'
          type: array
      type: object
    EventsBatch:
      properties:
        request:
          $ref: '#/components/schemas/EventsRequest'
        responses:
          items:
            $ref: '#/components/schemas/EventWithPricesByMarketResponse1'
          type: array
      type: object
    EventsBatchRequest:
      properties:
        queries:
          items:
            $ref: '#/components/schemas/EventsRequest'
          maxItems: 21
          minItems: 1
          type: array
      type: object
    EventsBatchResponse:
      properties:
        responses:
          items:
            $ref: '#/components/schemas/EventsBatch'
          type: array
      type: object
    EventsBatchResponseV3:
      properties:
        responses:
          items:
            $ref: '#/components/schemas/EventsBatch'
          type: array
      type: object
    EventsByIdsRequest:
      properties:
        eventIds:
          example:
            - 4
            - 5
            - 6
          items:
            type: string
          type: array
        marketFilters:
          $ref: '#/components/schemas/MarketFilters'
      required:
        - eventIds
        - marketFilters
      type: object
    EventsDetailedDto:
      properties:
        eventDetail:
          $ref: '#/components/schemas/EventDetail'
        position:
          format: int32
          type: integer
      type: object
    EventsListRequest:
      properties:
        categoryId:
          example: 2
          type: string
        competitions:
          example: en
          items:
            type: string
          type: array
        marketFilters:
          $ref: '#/components/schemas/MarketFilters'
        onlyPopular:
          default: 'false'
          type: boolean
        regionId:
          example:
            - 448
            - 449
          items:
            type: string
          type: array
        showLive:
          default: 'false'
          type: boolean
        take:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      required:
        - marketFilters
      type: object
    EventsListResponse:
      properties:
        events:
          items:
            $ref: '#/components/schemas/EventWithPricesResponse1'
          type: array
        meta:
          $ref: '#/components/schemas/EventsListResponseMeta'
        nextEventIds:
          items:
            type: string
          type: array
        total:
          format: int64
          type: integer
      type: object
    EventsListResponseMeta:
      properties:
        category:
          $ref: '#/components/schemas/CategoryStaticMeta'
        competitions:
          items:
            $ref: '#/components/schemas/CompetitionStaticMeta'
          type: array
        region:
          $ref: '#/components/schemas/RegionStaticMeta'
      type: object
    EventsRequest:
      properties:
        query:
          $ref: '#/components/schemas/Query2'
          description: all fields in query merged like '&&'; arrays fields in query
            merge they data as '||'
        skip:
          example: 100
          format: int32
          minimum: 0
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        take:
          example: 10
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        view:
          $ref: '#/components/schemas/View'
          description: data that should be kept in the event
      required:
        - query
      type: object
    EvolutionGamingSetup:
      properties:
        authToken:
          type: string
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        launchUrl:
          type: string
        name:
          type: string
        operatorId:
          type: string
        secretKey:
          type: string
      required:
        - authToken
        - launchUrl
        - operatorId
        - secretKey
      type: object
    FieldDto:
      description: The validation fields to be used in the scope of this scenario
      properties:
        fieldName:
          description: During validation process the caller sends validation request
            and it should contain this filed name for validation. Usually fields come
            as is from user interface
          example: firstName
          type: string
        required:
          description: Field can be optional if value is 'false' however fields mandatory
            by default
          example: false
          type: boolean
        rules:
          description: List of rules
          items:
            oneOf:
              - $ref: '#/components/schemas/AgeRuleValueDto'
              - $ref: '#/components/schemas/CarriersBasedPhoneNumberRuleValueDto'
              - $ref: '#/components/schemas/OneOfRuleValueDto'
              - $ref: '#/components/schemas/PasswordRuleValueDto'
              - $ref: '#/components/schemas/UserIdentifierRuleValueDto'
          type: array
      type: object
    FileUploadResponse:
      properties:
        fileId:
          type: string
      type: object
    FilterResponse:
      description: Progressive jackpot configuration transaction transactionFilters
        with possible values
      properties:
        filter:
          description: Progressive jackpot configuration transaction filter
          enum:
            - CATEGORY
            - TRANSACTION_TYPE
            - CASINO_PROVIDER
            - CASINO_GAME
          type: string
        predefinedValues:
          description: Predefined values for filter. If present - values should be
            used for input. If predefined values are missing (null or empty) - text
            input should be used.
          items:
            description: Predefined values for filter. If present - values should
              be used for input. If predefined values are missing (null or empty)
              - text input should be used.
            type: string
          type: array
          uniqueItems: true
      type: object
    FilteredUpcomingEventsBatch:
      properties:
        request:
          $ref: '#/components/schemas/FilteredUpcomingEventsRequest'
        responses:
          items:
            $ref: '#/components/schemas/EventWithPricesResponse1'
          type: array
      type: object
    FilteredUpcomingEventsBatchRequest:
      properties:
        requests:
          items:
            $ref: '#/components/schemas/FilteredUpcomingEventsRequest'
          type: array
      required:
        - requests
      type: object
    FilteredUpcomingEventsBatchResponse:
      properties:
        responses:
          items:
            $ref: '#/components/schemas/FilteredUpcomingEventsBatch'
          type: array
      type: object
    FilteredUpcomingEventsRequest:
      properties:
        categoryIds:
          example:
            - 2
          items:
            type: string
          type: array
        eventType:
          description: One of {UPCOMING, LIVE}
          example: UPCOMING
          type: string
        filters:
          $ref: '#/components/schemas/Filters'
        take:
          example: 10
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      required:
        - categoryIds
        - filters
      type: object
    Filters:
      properties:
        boosted:
          $ref: '#/components/schemas/BooleanFilter'
      type: object
    ForcedWithdrawalSummaryResponse:
      properties:
        created:
          format: date-time
          type: string
        entryStatuses:
          items:
            $ref: '#/components/schemas/EntryStatusCount'
          type: array
        entryTotalCount:
          format: int64
          type: integer
        id:
          format: int32
          type: integer
        status:
          type: string
      type: object
    FreeTicketAddRequest:
      properties:
        brandIdentifier:
          type: string
        duplicatesCheck:
          type: boolean
        poolId:
          format: int64
          type: integer
        ticketCount:
          format: int32
          type: integer
        userIds:
          items:
            format: uuid
            type: string
          type: array
        validFromTime:
          example: '2022-02-14T13:00:00Z'
          format: date-time
          type: string
      type: object
    FreeTicketAddResponse:
      properties:
        userIds:
          items:
            format: uuid
            type: string
          type: array
      type: object
    FreeTicketRequest:
      properties:
        pagination:
          $ref: '#/components/schemas/BasicPagination'
        userUuid:
          format: uuid
          type: string
      type: object
    FreeTicketSummaryDto:
      properties:
        poolName:
          type: string
        ticketCount:
          format: int32
          type: integer
        usedCount:
          format: int32
          type: integer
        validFromTime:
          format: date-time
          type: string
      type: object
    FrontPage:
      properties:
        gameRounds:
          items:
            $ref: '#/components/schemas/FrontPageGameRound'
          type: array
        seasons:
          additionalProperties:
            $ref: '#/components/schemas/SeasonDto'
          type: object
      type: object
    FrontPageGameRound:
      properties:
        bettingClosesSeconds:
          format: int64
          type: integer
        bettingClosesTime:
          format: int64
          type: integer
        gameRoundId:
          format: int64
          type: integer
        gameRoundName:
          type: string
        gameRoundStatus:
          enum:
            - BETTING_NOT_OPEN
            - BETTING_ACTIVE
            - IN_PLAY
            - PAST_GAME_ROUND
          type: string
        seasonId:
          format: int64
          type: integer
      type: object
    FundsTransferAdminRequest:
      properties:
        amount:
          description: The amount of funds being transferred.
          type: number
        brandIdentifier:
          description: The brand associated with both the creditor and the debtor.
          type: string
        comment:
          description: Additional explanation or details regarding the reason for
            the transfer. Required in case of reason OTHER
          type: string
        creditor:
          description: UUID of a user who gives funds.
          format: uuid
          type: string
        currency:
          description: The currency in which the transfer amount is denominated. Must
            follow ISO 4217 (3 characters) standard
          type: string
        debtor:
          description: UUID of a user who receives funds.
          format: uuid
          type: string
        reason:
          enum:
            - NO_ACCESS_TO_OLD_ACCOUNT
            - LEGAL_REQUIREMENT
            - OTHER
            - WITHDRAWAL_ISSUES
          type: string
      required:
        - amount
        - brandIdentifier
        - creditor
        - currency
        - debtor
        - reason
      type: object
    FundsTransferRequest:
      properties:
        amount:
          description: The amount of funds being transferred.
          type: number
        creditor:
          description: UUID of a user who gives funds.
          format: uuid
          type: string
        currency:
          description: The currency in which the transfer amount is denominated. Must
            follow ISO 4217 (3 characters) standard
          type: string
        debtor:
          description: UUID of a user who receives funds.
          format: uuid
          type: string
      required:
        - amount
        - creditor
        - currency
        - debtor
      type: object
    GameCategoryPositionRequest:
      properties:
        gamePositions:
          items:
            $ref: '#/components/schemas/GamePosition'
          type: array
      type: object
    GameCategoryRequest:
      properties:
        enabled:
          type: boolean
        hidden:
          type: boolean
        name:
          type: string
        position:
          format: int32
          type: integer
        translations:
          additionalProperties:
            type: string
          description: key = language, value = translation
          type: object
      required:
        - name
        - translations
      type: object
    GameCategoryResponse:
      properties:
        categoryUuid:
          format: uuid
          type: string
        gamePosition:
          format: int32
          type: integer
      type: object
    GameEnabledResponse:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
      type: object
    GameImageResponse:
      properties:
        brands:
          items:
            type: string
          type: array
          uniqueItems: true
        gameName:
          type: string
        gameProvider:
          type: string
        providerGameId:
          type: string
        size:
          type: string
        url:
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    GameImageSearchRequest:
      properties:
        query:
          $ref: '#/components/schemas/Query'
        skip:
          default: '0'
          format: int32
          minimum: 0
          type: integer
        take:
          default: '50'
          format: int32
          maximum: 50
          minimum: 1
          type: integer
      type: object
    GameLauncherRequest:
      properties:
        lobbyUrl:
          type: string
        mode:
          enum:
            - DEMO
            - REAL
          type: string
        provider:
          type: string
        providerGameId:
          type: string
      required:
        - lobbyUrl
        - provider
        - providerGameId
      type: object
    GameLauncherResponse:
      properties:
        launchUrl:
          type: string
      type: object
    GameMasterDataRequest:
      properties:
        language:
          type: string
        skip:
          format: int32
          minimum: 0
          type: integer
        take:
          format: int32
          maximum: 50
          minimum: 1
          type: integer
      required:
        - language
      type: object
    GameMasterDataResponse:
      properties:
        betWays:
          type: string
        bonusBuy:
          type: boolean
        freeSpins:
          type: boolean
        jackpot:
          type: string
        reels:
          type: string
        rtp:
          type: number
        scatterSymbols:
          type: boolean
        theme1:
          type: string
        theme2:
          type: string
        theme3:
          type: string
        theme4:
          type: string
        type:
          type: string
        volatility:
          type: string
        wilds:
          type: boolean
      type: object
    GamePosition:
      properties:
        gameId:
          format: int32
          type: integer
        position:
          format: int32
          type: integer
      type: object
    GameResponse:
      properties:
        brandIdentifier:
          type: string
        categories:
          description: Categories to which game belongs and its absolute position
          items:
            $ref: '#/components/schemas/GameCategoryResponse'
          type: array
          uniqueItems: true
        enabled:
          type: boolean
        id:
          format: int32
          type: integer
        images:
          description: Set of images uploaded via admin
          items:
            $ref: '#/components/schemas/Image'
          type: array
        lobbyName:
          description: Alternative game name added manually
          type: string
        masterData:
          $ref: '#/components/schemas/GameMasterDataResponse'
          description: Game master data
        name:
          type: string
        position:
          description: Used for ordering game list
          format: int32
          type: integer
        provider:
          description: 'In case of Alea additional fields will be present: softwareId
            and softwareName'
          example: WAZDAN, BETPAWA, ALEA ....
          type: string
        providerGameId:
          type: string
        ribbonUuid:
          format: uuid
          type: string
        thumbUrl:
          description: Set of images provided by provider
          items:
            type: string
          type: array
      type: object
    GameRoundDto:
      properties:
        gameRoundId:
          format: int64
          type: integer
        gameRoundName:
          type: string
      type: object
    GameUpdateRequest:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        lobbyName:
          type: string
        position:
          format: int32
          type: integer
        provider:
          type: string
        providerGameId:
          type: string
      required:
        - brandIdentifier
        - enabled
        - position
        - provider
        - providerGameId
      type: object
    GameViewResponse:
      properties:
        name:
          type: string
        position:
          format: int32
          type: integer
        provider:
          example: WAZDAN, BETPAWA ....
          type: string
        providerGameId:
          type: string
      type: object
    GamesSortRequest:
      properties:
        direction:
          description: Sort direction
          enum:
            - ASC
            - DESC
          type: string
        skip:
          default: '0'
          format: int32
          minimum: 0
          type: integer
        sort:
          description: Sort by field
          enum:
            - GAME_POSITION
            - GAME_NAME
          type: string
        take:
          default: '50'
          format: int32
          maximum: 50
          minimum: 1
          type: integer
      type: object
    GatewayStatusReport:
      properties:
        manuallyOverridden:
          type: boolean
        name:
          type: string
        status:
          type: string
        updatedAt:
          type: string
      type: object
    GeneratedCut:
      properties:
        available:
          type: boolean
        gross:
          type: number
        grossCompensation:
          type: number
        miss:
          format: int32
          type: integer
        net:
          type: number
        netCompensation:
          type: number
        tax:
          type: number
        taxCompensation:
          type: number
      type: object
    GenericListRequest:
      properties:
        pagination:
          $ref: '#/components/schemas/BasicPagination'
      type: object
    GenericListResponseAdminTicketSummaryDto:
      properties:
        count:
          format: int64
          type: integer
        dataList:
          items:
            $ref: '#/components/schemas/AdminTicketSummaryDto'
          type: array
      type: object
    GenericListResponseAdminTiebreakerResultDto:
      properties:
        count:
          format: int64
          type: integer
        dataList:
          items:
            $ref: '#/components/schemas/AdminTiebreakerResultDto'
          type: array
      type: object
    GenericListResponseBetslipForCancelResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/BetslipForCancelResponse'
          type: array
        total:
          format: int32
          type: integer
      type: object
    GenericListResponseCancellationSummaryRecordInfo:
      properties:
        items:
          items:
            $ref: '#/components/schemas/CancellationSummaryRecordInfo'
          type: array
        total:
          format: int32
          type: integer
      type: object
    GenericListResponseCategoryEventCount:
      properties:
        items:
          items:
            $ref: '#/components/schemas/CategoryEventCount'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseCategoryResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/CategoryResponse'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    GenericListResponseChangeRecord:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ChangeRecord'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseEventBetslipResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/EventBetslipResponse'
          type: array
        total:
          format: int32
          type: integer
      type: object
    GenericListResponseEventSelectionResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/EventSelectionResponse1'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseEventSelectionTupleResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/EventSelectionTupleResponse'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseEventWithPricesByMarketResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/EventWithPricesByMarketResponse'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseEventWithPricesResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/EventWithPricesResponse1'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseFreeTicketSummaryDto:
      properties:
        count:
          format: int64
          type: integer
        dataList:
          items:
            $ref: '#/components/schemas/FreeTicketSummaryDto'
          type: array
      type: object
    GenericListResponseMarketGroupResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/MarketGroupResponse'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    GenericListResponseMarketType:
      properties:
        items:
          items:
            $ref: '#/components/schemas/MarketType'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    GenericListResponseMarketTypeResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/MarketTypeResponse'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    GenericListResponseOddsSelectionResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/OddsSelectionResponse'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponsePeriodResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/PeriodResponse'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    GenericListResponsePoolListDto:
      properties:
        count:
          format: int64
          type: integer
        dataList:
          items:
            $ref: '#/components/schemas/PoolListDto'
          type: array
      type: object
    GenericListResponsePriceResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/PriceResponse'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseResultsWithEventResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ResultsWithEventResponse'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseScoreboardWithEventResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ScoreboardWithEventResponse'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseSeasonResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SeasonResponse'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseShortEventResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ShortEventResponse'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    GenericListResponseTemplateDetailedDto:
      properties:
        count:
          format: int64
          type: integer
        dataList:
          items:
            $ref: '#/components/schemas/TemplateDetailedDto'
          type: array
      type: object
    GetByCategoryAndMarketGroupIdRequest:
      properties:
        categoryId:
          format: int32
          type: integer
        marketGroupId:
          format: int32
          type: integer
      type: object
    GetByIdsRequest:
      properties:
        marketTypeIds:
          items:
            format: int32
            type: integer
          type: array
      type: object
    GroupedMarketResponse:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/MarketAdditionalInfo'
        displayNameColumns:
          description: If markets has column-names to display we put it to this array
          items:
            type: string
          type: array
        displayNameRows:
          description: If markets has row-names to display we put it to this array
          items:
            type: string
          type: array
        marketType:
          $ref: '#/components/schemas/MarketType2'
        row:
          items:
            $ref: '#/components/schemas/MarketDto'
          type: array
      type: object
    Handicap:
      properties:
        text:
          type: string
        type:
          enum:
            - NORMAL
            - ASIAN
            - EUROPEAN
          type: string
        value:
          type: string
      type: object
    Handicap1:
      properties:
        text:
          type: string
        type:
          type: string
        value:
          format: int32
          type: integer
      type: object
    Handicap2:
      properties:
        text:
          type: string
        type:
          type: string
        value:
          format: int32
          type: integer
      type: object
    Hits:
      properties:
        hits:
          format: int32
          type: integer
        row:
          format: int32
          type: integer
      type: object
    IdName:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    IdName1:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    IdName2:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    IdRequest:
      properties:
        id:
          description: Betslip ID
          example: '1'
          type: string
      type: object
    Image:
      properties:
        size:
          type: string
        url:
          type: string
      type: object
    ImportStatementType:
      properties:
        brandIdentifier:
          type: string
        value:
          type: string
        viewValue:
          type: string
      type: object
    InPlay:
      properties:
        finished:
          type: boolean
        gameMinute:
          format: int32
          type: integer
        gameRoundId:
          format: int64
          type: integer
        gameRoundName:
          type: string
        inPlayLeagues:
          items:
            $ref: '#/components/schemas/InPlayLeague'
          type: array
        season:
          $ref: '#/components/schemas/SeasonDto'
      type: object
    InPlayLeague:
      properties:
        league:
          $ref: '#/components/schemas/LeagueDto'
        matches:
          items:
            $ref: '#/components/schemas/InPlayMatch'
          type: array
      type: object
    InPlayMatch:
      properties:
        awayHTScore:
          format: int32
          type: integer
        awayScore:
          format: int32
          type: integer
        awayTeam:
          $ref: '#/components/schemas/TeamDto'
        homeHTScore:
          format: int32
          type: integer
        homeScore:
          format: int32
          type: integer
        homeTeam:
          $ref: '#/components/schemas/TeamDto'
        id:
          format: int64
          type: integer
      type: object
    InitDepositRequestWithDepositTypeName:
      properties:
        amount:
          type: number
        depositFailedUrl:
          type: string
        depositPaymentSystemName:
          type: string
        depositSuccessfulUrl:
          type: string
      required:
        - amount
        - depositPaymentSystemName
      type: object
    InitDepositResponse:
      properties:
        DepositInitId:
          format: int64
          type: integer
        StatusType:
          enum:
            - SUCCESS
            - GENERAL_FAILURE
            - PENDING
            - AMOUNT_TOO_SMALL
            - NOT_REGISTERED
            - INSUFFICIENT_FUNDS
            - FAILED
            - INIT
            - PAYER_NOT_FOUND
            - PAYMENT_NOT_APPROVED
            - PAYER_LIMIT_REACHED
            - TRANSACTION_ALREADY_IN_PROCESS
            - CORRESPONDENT_TEMPORARILY_UNAVAILABLE
            - AWAITING_USER_CONFIRMATION
          type: string
      required:
        - DepositInitId
        - StatusType
      type: object
    InitDepositStatusResponse:
      properties:
        DepositInitId:
          format: int64
          type: integer
        StatusType:
          type: string
        redirectUrl:
          type: string
      required:
        - DepositInitId
        - StatusType
      type: object
    IntegerResponse:
      properties:
        value:
          format: int32
          type: integer
      type: object
    IntegrationSetup:
      anyOf:
        - $ref: '#/components/schemas/AleaSetup'
        - $ref: '#/components/schemas/BetpawaSetup'
        - $ref: '#/components/schemas/WazdanSetup'
        - $ref: '#/components/schemas/SmartSoftSetup'
        - $ref: '#/components/schemas/SpribeSetup'
        - $ref: '#/components/schemas/KironLiteSetup'
        - $ref: '#/components/schemas/KironBetmanSetup'
        - $ref: '#/components/schemas/JellySetup'
        - $ref: '#/components/schemas/EvolutionGamingSetup'
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        name:
          type: string
      type: object
    IntegrationSetupModificationRequest:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          type: string
      required:
        - brandIdentifier
        - metadata
        - name
      type: object
    IntegrationSetupStatistics:
      properties:
        integrationSetup:
          $ref: '#/components/schemas/IntegrationSetup'
        statistics:
          $ref: '#/components/schemas/Statistics'
      type: object
    JWTResponse:
      properties:
        jwt:
          type: string
      type: object
    JackpotConfigurationRuleSnapshotResponse:
      description: Progressive jackpot rules
      properties:
        filterValue:
          description: Progressive jackpot transaction filter value
          type: string
        stakedAmountRate:
          description: Percent of staked amount to be accumulated into jackpot amount
          type: number
        transactionFilter:
          description: Progressive jackpot transaction filter
          enum:
            - CATEGORY
            - TRANSACTION_TYPE
            - CASINO_PROVIDER
            - CASINO_GAME
          type: string
        uuid:
          description: Progressive jackpot rule UUID
          format: uuid
          type: string
      type: object
    JackpotCreationRequest:
      properties:
        configurationUuid:
          format: uuid
          type: string
        startTime:
          description: Progressive jackpot start time in UTC
          format: date-time
          type: string
      required:
        - configurationUuid
        - startTime
      type: object
    JackpotParticipantResponse:
      properties:
        amount:
          description: Current Jackpot amount
          type: number
        imageUrl:
          description: Progressive jackpot image url
          type: string
        jackpotSubtype:
          description: Subtype, e.g. Aviator, JetX, etc
          type: string
        jackpotSubtypeHighlightColor:
          description: 'Color picker for highlight color in HEX, e.g. #00FF00'
          type: string
        participant:
          description: Current user is participant of Jackpot instance
          type: boolean
        textColor:
          description: 'Color picker for text color in HEX, e.g. #00FF00'
          type: string
        uuid:
          description: Unique identifier of Jackpot instance
          format: uuid
          type: string
      type: object
    JackpotResponse:
      properties:
        amount:
          description: Progressive jackpot accumulated amount
          type: number
        amountLimit:
          description: Progressive jackpot accumulated amount limit
          nullable: true
          type: number
        bonusAmount:
          description: Progressive jackpot accumulated bonus amount
          type: number
        bonusPerSecond:
          description: Progressive jackpot bonus over time
          type: number
        brandIdentifier:
          description: Progressive jackpot brand
          type: string
        configurationUuid:
          description: Progressive jackpot configuration UUID
          format: uuid
          type: string
        created:
          description: Progressive jackpot creation date time in UTC
          format: date-time
          type: string
        deadline:
          description: Progressive jackpot deadline date time in UTC
          format: date-time
          nullable: true
          type: string
        dryRun:
          description: Progressive jackpot dry run indicator. Default true
          type: boolean
        finalized:
          description: Progressive jackpot completion date time in UTC
          format: date-time
          nullable: true
          type: string
        name:
          description: Progressive jackpot configuration name
          type: string
        rules:
          description: Progressive jackpot rules
          items:
            $ref: '#/components/schemas/JackpotConfigurationRuleSnapshotResponse'
          type: array
        started:
          description: Progressive jackpot start date time in UTC
          format: date-time
          nullable: true
          type: string
        status:
          description: Progressive jackpot status
          enum:
            - INACTIVE
            - ACTIVE
            - WINNER_SELECTION
            - WINNER_PAYOUT
            - SUSPENDED
            - COMPLETED
          type: string
        uuid:
          description: Progressive jackpot UUID
          format: uuid
          type: string
        winnerUuid:
          description: Winner uuid
          format: uuid
          nullable: true
          type: string
      type: object
    JackpotRowDetailedDto:
      properties:
        cancelled:
          type: boolean
        id:
          format: int64
          type: integer
        name:
          type: string
        position:
          format: int32
          type: integer
        result:
          type: string
        translations:
          items:
            $ref: '#/components/schemas/RowTranslation'
          type: array
        values:
          items:
            $ref: '#/components/schemas/RowOutcomeDto'
          type: array
      type: object
    JackpotRowDto:
      properties:
        name:
          type: string
        picks:
          items:
            type: string
          type: array
        result:
          type: string
      type: object
    JackpotSummaryQuery:
      properties:
        brandIdentifier:
          type: string
        configurationName:
          type: string
        configurationUuid:
          format: uuid
          type: string
        dryRun:
          type: boolean
        status:
          enum:
            - INACTIVE
            - ACTIVE
            - WINNER_SELECTION
            - WINNER_PAYOUT
            - SUSPENDED
            - COMPLETED
          type: string
      type: object
    JackpotSummaryRequest:
      properties:
        query:
          $ref: '#/components/schemas/JackpotSummaryQuery'
        skip:
          description: Page number taken from previous search response. Default 0
          format: int32
          minimum: 0
          type: integer
        sortDirection:
          description: Sort direction. Defaults to DESC.
          enum:
            - ASC
            - DESC
          type: string
        sortField:
          description: Sort by field. Defaults to start time.
          enum:
            - START_TIME
          type: string
        take:
          description: How many configurations to load. Default 100
          format: int32
          minimum: 1
          type: integer
      required:
        - query
      type: object
    JackpotSummaryRowResponse:
      description: Progressive jackpots summary
      properties:
        amount:
          description: Progressive jackpot accumulated amount
          type: number
        bonusAmount:
          description: Progressive jackpot accumulated time based bonus amount
          type: number
        brandIdentifier:
          description: Progressive jackpot brand
          type: string
        configurationName:
          description: Progressive jackpot configuration name
          type: string
        dryRun:
          description: Progressive jackpot dry run flag
          type: boolean
        startTime:
          description: Progressive jackpot start time
          format: date-time
          nullable: true
          type: string
        status:
          description: Progressive jackpot status
          enum:
            - INACTIVE
            - ACTIVE
            - WINNER_SELECTION
            - WINNER_PAYOUT
            - SUSPENDED
            - COMPLETED
          type: string
        uuid:
          description: Progressive jackpot configuration UUID
          format: uuid
          type: string
      type: object
    JackpotsRequest:
      properties:
        jackpotType:
          enum:
            - SPORT
            - CASINO
            - VIRTUALS
          type: string
        take:
          format: int32
          maximum: 30
          minimum: 1
          type: integer
      required:
        - take
      type: object
    JackpotsSummaryResponse:
      properties:
        configurations:
          description: Progressive jackpots summary
          items:
            $ref: '#/components/schemas/JackpotSummaryRowResponse'
          type: array
      type: object
    JellySetup:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        launchUrl:
          type: string
        name:
          type: string
        siteId:
          type: string
      required:
        - launchUrl
        - siteId
      type: object
    JsonNode:
      type: object
    KironBetmanSetup:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        launchUrl:
          type: string
        name:
          type: string
        operatorId:
          type: string
      required:
        - launchUrl
        - operatorId
      type: object
    KironLiteSetup:
      properties:
        apiKey:
          type: string
        appKey:
          type: string
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        gameListUrl:
          type: string
        host:
          type: string
        name:
          type: string
        projectCode:
          type: string
      required:
        - apiKey
        - appKey
        - host
        - projectCode
      type: object
    Language:
      properties:
        country:
          type: string
        languageCode:
          type: string
        variant:
          type: string
      type: object
    LanguageResponse:
      properties:
        brandIdentifier:
          type: string
        languages:
          items:
            type: string
          type: array
      type: object
    LastEndedJackpotResponse:
      properties:
        amount:
          description: Won jackpot value
          type: number
        displayName:
          description: Jackpot user facing name
          items:
            $ref: '#/components/schemas/DisplayNameDs'
          type: array
        finalized:
          description: Progressive jackpot completion date time in UTC
          format: date-time
          type: string
        type:
          description: Jackpot type
          enum:
            - SPORT
            - CASINO
            - VIRTUALS
          type: string
        uuid:
          description: Jackpot UUID
          format: uuid
          type: string
        winnerName:
          description: Full name of the winner
          type: string
        winnerPhone:
          description: Partly hidden phone number of the winner
          type: string
      type: object
    LeagueDto:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    LeagueIdRequest:
      properties:
        leagueId:
          format: int64
          type: integer
      type: object
    LeagueStanding:
      properties:
        gameRounds:
          items:
            $ref: '#/components/schemas/GameRoundDto'
          type: array
        league:
          $ref: '#/components/schemas/LeagueDto'
        leagueStandings:
          items:
            $ref: '#/components/schemas/LeagueTableRow'
          type: array
        teams:
          additionalProperties:
            $ref: '#/components/schemas/TeamDto'
          type: object
      type: object
    LeagueStatusDto:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        status:
          enum:
            - ENABLED
            - DISABLED
          type: string
      type: object
    LeagueTableRow:
      properties:
        conceded:
          format: int32
          type: integer
        drew:
          format: int32
          type: integer
        form:
          items:
            enum:
              - W
              - D
              - L
            type: string
          type: array
        lost:
          format: int32
          type: integer
        played:
          format: int32
          type: integer
        points:
          format: int32
          type: integer
        position:
          format: int32
          type: integer
        scored:
          format: int32
          type: integer
        teamId:
          format: int64
          type: integer
        won:
          format: int32
          type: integer
      type: object
    LegacySupport:
      properties:
        currencyFormat:
          type: string
        jurisdiction:
          type: string
        strategy:
          type: string
      type: object
    LimitsCollectionResponse:
      properties:
        limit:
          $ref: '#/components/schemas/LimitsResponse'
        otherLimits:
          additionalProperties:
            $ref: '#/components/schemas/LimitsResponse'
          type: object
      type: object
    LimitsResponse:
      properties:
        allowed:
          description: This flag indicates state of executed operation but not related
            to next attempt.
          type: boolean
        attemptsLeft:
          format: int32
          type: integer
        attemptsLimit:
          format: int32
          type: integer
        attemptsPeriodMin:
          format: int64
          type: integer
      type: object
    ListResponseAvailabilityAuditResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/AvailabilityAuditResponse'
          type: array
        total:
          format: int32
          type: integer
      type: object
    ListResponseBalanceAdminResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/BalanceAdminResponse'
          type: array
      type: object
    ListResponseBalanceResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/BalanceResponse'
          type: array
      type: object
    ListResponseCashoutConfigurationDto:
      properties:
        items:
          items:
            $ref: '#/components/schemas/CashoutConfigurationDto'
          type: array
        total:
          format: int32
          type: integer
      type: object
    ListResponseCashoutLogDto:
      properties:
        items:
          items:
            $ref: '#/components/schemas/CashoutLogDto'
          type: array
        total:
          format: int32
          type: integer
      type: object
    ListResponseConfigurationAuditResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConfigurationAuditResponse'
          type: array
        total:
          format: int32
          type: integer
      type: object
    ListResponseGameCategoryResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/GameCategoryResponse'
          type: array
      type: object
    ListResponseGameEnabledResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/GameEnabledResponse'
          type: array
      type: object
    ListResponseGameImageResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/GameImageResponse'
          type: array
      type: object
    ListResponseGameResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/GameResponse'
          type: array
      type: object
    ListResponseGameViewResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/GameViewResponse'
          type: array
      type: object
    ListResponseIntegrationSetup:
      properties:
        result:
          items:
            $ref: '#/components/schemas/IntegrationSetup'
          type: array
      type: object
    ListResponseIntegrationSetupStatistics:
      properties:
        result:
          items:
            $ref: '#/components/schemas/IntegrationSetupStatistics'
          type: array
      type: object
    ListResponseLanguageResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/LanguageResponse'
          type: array
      type: object
    ListResponseLastEndedJackpotResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/LastEndedJackpotResponse'
          type: array
      type: object
    ListResponseOtpConfigurationResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/OtpConfigurationResponse'
          type: array
      type: object
    ListResponseRibbonExchange:
      properties:
        result:
          items:
            $ref: '#/components/schemas/RibbonExchange'
          type: array
      type: object
    ListResponseString:
      properties:
        result:
          items:
            type: string
          type: array
      type: object
    ListResponseSupplierResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/SupplierResponse'
          type: array
      type: object
    ListResponseTransactionResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/TransactionResponse1'
          type: array
      type: object
    ListResponseUploadImagesResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/UploadImagesResponse'
          type: array
      type: object
    ListResponseUserNoteResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/UserNoteResponse'
          type: array
      type: object
    ListResponseUserSearchDetailsResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/UserSearchDetailsResponse'
          type: array
      type: object
    ListResponseUserSearchResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/UserSearchResponse1'
          type: array
      type: object
    ListResponseWithTotalCountGameMasterDataResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/GameMasterDataResponse'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    ListedTicketDto:
      properties:
        id:
          type: string
        payoutDetails:
          $ref: '#/components/schemas/PayoutDetails1'
        pool:
          $ref: '#/components/schemas/PoolMinimumDetailsDto'
        purchaseDate:
          format: date-time
          type: string
        rows:
          format: int32
          type: integer
        selection:
          type: string
          writeOnly: true
        status:
          enum:
            - PENDING
            - LOST
            - WON
            - CANCELLED
          type: string
      type: object
    MaintainTriggersResponse:
      properties:
        operation:
          type: string
        stats:
          $ref: '#/components/schemas/TriggersStats'
      type: object
    ManualDepositCreationRequestDto:
      properties:
        amount:
          type: number
        comment:
          type: string
        exIdentifier:
          type: string
        mobile:
          description: admin-ui sends value as 'national-number', (excluding country-code
            and '+' sign)
          type: string
        prefix:
          description: admin-ui sends phone-number-country-code as separate field
          format: int32
          type: integer
        type:
          type: string
      required:
        - mobile
        - type
      type: object
    ManualDepositDtoV2:
      properties:
        amount:
          type: string
        comment:
          type: string
        created:
          format: date-time
          type: string
        creator:
          type: string
        creatorUuid:
          type: string
        currencyCode:
          type: string
        exIdentifier:
          type: string
        id:
          format: int32
          type: integer
        recipient:
          type: string
        type:
          type: string
        userBrandIdentifier:
          type: string
        userUuid:
          type: string
      type: object
    ManualHotEventCreationDto:
      properties:
        enabled:
          type: boolean
      type: object
    ManualHotEventDto:
      properties:
        enabled:
          type: boolean
        eventId:
          type: string
      required:
        - eventId
      type: object
    ManualWithdrawalCreationRequest:
      properties:
        Amount:
          type: number
        Comment:
          type: string
        PayoutType:
          type: string
        PhoneNumber:
          type: string
      type: object
    ManualWithdrawalCreationResponse:
      properties:
        currencyCode:
          type: string
        feeAmount:
          type: number
        status:
          type: string
        taxAmount:
          type: number
        withdrawAmount:
          type: number
        withdrawalUuid:
          type: string
      type: object
    MarkAsSuccessWithdrawalUuidsDto:
      properties:
        thirdPartyReferenceId:
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    Market:
      properties:
        displayName:
          type: string
        groupName:
          type: string
        groupedName:
          type: string
        handicap:
          $ref: '#/components/schemas/Handicap'
        name:
          type: string
        typeId:
          format: int64
          type: integer
      type: object
    MarketAdditionalInfo:
      properties:
        boosted:
          type: boolean
        cashoutable:
          type: boolean
        twoUp:
          type: boolean
      type: object
    MarketDto:
      properties:
        formattedHandicap:
          type: string
        handicap:
          format: int32
          type: integer
        id:
          type: string
        prices:
          items:
            $ref: '#/components/schemas/PriceResponse'
          type: array
      type: object
    MarketFilters:
      properties:
        marketPreference:
          description: One of {ALL, MAIN, DEFINED}
          example: DEFINED
          type: string
        marketTypeIds:
          description: 3743 is 1X2
          example:
            - 3743
          items:
            type: string
          type: array
      required:
        - marketPreference
      type: object
    MarketGroup:
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
      type: object
    MarketGroupResponse:
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
      type: object
    MarketResponse:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/MarketAdditionalInfo'
        handicap:
          format: int32
          type: integer
        handicapType:
          type: string
        marketType:
          $ref: '#/components/schemas/MarketType2'
        pricePresentation:
          deprecated: true
          type: string
        prices:
          items:
            $ref: '#/components/schemas/PriceResponse'
          type: array
      type: object
    MarketShortAdditionalInfo:
      properties:
        cashoutable:
          type: boolean
        twoUp:
          type: boolean
      type: object
    MarketShortInfo:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/MarketShortAdditionalInfo'
        handicap:
          format: int32
          type: integer
        handicapType:
          type: string
        marketType:
          $ref: '#/components/schemas/MarketTypeShortInfo'
      type: object
    MarketType:
      properties:
        fullName:
          type: string
        group:
          $ref: '#/components/schemas/MarketGroup'
        groupedName:
          type: string
        id:
          format: int32
          type: integer
        period:
          $ref: '#/components/schemas/Period'
        properties:
          $ref: '#/components/schemas/MarketTypeProperties'
        slug:
          type: string
      type: object
    MarketType1:
      properties:
        displayName:
          type: string
        explainer:
          type: string
        handicapType:
          type: string
        id:
          type: string
        name:
          type: string
        priceColumnCount:
          format: int32
          type: integer
        priceSortingMethod:
          type: string
        priority:
          format: int32
          type: integer
        tabs:
          items:
            type: string
          type: array
      type: object
    MarketType2:
      properties:
        displayName:
          type: string
        explainer:
          type: string
        handicapType:
          type: string
        id:
          type: string
        name:
          type: string
        priceColumnCount:
          format: int32
          type: integer
        priceSortingMethod:
          type: string
        priority:
          format: int32
          type: integer
        tabs:
          items:
            type: string
          type: array
      type: object
    MarketTypeListRequest:
      properties:
        query:
          additionalProperties:
            type: object
          type: object
        skip:
          format: int32
          minimum: 0
          type: integer
        sortings:
          items:
            $ref: '#/components/schemas/SortParameter'
          type: array
        take:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      required:
        - query
      type: object
    MarketTypeProperties:
      properties:
        active:
          type: boolean
        expectAllSelections:
          type: boolean
        expectHandicapProposition:
          type: boolean
        expectNoFilteredSelections:
          type: boolean
        handicapFormat:
          type: string
        hasNonSelectionTypes:
          type: boolean
        numWinners:
          format: int32
          type: integer
        participantPosition:
          format: int32
          type: integer
      type: object
    MarketTypeRequest:
      properties:
        includeCategories:
          type: boolean
        includeSelections:
          type: boolean
      type: object
    MarketTypeResponse:
      properties:
        categories:
          items:
            $ref: '#/components/schemas/CategoryResponse'
          type: array
        marketType:
          $ref: '#/components/schemas/MarketType'
        selectionTypes:
          items:
            $ref: '#/components/schemas/SelectionType'
          type: array
      type: object
    MarketTypeShortInfo:
      properties:
        displayName:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    MarketingDto:
      properties:
        presentation:
          type: string
        priorityOrder:
          format: int32
          type: integer
      type: object
    MatchScoreResponse:
      properties:
        scoreAway:
          type: string
        scoreHome:
          type: string
      type: object
    MatchStateResponse:
      properties:
        minute:
          format: int32
          type: integer
        second:
          format: int32
          type: integer
      type: object
    MatchUpDto:
      properties:
        awayHT:
          format: int32
          type: integer
        awayId:
          format: int64
          type: integer
        awayScore:
          format: int32
          type: integer
        gameRoundId:
          format: int64
          type: integer
        homeHT:
          format: int32
          type: integer
        homeId:
          format: int64
          type: integer
        homeScore:
          format: int32
          type: integer
        id:
          format: int64
          type: integer
        status:
          enum:
            - NOT_STARTED
            - IN_PLAY
            - FINISHED
          type: string
      type: object
    MatchUpLeague:
      properties:
        league:
          $ref: '#/components/schemas/LeagueDto'
        matchUps:
          items:
            $ref: '#/components/schemas/MatchUpDto'
          type: array
      type: object
    MatchUps:
      properties:
        leagues:
          items:
            $ref: '#/components/schemas/MatchUpLeague'
          type: array
        rounds:
          additionalProperties:
            $ref: '#/components/schemas/GameRoundDto'
          type: object
        teams:
          additionalProperties:
            $ref: '#/components/schemas/TeamDto'
          type: object
      type: object
    MatchingBetItemsRequest:
      properties:
        betItemStatus:
          enum:
            - INVALID_ENUM
            - PENDING
            - CANCELLED
            - LOSE
            - HALF_LOSE_HALF_BACK
            - STAKE_BACK
            - HALF_BACK_HALF_WIN
            - WIN
            - WIN_CUT_PLUS
            - REJECTED
          type: string
        betslipIds:
          items:
            format: int64
            type: integer
          type: array
        betslipStatuses:
          items:
            enum:
              - PENDING
              - CANCELLED
              - SETTLED
              - CASHOUT
              - PENDING_CUT_PLUS
            type: string
          type: array
        betslipUuids:
          items:
            type: string
          type: array
        brand:
          type: string
        eventId:
          format: int32
          type: integer
        isLive:
          type: boolean
        placedFrom:
          format: date-time
          type: string
        placedTo:
          format: date-time
          type: string
      type: object
    MessageCreateRequest:
      properties:
        additionalView:
          $ref: '#/components/schemas/AdditionalViewDto'
        brandIdentifier:
          description: can be provided with multi brand access rights
          example: betpawa-uganda
          type: string
        ctaLink:
          description: Call to action link
          type: string
        endTime:
          format: date-time
          type: string
        messageDeliveryType:
          enum:
            - DIRECT
            - BROADCAST
            - SINGLE
          type: string
        messageType:
          type: string
        startTime:
          format: date-time
          type: string
        texts:
          items:
            $ref: '#/components/schemas/MessageTextDto'
          type: array
        userUuidList:
          items:
            format: uuid
            type: string
          type: array
        userUuidsFileId:
          type: string
      required:
        - messageDeliveryType
        - messageType
        - texts
      type: object
    MessageCreateResponse:
      properties:
        messageId:
          type: string
      type: object
    MessageDto:
      properties:
        brandIdentifier:
          type: string
        cancelled:
          type: boolean
        createUser:
          type: string
        created:
          format: date-time
          type: string
        creationStatus:
          type: string
        ctaLink:
          type: string
        endTime:
          format: date-time
          type: string
        id:
          type: string
        messageDeliveryType:
          enum:
            - DIRECT
            - BROADCAST
            - SINGLE
          type: string
        messageType:
          type: string
        startTime:
          format: date-time
          type: string
        statistics:
          $ref: '#/components/schemas/MessageStatisticsDto'
        texts:
          items:
            $ref: '#/components/schemas/MessageTextDto'
          type: array
        userUuidsFileId:
          type: string
      type: object
    MessageStatisticsDto:
      properties:
        clicked:
          format: int64
          readOnly: true
          type: integer
        delivered:
          format: int64
          readOnly: true
          type: integer
        queued:
          format: int64
          readOnly: true
          type: integer
        seen:
          format: int64
          readOnly: true
          type: integer
        total:
          format: int64
          readOnly: true
          type: integer
      type: object
    MessageTextDto:
      properties:
        ctaText:
          description: Call to action text, used for ctaLink creation
          maxLength: 220
          minLength: 0
          type: string
        firebaseBody:
          description: Firebase message body
          maxLength: 220
          minLength: 0
          type: string
        firebaseTitle:
          description: Firebase message title
          maxLength: 220
          minLength: 0
          type: string
        language:
          description: ISO 639-1 format - two letter long language code
          maxLength: 2
          minLength: 2
          type: string
        messageText:
          maxLength: 220
          minLength: 0
          type: string
      required:
        - language
        - messageText
      type: object
    MessageTypeDto:
      properties:
        type:
          type: string
      type: object
    MessageTypeRequest:
      properties:
        type:
          pattern: '[A-Z0-9_]+'
          type: string
      required:
        - type
      type: object
    MessageTypesDto:
      properties:
        messageTypes:
          items:
            type: string
          type: array
      type: object
    MessageViewRequest:
      properties:
        brandIdentifier:
          example: betpawa-uganda
          type: string
        messageType:
          type: string
        pageNumber:
          example: 1
          format: int32
          type: integer
        userUuid:
          format: uuid
          type: string
      type: object
    MessageViewResponse:
      properties:
        currentPage:
          example: 1
          format: int32
          type: integer
        totalElements:
          example: 115
          format: int64
          type: integer
        totalPages:
          example: 8
          format: int32
          type: integer
        userMessages:
          items:
            $ref: '#/components/schemas/MessageDto'
          type: array
      type: object
    MetadataChanges:
      properties:
        changes:
          items:
            $ref: '#/components/schemas/ChangeRecord'
          type: array
      type: object
    MetadataChangesSearchRequest:
      properties:
        key:
          type: string
      type: object
    MetadataList:
      properties:
        list:
          items:
            $ref: '#/components/schemas/DerivedDataMetadataDto'
          type: array
      type: object
    MultiJurisdictionExtension:
      properties:
        exchangeRates:
          items:
            $ref: '#/components/schemas/CurrencyRateDto'
          type: array
        fee:
          type: number
        payoutTime:
          format: date-time
          type: string
        prizes:
          items:
            $ref: '#/components/schemas/PrizeDto'
          type: array
      type: object
    NoteResponse:
      properties:
        Created:
          format: date-time
          type: string
        Name:
          type: string
        Note:
          type: string
        noteUuid:
          format: uuid
          type: string
        userUuid:
          format: uuid
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    OddsSelectionResponse:
      properties:
        handicap:
          type: string
        id:
          type: string
        name:
          type: string
        price:
          type: number
        probability:
          $ref: '#/components/schemas/Probability'
        suspended:
          type: boolean
        typeId:
          type: string
      type: object
    OfferResponse:
      properties:
        expire:
          format: date-time
          type: string
        offerId:
          type: string
        payout:
          $ref: '#/components/schemas/PayoutResponse'
      type: object
    OfferStatusResponse:
      properties:
        confirmed:
          type: boolean
        pollingTimeoutSeconds:
          format: int64
          type: integer
        statusId:
          type: string
      type: object
    OneOfRuleValueDto:
      allOf:
        - $ref: '#/components/schemas/RuleDto'
        - properties:
            oneOf:
              items:
                type: string
              type: array
          type: object
      type: object
    OtpConfigurationRequest:
      properties:
        activeUsersCallLimit:
          format: int32
          type: integer
        brandIdentifier:
          type: string
        callLimitDuration:
          type: string
        enabled:
          type: boolean
        inactiveUsersCallLimit:
          format: int32
          type: integer
        method:
          type: string
        position:
          format: int32
          type: integer
        uuid:
          format: uuid
          type: string
      required:
        - activeUsersCallLimit
        - brandIdentifier
        - enabled
        - inactiveUsersCallLimit
        - method
        - position
      type: object
    OtpConfigurationResponse:
      properties:
        activeUsersCallLimit:
          format: int32
          type: integer
        brandIdentifier:
          type: string
        callLimitDuration:
          type: string
        enabled:
          type: boolean
        inactiveUsersCallLimit:
          format: int32
          type: integer
        method:
          type: string
        position:
          format: int32
          type: integer
        uuid:
          format: uuid
          type: string
      type: object
    PagedResponseUserDepositResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/UserDepositResponse'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    PagedResponseUserFailedDepositResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/UserFailedDepositResponse'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    PagedResponseUserPayoutResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/UserPayoutResponse'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    PagedResponseWithTotalNumberOfPagesForPayoutsPayoutRequestResponseSimplifiedV2:
      properties:
        items:
          items:
            $ref: '#/components/schemas/PayoutRequestResponseSimplifiedV2'
          type: array
        targets:
          items:
            type: string
          type: array
        totalCount:
          format: int64
          type: integer
        totalNumberOfPages:
          format: int32
          type: integer
      type: object
    PagedResponseWithTotalNumberOfPagesForPayoutsPayoutRequestResponseV2:
      properties:
        items:
          items:
            $ref: '#/components/schemas/PayoutRequestResponseV2'
          type: array
        targets:
          items:
            type: string
          type: array
        totalCount:
          format: int64
          type: integer
        totalNumberOfPages:
          format: int32
          type: integer
      type: object
    ParticipantPeriodResultResponse:
      properties:
        participant:
          $ref: '#/components/schemas/ParticipantResponse'
        periodResults:
          items:
            $ref: '#/components/schemas/PeriodResultResponse'
          type: array
      type: object
    ParticipantResponse:
      properties:
        id:
          type: string
        name:
          type: string
        position:
          format: int32
          type: integer
      type: object
    ParticipantStandingResponse:
      properties:
        form:
          items:
            type: string
          type: array
        id:
          type: string
        name:
          type: string
        points:
          $ref: '#/components/schemas/PointsStandingResponse'
        position:
          format: int32
          type: integer
        scoreStanding:
          $ref: '#/components/schemas/ScoreStandingResponse'
      type: object
    PasswordRequestV3:
      properties:
        phoneNumber:
          description: Phone number to update password. Also it is key for call limiter
          type: string
        resetMethodName:
          description: 'One of possible methods to reset password. It could be: SMS,
            VOICE, WHATSAPP, ....'
          type: string
      required:
        - phoneNumber
        - resetMethodName
      type: object
    PasswordRuleValueDto:
      allOf:
        - $ref: '#/components/schemas/RuleDto'
        - properties:
            minimumLength:
              format: int32
              type: integer
            pattern:
              type: string
          type: object
      type: object
    PawapayWalletBalanceConfigurationResponse:
      properties:
        balanceLimit:
          type: number
        brandIdentifier:
          type: string
        countryCode:
          type: string
        enabled:
          type: boolean
        id:
          format: int32
          type: integer
        pawapayCorrespondent:
          type: string
      type: object
    PaymentSystemLimit:
      properties:
        currencyCode:
          type: string
        max:
          format: int32
          type: integer
        min:
          format: int32
          type: integer
      type: object
    PayoutCreationResponse:
      properties:
        Status:
          enum:
            - UNKNOWN
            - ACCEPTED
            - REJECTED
            - SUCCESS
            - FAILURE
            - PAID_MANUALLY
            - SENDING
            - QUEUED
            - REMOVE_FROM_QUEUE
            - WAITING_ACCEPTANCE
          type: string
        withdrawalUuid:
          format: uuid
          type: string
      required:
        - Status
      type: object
    PayoutDetails:
      properties:
        bonus:
          type: number
        bonusType:
          type: string
        grossPossibleWin:
          type: number
        multipliedOdds:
          type: number
        netCompensation:
          type: number
        netPossibleWin:
          type: number
        oddsMultiplier:
          type: number
        payout:
          type: number
        totalOdds:
          type: number
      type: object
    PayoutDetails1:
      properties:
        hitCountMax:
          format: int32
          type: integer
        payout:
          type: number
        payoutTime:
          format: date-time
          type: string
        prize:
          type: number
        tax:
          type: number
      type: object
    PayoutMethodsResponse:
      properties:
        CmsComponentId:
          format: int32
          type: integer
        DocumentNumber:
          type: string
        ExtraData:
          additionalProperties:
            type: object
          type: object
        FirstName:
          type: string
        LastName:
          type: string
        NationalIdentificationNumber:
          type: string
        Nationality:
          type: string
        PayoutType:
          type: string
        PayoutTypeName:
          type: string
        PayoutTypeStrategy:
          type: string
        channel:
          type: string
        currencyCode:
          type: string
        flatFee:
          type: number
        fractionalSupported:
          type: boolean
        freeWithdrawalsCount24h:
          format: int32
          type: integer
        freeWithdrawalsCountPerWeek:
          format: int32
          type: integer
        isPersonalDataSet:
          type: boolean
        maxAmount:
          format: int32
          type: integer
        minAmount:
          format: int32
          type: integer
        paymentProvider:
          type: string
        percentageFee:
          type: number
        state:
          type: string
        status:
          type: string
      required:
        - CmsComponentId
        - PayoutType
        - PayoutTypeName
        - PayoutTypeStrategy
      type: object
    PayoutMethodsResponseV2:
      properties:
        payoutMethods:
          items:
            $ref: '#/components/schemas/PayoutMethodsResponse'
          type: array
        successfulPayoutsToday:
          format: int32
          type: integer
        thisWeeksSuccessfulPayoutsCount:
          format: int32
          type: integer
      type: object
    PayoutPagedRequestWithCrossBrandOption:
      properties:
        crossBrandEnabled:
          type: boolean
        crossJurisdictionEnabled:
          deprecated: true
          type: boolean
        msisdn:
          type: string
        pageNumber:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        sorting:
          additionalProperties:
            enum:
              - ASC
              - DESC
            type: string
          type: object
        targets:
          items:
            type: string
          type: array
      type: object
    PayoutRequest:
      properties:
        betslipId:
          format: int64
          type: integer
      type: object
    PayoutRequestProcessResponse:
      properties:
        havingQueuedStatus:
          deprecated: true
          type: boolean
        shouldBeReprocessed:
          type: boolean
        status:
          type: string
        validationPassed:
          type: boolean
      type: object
    PayoutRequestResponseSimplifiedV2:
      properties:
        amount:
          type: string
        amountUsd:
          type: string
        createdDate:
          format: date-time
          type: string
        currencyCode:
          type: string
        type:
          type: string
        userIdentifier:
          type: string
        userUuid:
          type: string
      type: object
    PayoutRequestResponseV2:
      properties:
        amount:
          type: string
        amountUsd:
          type: string
        createdDate:
          format: date-time
          type: string
        currencyCode:
          type: string
        inclusion:
          type: string
        reason:
          type: string
        type:
          type: string
        userIdentifier:
          type: string
        userUuid:
          format: uuid
          type: string
        uuid:
          type: string
      type: object
    PayoutResponse:
      properties:
        gross:
          type: number
        net:
          type: number
        tax:
          type: number
        whtCompensation:
          $ref: '#/components/schemas/TaxCompensation'
      type: object
    PayoutTransactionOverviewResponseV2:
      properties:
        address:
          type: string
        amount:
          type: string
        balance:
          type: string
        bankAccount:
          type: string
        bankInfo:
          type: string
        betsPlaced:
          format: int32
          type: integer
        currency:
          type: string
        date:
          format: date-time
          type: string
        deposits:
          format: int64
          type: integer
        details:
          type: string
        feeAmount:
          type: string
        identifier:
          type: string
        name:
          type: string
        netRevenue:
          type: string
        taxAmount:
          type: string
        type:
          type: string
        userBrandIdentifier:
          type: string
        userCountryIso:
          type: string
        userUuid:
          type: string
        uuid:
          type: string
      type: object
    PayoutTypeCreateRequest:
      properties:
        active:
          type: boolean
        automaticPayoutsEnabled:
          type: boolean
        automaticPayoutsSupported:
          type: boolean
        availabilityCheckEnabled:
          type: boolean
        brandIdentifier:
          type: string
        currencyCode:
          type: string
        flatFeeAmount:
          type: number
        fractionalSupported:
          type: boolean
        freePayoutsCount24h:
          format: int32
          type: integer
        freePayoutsCountPerWeek:
          format: int32
          type: integer
        id:
          format: int32
          type: integer
        maxAutomaticPayoutsAmount24h:
          format: int32
          type: integer
        maxWithdrawAmount:
          format: int32
          type: integer
        minWithdrawAmount:
          format: int32
          type: integer
        nameLookupEnabled:
          type: boolean
        numberOfConsumers:
          format: int32
          type: integer
        pawapayCorrespondent:
          type: string
        payoutTypeName:
          type: string
        percentageFeeAmount:
          type: number
        phoneOperatorDescription:
          type: string
        priority:
          format: int32
          type: integer
        text:
          type: string
      required:
        - id
        - payoutTypeName
      type: object
    PayoutTypeDto:
      properties:
        active:
          type: boolean
        automaticPayoutsEnabled:
          type: boolean
        automaticPayoutsSupported:
          type: boolean
        availabilityCheckEnabled:
          type: boolean
        brandIdentifier:
          type: string
        consumersCount:
          format: int32
          type: integer
        currencyCode:
          type: string
        flatFee:
          type: number
        fractionalSupported:
          type: boolean
        freePayoutsCount24h:
          format: int32
          type: integer
        freePayoutsCountPerWeek:
          format: int32
          type: integer
        id:
          format: int32
          type: integer
        maxAllowedWithdrawAmount:
          format: int32
          type: integer
        maxAutomaticPayoutsAmount24h:
          format: int32
          type: integer
        minAllowedWithdrawAmount:
          format: int32
          type: integer
        nameLookupEnabled:
          type: boolean
        pawapayCorrespondent:
          type: string
        payoutTypeName:
          type: string
        percentageFee:
          type: number
        phoneOperatorDescription:
          type: string
        priority:
          format: int32
          type: integer
        text:
          type: string
      type: object
    PayoutTypeUpdateRequest:
      properties:
        active:
          type: boolean
        automaticPayoutsEnabled:
          type: boolean
        automaticPayoutsSupported:
          type: boolean
        availabilityCheckEnabled:
          type: boolean
        brandIdentifier:
          type: string
        currencyCode:
          type: string
        flatFeeAmount:
          type: number
        fractionalSupported:
          type: boolean
        freePayoutsCount24h:
          format: int32
          type: integer
        freePayoutsCountPerWeek:
          format: int32
          type: integer
        id:
          format: int32
          type: integer
        maxAutomaticPayoutsAmount24h:
          format: int32
          type: integer
        maxWithdrawAmount:
          format: int32
          type: integer
        minWithdrawAmount:
          format: int32
          type: integer
        nameLookupEnabled:
          type: boolean
        numberOfConsumers:
          format: int32
          type: integer
        pawapayCorrespondent:
          type: string
        percentageFeeAmount:
          type: number
        phoneOperatorDescription:
          type: string
        priority:
          format: int32
          type: integer
        text:
          type: string
      required:
        - id
      type: object
    PendingBetslipRequest:
      properties:
        brandIdentifier:
          type: string
        events:
          items:
            format: int64
            type: integer
          type: array
      type: object
    PendingBetslipResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/EventPendingDto'
          type: array
      type: object
    PendingPayoutsResponse:
      properties:
        amountUnformatted:
          type: string
        createdIsoInstant:
          format: date-time
          type: string
        currencyCode:
          type: string
        feeAmount:
          type: string
        taxAmount:
          type: string
        uuid:
          type: string
      type: object
    PendingPayoutsResponseV2:
      properties:
        amount:
          type: string
        created:
          format: date-time
          type: string
        currencyCode:
          type: string
        feeAmount:
          type: string
        taxAmount:
          type: string
        uuid:
          type: string
      type: object
    PerformAuthorizationRequest:
      properties:
        streamUuid:
          type: string
      required:
        - streamUuid
      type: object
    Period:
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
      type: object
    PeriodResponse:
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        slug:
          type: string
      type: object
    PeriodResponse1:
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
      type: object
    PeriodResponse2:
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
      type: object
    PeriodResultResponse:
      properties:
        period:
          $ref: '#/components/schemas/PeriodResponse2'
        result:
          type: string
        type:
          type: string
      type: object
    PhoneOperatorCreateRequest:
      properties:
        brandIdentifier:
          type: string
        operatorName:
          type: string
        phoneCountryCode:
          format: int32
          type: integer
        phoneNetwork:
          type: string
        signUpAllowed:
          type: boolean
      required:
        - brandIdentifier
        - operatorName
        - phoneNetwork
      type: object
    PhoneOperatorDataResponse:
      properties:
        network:
          type: string
        operatorName:
          type: string
        phoneOperatorAllowed:
          type: boolean
        prefixes:
          items:
            type: string
          type: array
      type: object
    PhoneOperatorDeleteRequest:
      properties:
        brandIdentifier:
          type: string
        phoneOperatorName:
          type: string
      type: object
    PhoneOperatorModifyRequest:
      properties:
        brandIdentifier:
          type: string
        operatorName:
          type: string
        phoneCountryCode:
          format: int32
          type: integer
        phoneNetwork:
          type: string
        signUpAllowed:
          type: boolean
      required:
        - brandIdentifier
        - operatorName
      type: object
    PhoneOperatorPrefixRequest:
      properties:
        brandIdentifier:
          type: string
        phoneNetwork:
          type: string
        prefix:
          pattern: ^[0-9]+$
          type: string
      required:
        - brandIdentifier
        - phoneNetwork
        - prefix
      type: object
    PhoneOperatorPrefixResponse:
      properties:
        brandIdentifier:
          type: string
        phoneOperators:
          items:
            $ref: '#/components/schemas/PhoneOperatorResponse'
          type: array
      type: object
    PhoneOperatorResponse:
      properties:
        operator:
          type: string
        prefixes:
          items:
            type: string
          type: array
      type: object
    PhoneOperatorSetupResponse:
      properties:
        brandIdentifier:
          type: string
        phoneCountryCode:
          format: int32
          type: integer
        phoneOperators:
          items:
            $ref: '#/components/schemas/PhoneOperatorDataResponse'
          type: array
      type: object
    PlaceBetItemDto:
      properties:
        outcomes:
          items:
            format: int32
            type: integer
          type: array
        position:
          format: int32
          type: integer
      type: object
    PlaceBetRequest:
      description: Bet details including pool ID, selections, and stake amount
      properties:
        poolId:
          type: string
        selections:
          items:
            $ref: '#/components/schemas/PlaceBetItemDto'
          type: array
        tiebreakers:
          items:
            $ref: '#/components/schemas/PlaceBetTiebreakerDto'
          type: array
        uniqueTicketId:
          maxLength: 70
          minLength: 0
          type: string
      type: object
    PlaceBetTiebreakerDto:
      properties:
        id:
          format: int64
          type: integer
        value:
          format: int32
          type: integer
      type: object
    PointsStandingResponse:
      properties:
        drew:
          format: int32
          type: integer
        lost:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        won:
          format: int32
          type: integer
      type: object
    PoolAdminRequest:
      properties:
        direction:
          type: boolean
        orderBy:
          type: string
        skip:
          format: int32
          type: integer
        status:
          type: string
        take:
          format: int32
          type: integer
      type: object
    PoolBrandAddDto:
      properties:
        brandIdentifier:
          type: string
        fee:
          type: number
        prizes:
          items:
            $ref: '#/components/schemas/PrizeAddRequest'
          type: array
      type: object
    PoolCancellationVerdictRequest:
      properties:
        id:
          format: int64
          type: integer
        verdictType:
          enum:
            - APPROVED
            - DECLINED
          type: string
      type: object
    PoolConfigurationRequest:
      properties:
        enabled:
          type: boolean
        jackpotMinStakeAmount:
          type: number
      type: object
    PoolConfigurationResponse:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        jackpotMinStakeAmount:
          type: number
      type: object
    PoolCreationDto:
      properties:
        closeDate:
          format: date-time
          type: string
        description:
          type: string
        descriptionTranslations:
          items:
            $ref: '#/components/schemas/TranslatedTextRequest'
          type: array
        name:
          type: string
        nameTranslations:
          items:
            $ref: '#/components/schemas/TranslatedTextRequest'
          type: array
        offset:
          format: int64
          type: integer
        openDate:
          format: date-time
          type: string
        presentation:
          type: string
        priorityOrder:
          format: int32
          type: integer
        templateId:
          format: int64
          type: integer
      type: object
    PoolCreationRequest:
      description: Pool creation details including events, prizes, and settings
      properties:
        categories:
          items:
            $ref: '#/components/schemas/CategoryAddRequest'
          type: array
        eventIds:
          items:
            format: int64
            type: integer
          type: array
        exchangeRates:
          items:
            $ref: '#/components/schemas/CurrencyRateDto'
          type: array
        fee:
          type: number
        payouts:
          items:
            $ref: '#/components/schemas/PrizeAddRequest'
          type: array
        poolCreationDto:
          $ref: '#/components/schemas/PoolCreationDto'
        poolJurisdictions:
          items:
            $ref: '#/components/schemas/PoolBrandAddDto'
          type: array
        tiebreakersData:
          $ref: '#/components/schemas/TiebreakersDataRequest'
      type: object
    PoolDetailedDto:
      properties:
        admin1:
          $ref: '#/components/schemas/AdminDto'
        admin2:
          $ref: '#/components/schemas/AdminDto'
        cancellationConfirmedBy:
          format: uuid
          type: string
        cancellationRequestedBy:
          format: uuid
          type: string
        events:
          items:
            $ref: '#/components/schemas/EventDetailedDto'
          type: array
        jackpotRows:
          items:
            $ref: '#/components/schemas/JackpotRowDetailedDto'
          type: array
        multiJurisdictionExtension:
          $ref: '#/components/schemas/MultiJurisdictionExtension'
        poolDto:
          $ref: '#/components/schemas/PoolDto'
        poolJurisdictions:
          items:
            $ref: '#/components/schemas/PoolJurisdictionDetailedDto'
          type: array
        poolStatus:
          enum:
            - CLOSED
            - ACTIVE
            - SCHEDULED
            - IN_CANCELLATION
            - IN_CONFIRMATION
            - CANCELLED
            - CONFIRMED
          type: string
        poolType:
          type: string
        template:
          $ref: '#/components/schemas/TemplateDetailedDto'
        tiebreakersData:
          $ref: '#/components/schemas/TiebreakersDataResponse'
      type: object
    PoolDto:
      properties:
        closeTime:
          format: date-time
          type: string
        confirmer:
          format: uuid
          type: string
        description:
          $ref: '#/components/schemas/TranslationDto'
        id:
          format: int64
          type: integer
        name:
          $ref: '#/components/schemas/TranslationDto'
        openTime:
          format: date-time
          type: string
        presentation:
          type: string
        priorityOrder:
          format: int32
          type: integer
        resulter:
          format: uuid
          type: string
        templateId:
          format: int64
          type: integer
      type: object
    PoolEditRequest:
      description: Pool edit details including events, prizes, and settings to update
      properties:
        closeTime:
          format: date-time
          type: string
        description:
          type: string
        descriptionTranslations:
          items:
            $ref: '#/components/schemas/TranslatedTextRequest'
          type: array
        id:
          format: int64
          type: integer
        name:
          type: string
        nameTranslations:
          items:
            $ref: '#/components/schemas/TranslatedTextRequest'
          type: array
        offset:
          format: int64
          type: integer
        openTime:
          format: date-time
          type: string
        presentation:
          type: string
        priorityOrder:
          format: int32
          type: integer
        prizes:
          items:
            $ref: '#/components/schemas/PrizeEditRequest'
          type: array
      type: object
    PoolJurisdictionDetailedDto:
      properties:
        brandId:
          type: string
        currencyCode:
          type: string
        currencyId:
          format: int32
          type: integer
        fee:
          type: number
        id:
          format: int64
          type: integer
        payoutTime:
          format: date-time
          type: string
        poolId:
          format: int64
          type: integer
        prizes:
          items:
            $ref: '#/components/schemas/PrizeDto'
          type: array
      type: object
    PoolListDto:
      properties:
        closeTime:
          format: date-time
          type: string
        confirmedBy:
          type: string
        id:
          format: int64
          type: integer
        jurisdictionNames:
          items:
            type: string
          type: array
        name:
          type: string
        openTime:
          format: date-time
          type: string
        resultedBy:
          type: string
        templateName:
          type: string
      type: object
    PoolMinimumDetailsDto:
      properties:
        currencyCode:
          type: string
        fee:
          type: number
        id:
          type: string
        maxPrize:
          type: number
        name:
          type: string
        rowCount:
          format: int32
          type: integer
        type:
          enum:
            - MULTI_EVENTS
            - SINGLE_EVENT
            - FREE_FORM
            - MULTIJURISDICTION
          type: string
      type: object
    PoolResponse:
      properties:
        legacySupport:
          $ref: '#/components/schemas/LegacySupport'
        marketing:
          $ref: '#/components/schemas/MarketingDto'
        pool:
          $ref: '#/components/schemas/PoolDto'
        user:
          $ref: '#/components/schemas/PoolUserDto'
      type: object
    PoolResultRequest:
      properties:
        events:
          items:
            $ref: '#/components/schemas/EventDto'
          type: array
        poolId:
          format: int64
          type: integer
      type: object
    PoolUserDto:
      properties:
        freeTicketCount:
          format: int32
          type: integer
      type: object
    PreregistrationRequest:
      properties:
        phoneNumber:
          type: string
      required:
        - phoneNumber
      type: object
    PriceAdditionalInfo:
      properties:
        hot:
          type: boolean
      type: object
    PriceResponse:
      properties:
        additionalInfo:
          $ref: '#/components/schemas/PriceAdditionalInfo'
        displayName:
          type: string
        handicap:
          type: string
        id:
          type: string
        name:
          type: string
        position:
          format: int32
          type: integer
        price:
          type: number
        probability:
          $ref: '#/components/schemas/Probability'
        suspended:
          type: boolean
        typeId:
          type: string
      type: object
    PricingInfoStatsResponse:
      properties:
        selectionPricingInfoStats:
          items:
            $ref: '#/components/schemas/SelectionPricingInfo'
          type: array
      type: object
    PricingStatsInfoRequest:
      properties:
        selectionIds:
          items:
            format: int32
            type: integer
          type: array
      type: object
    PrizeAddRequest:
      properties:
        rolledOver:
          format: int32
          type: integer
        seed:
          format: int32
          type: integer
        templatePrizeId:
          format: int64
          type: integer
      type: object
    PrizeDetailedDto:
      properties:
        currencyCode:
          type: string
        hits:
          $ref: '#/components/schemas/EventHitsDto'
        mistakes:
          format: int32
          type: integer
        prizeDto:
          $ref: '#/components/schemas/PrizeDto'
        prizePercentage:
          format: int32
          type: integer
        taxAmount:
          type: number
      type: object
    PrizeDto:
      properties:
        id:
          format: int64
          type: integer
        poolJurisdictionId:
          format: int64
          type: integer
        rolledOver:
          type: number
        seed:
          type: number
        templatePrizeId:
          format: int64
          type: integer
        wonPerTicket:
          type: number
        wonTickets:
          format: int32
          type: integer
      type: object
    PrizeEditRequest:
      properties:
        guaranteed:
          type: number
        id:
          format: int64
          type: integer
        rolled:
          type: number
      type: object
    Probability:
      properties:
        refund:
          format: double
          type: number
        win:
          format: double
          type: number
      type: object
    Query:
      properties:
        gameName:
          type: string
        gameProvider:
          type: string
        providerGameId:
          type: string
      type: object
    Query1:
      properties:
        brandIdentifier:
          type: string
        currency:
          description: 'If not provided default currency will be used. Format: ISO
            4217 (3 characters) and upper case'
          type: string
        relatedId:
          type: string
        userUuid:
          format: uuid
          type: string
      required:
        - brandIdentifier
        - userUuid
      type: object
    Query2:
      properties:
        boosted:
          description: To filter event with boosted markets. Nullable field.
          type: boolean
        categories:
          description: Sport categories
          example:
            - 2
          items:
            type: string
          maxItems: 7
          minItems: 1
          type: array
        eventType:
          description: One of {UPCOMING, LIVE} or null
          example: UPCOMING
          type: string
        hasOdds:
          description: Check that event have any price.
          type: boolean
        marketTypes:
          description: Filter events with one of this markets is available and has
            a price.
          example:
            - 3743
          items:
            type: string
          maxItems: 7
          minItems: 1
          type: array
        popular:
          description: To filter event with hot price. Nullable field.
          type: boolean
        startTime:
          $ref: '#/components/schemas/StartTimeSubQuery'
        zones:
          $ref: '#/components/schemas/ZonesRequest'
          description: all fields in zones merged '||'
      required:
        - categories
      type: object
    Query3:
      properties:
        brandIdentifier:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
      type: object
    RabbitListenerData:
      properties:
        extra:
          type: string
        id:
          type: string
        isRunning:
          type: boolean
      type: object
    RecalculateDepositStatisticsRequest:
      properties:
        brandIdentifier:
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    RecalculateUserWithdrawalStatisticsRequest:
      properties:
        brandIdentifier:
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    RegionDto:
      properties:
        id:
          format: int32
          type: integer
        iso:
          type: string
        name:
          type: string
        parentId:
          format: int32
          type: integer
      type: object
    RegionResponse:
      properties:
        competitions:
          items:
            $ref: '#/components/schemas/CompetitionResponse'
          type: array
        region:
          $ref: '#/components/schemas/RegionStaticMeta'
      type: object
    RegionResponseV2:
      properties:
        competitions:
          items:
            $ref: '#/components/schemas/CompetitionResponseV2'
          type: array
        region:
          $ref: '#/components/schemas/RegionStaticMeta'
      type: object
    RegionResponseV3:
      properties:
        competitions:
          items:
            $ref: '#/components/schemas/CompetitionResponseV3'
          type: array
        eventCounts:
          $ref: '#/components/schemas/EventCounts'
        region:
          $ref: '#/components/schemas/RegionStaticMeta'
        week:
          $ref: '#/components/schemas/CountCalendar'
      type: object
    RegionStaticMeta:
      properties:
        id:
          type: string
        iso:
          type: string
        name:
          type: string
        parentId:
          type: string
        parentSlug:
          type: string
        slug:
          type: string
      type: object
    RemoveSelfExclusionRequest:
      properties:
        brandIdentifier:
          description: User's brand. For v2 endpoint only
          type: string
        userNote:
          description: Comment on the reason of this action
          type: string
        userUuid:
          format: uuid
          type: string
      required:
        - userNote
        - userUuid
      type: object
    RequestEnrichmentRequest:
      properties:
        filteredRequestUuid:
          type: string
        selectionIds:
          items:
            format: int64
            type: integer
          type: array
      type: object
    ResponseBigDecimal:
      properties:
        data:
          type: number
      type: object
    ResponseBoolean:
      properties:
        data:
          type: boolean
      type: object
    ResponseCollectionUserTransactionDetails:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserTransactionDetails'
          type: array
      type: object
    ResponseListAutomaticPayoutTypeResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AutomaticPayoutTypeResponse'
          type: array
      type: object
    ResponseListDepositOptionDto:
      properties:
        data:
          items:
            $ref: '#/components/schemas/DepositOptionDto'
          type: array
      type: object
    ResponseListDepositTypeResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/DepositTypeResponse'
          type: array
      type: object
    ResponseListImportStatementType:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ImportStatementType'
          type: array
      type: object
    ResponseListManualDepositDtoV2:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ManualDepositDtoV2'
          type: array
      type: object
    ResponseListPendingPayoutsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/PendingPayoutsResponse'
          type: array
      type: object
    ResponseListPendingPayoutsResponseV2:
      properties:
        data:
          items:
            $ref: '#/components/schemas/PendingPayoutsResponseV2'
          type: array
      type: object
    ResponseObject:
      properties:
        data:
          type: object
      type: object
    ResponsePayoutCreationResponse:
      properties:
        data:
          $ref: '#/components/schemas/PayoutCreationResponse'
      type: object
    ResponsePayoutMethodsResponseV2:
      properties:
        data:
          $ref: '#/components/schemas/PayoutMethodsResponseV2'
      type: object
    ResponsePayoutRequestProcessResponse:
      properties:
        data:
          $ref: '#/components/schemas/PayoutRequestProcessResponse'
      type: object
    ResponseRegionDto:
      properties:
        items:
          items:
            $ref: '#/components/schemas/RegionDto'
          type: array
        totalCount:
          format: int32
          type: integer
      type: object
    ResponseWithdrawalsResponseV2Dto:
      properties:
        data:
          $ref: '#/components/schemas/WithdrawalsResponseV2Dto'
      type: object
    ResultedPoolsResponse:
      properties:
        list:
          items:
            $ref: '#/components/schemas/PoolResponse'
          type: array
        total:
          format: int64
          type: integer
      type: object
    ResultsResponse:
      properties:
        display:
          $ref: '#/components/schemas/DisplayResponse1'
        participantPeriodResults:
          items:
            $ref: '#/components/schemas/ParticipantPeriodResultResponse'
          type: array
      type: object
    ResultsWithEventResponse:
      properties:
        id:
          type: string
        results:
          $ref: '#/components/schemas/ResultsResponse'
      type: object
    RevisionDto:
      properties:
        brand:
          type: string
        changes:
          items:
            type: string
          type: array
        id:
          format: uuid
          type: string
        timestamp:
          format: date-time
          type: string
        type:
          enum:
            - ADD
            - MOD
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    RibbonBulkAssign:
      properties:
        allBrands:
          type: boolean
        brandIdentifiers:
          items:
            type: string
          type: array
        provider:
          description: Game provider
          type: string
        providerGameIds:
          items:
            type: string
          type: array
        uuid:
          description: Should be filled when modifying existing ribbon
          format: uuid
          type: string
      required:
        - provider
        - providerGameIds
      type: object
    RibbonBulkDelete:
      properties:
        allBrands:
          type: boolean
        brandIdentifiers:
          items:
            type: string
          type: array
        provider:
          description: Game provider
          type: string
        providerGameIds:
          items:
            type: string
          type: array
      required:
        - provider
        - providerGameIds
      type: object
    RibbonExchange:
      properties:
        backgroundColor:
          type: string
        name:
          description: Unique name of the ribbon
          type: string
        textColor:
          type: string
        translations:
          additionalProperties:
            type: string
          type: object
        uuid:
          description: Should be filled when modifying existing ribbon
          format: uuid
          type: string
      required:
        - backgroundColor
        - name
        - textColor
        - translations
      type: object
    RollbackRequest:
      properties:
        poolId:
          format: int64
          type: integer
      type: object
    RoundResponse:
      properties:
        id:
          type: string
        name:
          type: string
        tradingTime:
          $ref: '#/components/schemas/TradingInfoResponse'
      type: object
    RowOutcomeDto:
      properties:
        position:
          format: int32
          type: integer
        value:
          type: string
      type: object
    RowTranslation:
      properties:
        language:
          type: string
        name:
          type: string
        values:
          items:
            $ref: '#/components/schemas/RowOutcomeDto'
          type: array
      type: object
    RuleDto:
      description: List of rules
      discriminator:
        mapping:
          ageRule: '#/components/schemas/AgeRuleValueDto'
          carriersBasedPhoneNumberRule: '#/components/schemas/CarriersBasedPhoneNumberRuleValueDto'
          oneOfRule: '#/components/schemas/OneOfRuleValueDto'
          passwordRule: '#/components/schemas/PasswordRuleValueDto'
          userIdentifierRule: '#/components/schemas/UserIdentifierRuleValueDto'
        propertyName: validatorType
      properties:
        validatorType:
          type: string
      required:
        - validatorType
      type: object
    ScenarioDto:
      description: A validation scenario is a named set of fields with predefined
        rules
      properties:
        additionalContext:
          additionalProperties:
            description: The additional data can be provided to the scenario caller
            example: '{"accountVerificationNeeded":"true"}'
            type: string
          description: The additional data can be provided to the scenario caller
          example:
            accountVerificationNeeded: 'true'
          type: object
        additionalContextFilled:
          type: boolean
        blocker:
          type: boolean
        brandIdentifier:
          description: Brand identifier where the scenario is used
          example: betpawa-uganda
          type: string
        fields:
          description: The validation fields to be used in the scope of this scenario
          items:
            $ref: '#/components/schemas/FieldDto'
          type: array
        name:
          description: The name of the validation scenario. Used to call from business
            logic (code).
          example: signUp
          type: string
      type: object
    ScenariosList:
      properties:
        scenarios:
          items:
            $ref: '#/components/schemas/ScenarioDto'
          type: array
      type: object
    ScoreStandingResponse:
      properties:
        conceded:
          format: int32
          type: integer
        scored:
          format: int32
          type: integer
      type: object
    ScoreboardResponse:
      properties:
        currentPeriod:
          $ref: '#/components/schemas/CurrentPeriodResponse'
        display:
          $ref: '#/components/schemas/DisplayResponse1'
        matchScore:
          $ref: '#/components/schemas/MatchScoreResponse'
        matchState:
          $ref: '#/components/schemas/MatchStateResponse'
      type: object
    ScoreboardWithEventResponse:
      properties:
        id:
          type: string
        scoreboard:
          $ref: '#/components/schemas/ScoreboardResponse'
      type: object
    SearchRequest:
      properties:
        name:
          example: eng
          maxLength: 2147483647
          minLength: 3
          type: string
      required:
        - name
      type: object
    SearchResponse:
      properties:
        competitions:
          items:
            $ref: '#/components/schemas/CompetitionSearchResponse'
          type: array
        events:
          items:
            $ref: '#/components/schemas/EventWithPricesResponse1'
          type: array
      type: object
    SearchResponseV2:
      properties:
        competitions:
          items:
            $ref: '#/components/schemas/CompetitionSearchResponse'
          type: array
        events:
          items:
            $ref: '#/components/schemas/EventWithPricesByMarketResponse1'
          type: array
      type: object
    SeasonDto:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    SeasonResponse:
      properties:
        id:
          type: string
        matchSeconds:
          format: int32
          type: integer
        name:
          type: string
        realWorldMatchSeconds:
          format: int32
          type: integer
        rounds:
          items:
            $ref: '#/components/schemas/RoundResponse'
          type: array
        tradingTime:
          $ref: '#/components/schemas/TradingInfoResponse'
      type: object
    Selection:
      properties:
        category:
          $ref: '#/components/schemas/IdName'
        competition:
          $ref: '#/components/schemas/IdName'
        event:
          $ref: '#/components/schemas/IdName'
        id:
          format: int64
          type: integer
        inPlay:
          type: boolean
        market:
          $ref: '#/components/schemas/Market'
        name:
          type: string
        region:
          $ref: '#/components/schemas/IdName'
        starts:
          format: date-time
          type: string
      type: object
    SelectionListRequest:
      properties:
        selections:
          example:
            - 100500
          items:
            type: string
          maxItems: 100
          minItems: 1
          type: array
      required:
        - selections
      type: object
    SelectionPricingInfo:
      properties:
        averagePrice:
          format: double
          type: number
        outcome:
          type: string
        selectionId:
          format: int32
          type: integer
      type: object
    SelectionType:
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        position:
          format: int32
          type: integer
      type: object
    SelfExcludeRequest:
      properties:
        bankAccountDetails:
          $ref: '#/components/schemas/BankAccountDetails'
        password:
          type: string
        selfExcludedUntil:
          description: Self excluded until in ISO-8601 format. Default value is set
            to 99 years
          format: date-time
          type: string
      required:
        - password
      type: object
    SetPasswordRequestV3:
      properties:
        newPassword:
          description: Length at least 4 characters
          type: string
        otpCode:
          description: Received OPT code
          type: string
        phoneNumber:
          description: Phone number to update password. Also it is key for call limiter
          type: string
        rememberMe:
          description: When true token will be saved for extended time, e.g. 30 days
          type: boolean
      required:
        - newPassword
        - otpCode
        - phoneNumber
      type: object
    SettlementState:
      properties:
        live:
          format: int32
          type: integer
        settled:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
      type: object
    ShortEventResponse:
      properties:
        availableMarkets:
          items:
            type: string
          type: array
        competitionId:
          type: string
        id:
          type: string
        startTime:
          format: date-time
          type: string
      type: object
    ShortFilteredUpcomingEventsRequest:
      properties:
        categoryId:
          example: 2
          type: string
        markets:
          description: 3743 is 1X2
          example:
            - 3743
          items:
            type: string
          type: array
        take:
          example: 10
          format: int32
          maximum: 4200
          minimum: 1
          type: integer
      required:
        - categoryId
        - markets
      type: object
    ShortMarketInfo:
      properties:
        displayName:
          type: string
        handicap:
          $ref: '#/components/schemas/Handicap2'
        name:
          type: string
        typeId:
          type: string
      type: object
    ShowLiveToggle:
      properties:
        enabled:
          type: boolean
      type: object
    SignUpRequestV2:
      properties:
        password:
          maxLength: 1000
          minLength: 4
          type: string
        phoneNumber:
          type: string
      required:
        - password
        - phoneNumber
      type: object
    SmartSoftSetup:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        gameUrl:
          type: string
        host:
          type: string
        name:
          type: string
        portalName:
          type: string
        secretKey:
          type: string
      required:
        - gameUrl
        - host
        - portalName
        - secretKey
      type: object
    Sort:
      properties:
        competitionAbc:
          type: string
        competitionPriority:
          description: One of {ASC, DESC} or null, null by default
          example: ASC
          type: string
        startTime:
          description: One of {ASC, DESC} or null, ASC by default
          example: ASC
          type: string
      type: object
    SortParameter:
      properties:
        direction:
          type: string
        fieldName:
          type: string
      type: object
    SpribeSetup:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        gameListUrl:
          type: string
        gameUrl:
          type: string
        host:
          type: string
        name:
          type: string
        operator:
          type: string
        secretKey:
          type: string
      required:
        - gameUrl
        - host
        - operator
        - secretKey
      type: object
    SseEmitter:
      properties:
        timeout:
          format: int64
          type: integer
      type: object
    Standing:
      properties:
        season:
          $ref: '#/components/schemas/SeasonDto'
        standings:
          items:
            $ref: '#/components/schemas/LeagueStanding'
          type: array
      type: object
    StandingResponse:
      properties:
        competitionStandings:
          items:
            $ref: '#/components/schemas/CompetitionStandingResponse'
          type: array
        id:
          type: string
        name:
          type: string
      type: object
    StartTimeSubQuery:
      properties:
        gte:
          format: date-time
          type: string
        lt:
          format: date-time
          type: string
      type: object
    Statistics:
      properties:
        games:
          format: int32
          type: integer
        status:
          type: string
        updated:
          format: date-time
          type: string
      type: object
    StringResponse:
      properties:
        value:
          type: string
      type: object
    SuccessfulManualTransactionResponse:
      properties:
        amount:
          type: number
        currencyCode:
          type: string
        relatedId:
          type: string
        text:
          type: string
        transactionDate:
          format: date-time
          type: string
        transactionId:
          format: int64
          type: integer
        transactionType:
          enum:
            - UNKNOWN
            - BET_CASINO
            - DEPOSIT
            - WITHDRAWAL
            - BET_POOL
            - BET_SPORT
            - BET_SPORT_VIRTUAL
            - DEPOSIT_FEE
            - ROLLBACK_DEPOSIT_FEE
            - COMPENSATION_CREDIT
            - COMPENSATION_CORRECTIONAL_DEBIT
            - WITHDRAWAL_FEE
            - ROLLBACK_DEPOSIT
            - ROLLBACK_WITHDRAWAL
            - ROLLBACK_WITHDRAWAL_FEE
            - WITHDRAWAL_TAX
            - ROLLBACK_WITHDRAWAL_TAX
            - KIRON_BET
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    SupplierResponse:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        externalId:
          type: string
        image:
          type: string
        name:
          type: string
        provider:
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    SupplierToggle:
      properties:
        enabled:
          type: boolean
        uuid:
          format: uuid
          type: string
      type: object
    SupplierToggleRequest:
      properties:
        toggles:
          items:
            $ref: '#/components/schemas/SupplierToggle'
          type: array
      type: object
    SupplierUploadImageRequest:
      properties:
        provider:
          type: string
        supplierExternalId:
          type: string
      type: object
    TaxCompensation:
      properties:
        gross:
          type: number
        net:
          type: number
        tax:
          type: number
      type: object
    TeamDto:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    TemplateAddRequest:
      properties:
        cut:
          format: int32
          type: integer
        eventCount:
          format: int32
          type: integer
        mistakes:
          format: int32
          type: integer
        name:
          type: string
        prizePercentages:
          items:
            format: int32
            type: integer
          type: array
        strategy:
          type: string
      type: object
    TemplateAddResponse:
      properties:
        active:
          type: boolean
        eventCount:
          format: int32
          type: integer
        id:
          format: int64
          type: integer
        name:
          type: string
        strategy:
          type: string
        templatePrizes:
          items:
            $ref: '#/components/schemas/TemplatePrizeDto'
          type: array
      type: object
    TemplateDetailedDto:
      properties:
        active:
          type: boolean
        eventCount:
          format: int32
          type: integer
        id:
          format: int64
          type: integer
        name:
          type: string
        strategy:
          type: string
        templatePrizes:
          items:
            $ref: '#/components/schemas/TemplatePrizeDto'
          type: array
      type: object
    TemplateDto:
      properties:
        active:
          type: boolean
        eventCount:
          format: int32
          type: integer
        id:
          format: int64
          type: integer
        name:
          type: string
        strategy:
          type: string
      type: object
    TemplateEditRequest:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    TemplatePrizeDto:
      properties:
        id:
          format: int64
          type: integer
        mistakes:
          format: int32
          type: integer
        prizePercentage:
          format: int32
          type: integer
        templateId:
          format: int64
          type: integer
      type: object
    TestSessionRequest:
      properties:
        brandIdentifier:
          type: string
        provider:
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    TestSessionResponse:
      properties:
        sessionId:
          type: string
      type: object
    TicketDetailsResponse:
      properties:
        eventsDetailedDtos:
          items:
            $ref: '#/components/schemas/EventsDetailedDto'
          type: array
        freeTicketsUsed:
          format: int32
          type: integer
        hits:
          items:
            $ref: '#/components/schemas/Hits'
          type: array
        jackpotRowDtos:
          items:
            $ref: '#/components/schemas/JackpotRowDto'
          type: array
        listedTicketDto:
          $ref: '#/components/schemas/ListedTicketDto'
        prizeDetailedDtos:
          items:
            $ref: '#/components/schemas/PrizeDetailedDto'
          type: array
        tiebreakers:
          items:
            $ref: '#/components/schemas/TiebreakerUserAnswersDto'
          type: array
        tiebreakersParticipant:
          type: boolean
        tiebreakersStatistics:
          $ref: '#/components/schemas/TiebreakersStatisticsResponse'
        tiewinner:
          type: boolean
      type: object
    TicketListRequest:
      properties:
        pagination:
          $ref: '#/components/schemas/BasicPagination'
        userId:
          format: uuid
          type: string
      type: object
    TicketRow:
      properties:
        outcomes:
          items:
            format: int32
            type: integer
          type: array
        position:
          format: int32
          type: integer
      type: object
    TicketTiebreaker:
      properties:
        answers:
          items:
            $ref: '#/components/schemas/TiebreakerAnswer'
          type: array
        result:
          $ref: '#/components/schemas/TicketTiebreakerResult'
      type: object
    TicketTiebreakerResult:
      properties:
        tiebreakerWinner:
          type: boolean
      type: object
    TieLosersConfigDto:
      properties:
        minimumTieloserPayout:
          type: number
        minimumTieloserPercent:
          type: number
      type: object
    TiebreakerAdminViewDto:
      properties:
        correctAnswer:
          format: int32
          type: integer
        position:
          format: int32
          type: integer
        question:
          $ref: '#/components/schemas/TranslationDto'
        tiebreakerId:
          format: int64
          type: integer
      required:
        - question
      type: object
    TiebreakerAnswer:
      properties:
        answer:
          format: int32
          type: integer
        id:
          format: int64
          type: integer
      type: object
    TiebreakerCreationRequest:
      properties:
        defaultText:
          type: string
        position:
          format: int32
          type: integer
        translations:
          items:
            $ref: '#/components/schemas/TranslatedTextRequest'
          type: array
      type: object
    TiebreakerResultRequest:
      properties:
        id:
          format: int64
          type: integer
        result:
          format: int32
          type: integer
      required:
        - result
      type: object
    TiebreakerUserAnswersDto:
      properties:
        answer:
          format: int32
          type: integer
        correctAnswer:
          format: int32
          type: integer
        isAnswerCorrect:
          type: boolean
        position:
          format: int32
          type: integer
        question:
          type: string
        tiebreakerId:
          format: int64
          type: integer
      required:
        - question
      type: object
    TiebreakersDataRequest:
      properties:
        tiebreakers:
          items:
            $ref: '#/components/schemas/TiebreakerCreationRequest'
          type: array
        tielosersConfig:
          $ref: '#/components/schemas/TieLosersConfigDto'
      type: object
    TiebreakersDataResponse:
      properties:
        tieLosersConfig:
          $ref: '#/components/schemas/TieLosersConfigDto'
        tiebreakers:
          items:
            $ref: '#/components/schemas/TiebreakerAdminViewDto'
          type: array
      type: object
    TiebreakersStatisticsResponse:
      properties:
        tiebreakerLosers:
          format: int64
          type: integer
        tiebreakersLosersPayout:
          type: number
        tiebreakersWinners:
          format: int64
          type: integer
        tiebreakersWinnersPayout:
          type: number
      type: object
    TopUpRequest:
      properties:
        amount:
          type: number
      type: object
    TopUpTaxPreviewResponse:
      properties:
        pawaChipsTopUp:
          type: number
        taxAmount:
          type: number
        taxPercentage:
          type: number
        topUpCurrency:
          type: string
      type: object
    TradingInfoResponse:
      properties:
        end:
          format: date-time
          type: string
        start:
          format: date-time
          type: string
      type: object
    TransactionDetailsResponse:
      properties:
        amount:
          type: number
        currency:
          type: string
        dateTime:
          format: date-time
          type: string
        status:
          enum:
            - SUCCESS
            - PENDING
            - FAILURE
          type: string
      type: object
    TransactionResponse:
      properties:
        change:
          type: number
        created:
          format: date-time
          type: string
        currency:
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        relatedId:
          type: string
        relatedType:
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    TransactionResponse1:
      properties:
        balance:
          description: Used to show running balance when possible
          type: number
        change:
          type: number
        created:
          format: date-time
          type: string
        currency:
          type: string
        metadata:
          type: string
        relatedId:
          type: string
        relatedType:
          type: string
        userUuid:
          format: uuid
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    TransactionSearchRequest:
      properties:
        brandIdentifier:
          type: string
        relatedId:
          type: string
        relatedType:
          type: string
      required:
        - brandIdentifier
        - relatedId
      type: object
    TranslatedTextRequest:
      properties:
        language:
          type: string
        text:
          type: string
      type: object
    TranslationDto:
      properties:
        english:
          type: string
        translationsByLanguageCode:
          additionalProperties:
            type: string
          type: object
      type: object
    TriggersStats:
      properties:
        jobClassName:
          type: string
        jobDetailsCount:
          format: int64
          type: integer
        simpleTriggersCount:
          format: int64
          type: integer
        triggersCount:
          format: int64
          type: integer
      type: object
    TriggersSummary:
      properties:
        stats:
          items:
            $ref: '#/components/schemas/TriggersStats'
          type: array
      type: object
    TwoUpCheckTaskStatusRequest:
      properties:
        taskId:
          type: string
      type: object
    TwoUpTaskIdResponse:
      properties:
        taskId:
          type: string
      type: object
    TwoUpTaskStatusResponse:
      properties:
        status:
          type: string
      type: object
    UpdateBrandRequest:
      properties:
        active:
          type: boolean
        details:
          $ref: '#/components/schemas/BrandDetails'
        media:
          additionalProperties:
            type: string
          type: object
        multiNumbersSupported:
          type: boolean
      type: object
    UpdateConfigurationRequest:
      properties:
        amountLimit:
          description: Progressive jackpot accumulated amount limit
          exclusiveMinimum: true
          minimum: 0
          nullable: true
          type: number
        bonusPerSecond:
          description: Progressive Jackpot bonus additionally added each second
          exclusiveMinimum: false
          minimum: 0
          nullable: true
          type: number
        brandIdentifier:
          description: Progressive jackpot brand
          type: string
        dryRun:
          description: Progressive jackpot dry run indicator. Default true
          nullable: true
          type: boolean
        duration:
          description: Jackpot duration expression based on the ISO-8601 duration
            format
          nullable: true
          properties:
            nano:
              format: int32
              type: integer
            negative:
              type: boolean
            positive:
              type: boolean
            seconds:
              format: int64
              type: integer
            units:
              items:
                properties:
                  dateBased:
                    type: boolean
                  duration:
                    properties:
                      nano:
                        format: int32
                        type: integer
                      negative:
                        type: boolean
                      positive:
                        type: boolean
                      seconds:
                        format: int64
                        type: integer
                      zero:
                        type: boolean
                    type: object
                  durationEstimated:
                    type: boolean
                  timeBased:
                    type: boolean
                type: object
              type: array
            zero:
              type: boolean
          type: object
        durationOffset:
          description: Jackpot duration offset based on the ISO-8601 duration format
          nullable: true
          properties:
            nano:
              format: int32
              type: integer
            negative:
              type: boolean
            positive:
              type: boolean
            seconds:
              format: int64
              type: integer
            units:
              items:
                properties:
                  dateBased:
                    type: boolean
                  duration:
                    properties:
                      nano:
                        format: int32
                        type: integer
                      negative:
                        type: boolean
                      positive:
                        type: boolean
                      seconds:
                        format: int64
                        type: integer
                      zero:
                        type: boolean
                    type: object
                  durationEstimated:
                    type: boolean
                  timeBased:
                    type: boolean
                type: object
              type: array
            zero:
              type: boolean
          type: object
        durationOffsetValid:
          type: boolean
        durationValid:
          type: boolean
        enabled:
          description: Progressive jackpot enabled indicator. Default true
          nullable: true
          type: boolean
        highlightColor:
          description: 'Color picker for highlight colour in HEX, e.g. #00FF00'
          maxLength: 7
          minLength: 0
          type: string
        initialAmount:
          description: Progressive jackpot initial amount. Default is 0
          exclusiveMinimum: false
          minimum: 0
          nullable: true
          type: number
        jackpotSubtype:
          description: Subtype, e.g. Aviator, JetX, etc
          maxLength: 30
          minLength: 0
          type: string
        name:
          description: Progressive jackpot configuration name
          type: string
        textColor:
          description: 'Color picker for text colour in HEX, e.g. #00FF00'
          maxLength: 7
          minLength: 0
          type: string
        timeLimitCorrectlySet:
          type: boolean
        triggerConditionSet:
          type: boolean
      required:
        - brandIdentifier
        - name
      type: object
    UpdateImageRequest:
      properties:
        brands:
          description: List of brands where image is enabled. Could be empty.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    UpdateLandingPageRequest:
      properties:
        active:
          type: boolean
      type: object
    UpdateMarketTypeRequest:
      properties:
        active:
          type: boolean
      type: object
    UpdatePawapayWalletBalanceConfigurationRequest:
      properties:
        balanceLimit:
          type: number
        brandIdentifier:
          type: string
        countryCode:
          type: string
        enabled:
          type: boolean
        id:
          format: int32
          type: integer
        pawapayCorrespondent:
          type: string
      type: object
    UpdateTiebreakersResultsRequest:
      properties:
        id:
          format: int64
          type: integer
        tiebreakers:
          items:
            $ref: '#/components/schemas/TiebreakerResultRequest'
          type: array
      type: object
    UpdateUserPreferenceValueRequest:
      properties:
        clientContext:
          $ref: '#/components/schemas/ClientContext'
        note:
          type: string
        value:
          type: string
      type: object
    UpdateUserPreferencesRequest:
      properties:
        clientContext:
          $ref: '#/components/schemas/ClientContext'
        note:
          type: string
        values:
          items:
            $ref: '#/components/schemas/UserPreferencesRecord'
          type: array
      required:
        - values
      type: object
    UploadImagesRequest:
      properties:
        brands:
          description: Set of brands for which this image is active.
          items:
            type: string
          type: array
          uniqueItems: true
        gameProvider:
          type: string
        imageSize:
          enum:
            - SMALL
            - MEDIUM
            - LARGE
            - HOMEPAGE
          type: string
        providerGameId:
          type: string
      required:
        - brands
        - gameProvider
        - imageSize
        - providerGameId
      type: object
    UploadImagesResponse:
      properties:
        imageUrl:
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    UserAllDepositsRequest:
      properties:
        from:
          format: date-time
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    UserAllDepositsResponse:
      properties:
        amount:
          type: number
        created:
          format: date-time
          type: string
        currency:
          type: string
        depositId:
          format: int64
          type: integer
        depositType:
          type: string
        externalUrl:
          type: string
        method:
          enum:
            - WEB
            - USSD
            - STATEMENT_IMPORT
            - MANUAL
            - COMPENSATION
            - UNKNOWN
          type: string
        status:
          enum:
            - NEW
            - AWAITING_3RD_PARTY
            - AWAITING_USER_CONFIRMATION
            - FAILURE
            - TIMEOUT
            - SUCCESS
          type: string
      required:
        - amount
        - created
        - depositId
        - depositType
      type: object
    UserBetslipCountResponse:
      properties:
        userBetslipCount:
          format: int64
          type: integer
      type: object
    UserBetslipsResponsePaged:
      properties:
        betslips:
          items:
            $ref: '#/components/schemas/BetslipDetails'
          type: array
        hasMore:
          type: boolean
      type: object
    UserChangePasswordRequest:
      properties:
        currentPassword:
          type: string
        newPassword:
          description: Length at least 4 characters
          type: string
      required:
        - currentPassword
        - newPassword
      type: object
    UserComponentRequest:
      properties:
        brandIdentifier:
          type: string
        cacheInSeconds:
          format: int32
          type: integer
        host:
          type: string
        port:
          format: int32
          type: integer
      required:
        - brandIdentifier
        - cacheInSeconds
        - host
        - port
      type: object
    UserConnectionDeletionRequest:
      properties:
        brandIdentifier:
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    UserConnectionRequest:
      properties:
        otherPhoneNumber:
          type: string
      type: object
    UserConnectionVerificationRequest:
      properties:
        verificationCode:
          type: string
      type: object
    UserDepositResponse:
      properties:
        Amount:
          type: number
        Credited:
          format: date-time
          type: string
        DepositId:
          format: int64
          type: integer
        DepositType:
          type: string
        ExternalId:
          type: string
        ExtraData:
          type: string
        ManualDeposit:
          type: boolean
        depositUuid:
          format: uuid
          type: string
        externalUrl:
          type: string
      required:
        - Amount
        - Credited
        - DepositId
        - DepositType
        - ManualDeposit
        - depositUuid
      type: object
    UserDerivedDataByKeyResponse:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    UserDerivedDataResponse:
      properties:
        data:
          additionalProperties:
            type: string
          type: object
      type: object
    UserDetailRequest:
      properties:
        archived:
          type: boolean
        brandIdentifier:
          type: string
        userUuid:
          format: uuid
          type: string
      required:
        - brandIdentifier
        - userUuid
      type: object
    UserDetailsRequest:
      properties:
        archived:
          type: boolean
        brandIdentifier:
          type: string
        userUuids:
          items:
            format: uuid
            type: string
          type: array
      required:
        - brandIdentifier
        - userUuids
      type: object
    UserDetailsResponse:
      properties:
        accountClosed:
          type: boolean
        active:
          type: boolean
        archived:
          type: boolean
        banned:
          type: boolean
        bannedUntil:
          format: date-time
          type: string
        brandIdentifier:
          type: string
        documentNr:
          type: string
        email:
          type: string
        faceId:
          type: string
        firstname:
          type: string
        fullnameExternal:
          type: string
        fullnamesExternal:
          additionalProperties:
            $ref: '#/components/schemas/UserExternalName'
          type: object
        isoCountryCode:
          type: string
        lastname:
          type: string
        name:
          type: string
        nationality:
          type: string
        nin:
          type: string
        notes:
          items:
            $ref: '#/components/schemas/NoteResponse'
          type: array
        phoneNumber:
          type: string
        registrationDate:
          format: date-time
          type: string
        username:
          type: string
        uuid:
          format: uuid
          type: string
        values:
          additionalProperties:
            type: string
          type: object
        verified:
          type: boolean
        verifiedDate:
          format: date-time
          type: string
      type: object
    UserDetailsUpdateRequest:
      properties:
        brandIdentifier:
          description: User's brand. For v2 endpoint only
          type: string
        documentNr:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        nationality:
          type: string
        nin:
          type: string
      type: object
    UserExternalName:
      properties:
        correspondent:
          type: string
        externalName:
          type: string
        timestamp:
          format: date-time
          type: string
      type: object
    UserFailedDepositResponse:
      properties:
        Amount:
          type: number
        Created:
          format: date-time
          type: string
        DepositId:
          format: int64
          type: integer
        DepositType:
          type: string
        ExStatus:
          type: string
        ExternalId:
          type: string
        ExtraData:
          type: string
        externalUrl:
          type: string
      required:
        - Amount
        - Created
        - DepositId
        - DepositType
      type: object
    UserIdentifierRuleValueDto:
      allOf:
        - $ref: '#/components/schemas/RuleDto'
      type: object
    UserInfoPagedRequest:
      properties:
        pageNumber:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        searchTerm:
          type: string
        sorting:
          additionalProperties:
            enum:
              - ASC
              - DESC
            type: string
          type: object
        userUuid:
          format: uuid
          type: string
      type: object
    UserMessageDto:
      properties:
        additionalView:
          $ref: '#/components/schemas/AdditionalViewDto'
        ctaLink:
          type: string
        ctaText:
          type: string
        endTimeUtc:
          format: date-time
          type: string
        expired:
          readOnly: true
          type: boolean
        id:
          type: string
        messageStatus:
          enum:
            - QUEUED
            - DELIVERED
            - SEEN
            - CLICKED
          type: string
        messageText:
          type: string
        messageType:
          type: string
        startTime:
          deprecated: true
          format: int64
          type: integer
        startTimeUtc:
          format: date-time
          type: string
      type: object
    UserMessageForAdminDto:
      properties:
        ctaLink:
          type: string
        endTime:
          format: date-time
          type: string
        messageStatus:
          enum:
            - QUEUED
            - DELIVERED
            - SEEN
            - CLICKED
          type: string
        startTime:
          format: date-time
          type: string
        texts:
          items:
            $ref: '#/components/schemas/MessageTextDto'
          type: array
      type: object
    UserMessageForAdminViewRequest:
      properties:
        pageNumber:
          example: 0
          format: int32
          type: integer
        userUuid:
          format: uuid
          type: string
      required:
        - userUuid
      type: object
    UserMessageForAdminViewResponse:
      properties:
        currentPage:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        userMessages:
          items:
            $ref: '#/components/schemas/UserMessageForAdminDto'
          type: array
      type: object
    UserMessageStatusUpdateRequest:
      properties:
        id:
          example: 507f191e810c19729de860ea
          type: string
        messageStatus:
          enum:
            - QUEUED
            - DELIVERED
            - SEEN
            - CLICKED
          type: string
      type: object
    UserMessageViewRequest:
      properties:
        pageNumber:
          format: int32
          type: integer
      type: object
    UserMessageViewResponse:
      properties:
        currentPage:
          format: int32
          type: integer
        newMessagesCount:
          format: int64
          type: integer
        totalPages:
          format: int64
          type: integer
        userMessages:
          items:
            $ref: '#/components/schemas/UserMessageDto'
          type: array
      type: object
    UserNoteCreateRequest:
      properties:
        brandIdentifier:
          description: User's brand. For v2 endpoint only
          type: string
        text:
          type: string
        userUUID:
          format: uuid
          type: string
      type: object
    UserNoteResponse:
      properties:
        created:
          format: date-time
          type: string
        createdBy:
          format: uuid
          type: string
        note:
          type: string
        userUuid:
          format: uuid
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    UserNotesRequest:
      properties:
        brandIdentifier:
          description: User's brand. For v2 endpoint only
          type: string
        skip:
          format: int32
          type: integer
        take:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        userUUID:
          format: uuid
          type: string
      required:
        - skip
        - take
        - userUUID
      type: object
    UserPaymentSummary:
      properties:
        firstDeposit:
          format: date-time
          type: string
        lastDeposit:
          format: date-time
          type: string
        totalDepositsAmount:
          type: number
        totalDepositsCount:
          format: int32
          type: integer
        totalWithdrawalsAmount:
          type: number
        totalWithdrawalsCount:
          format: int32
          type: integer
      type: object
    UserPayoutResponse:
      properties:
        Amount:
          type: number
        PayoutRequestId:
          deprecated: true
          format: int32
          type: integer
        PayoutType:
          type: string
        RequestTime:
          format: date-time
          type: string
        Status:
          type: string
        StatusName:
          type: string
        externalReferenceId:
          type: string
        externalUrl:
          type: string
        reason:
          type: string
        withdrawalUuid:
          type: string
      required:
        - Amount
        - PayoutRequestId
        - PayoutType
        - RequestTime
        - withdrawalUuid
      type: object
    UserPreferencesRecord:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    UserSearchDetailsResponse:
      properties:
        brandIdentifier:
          type: string
        lastSignIn:
          format: date-time
          type: string
        name:
          example: alex.lexus
          type: string
        phoneNumber:
          type: string
        registrationDate:
          format: date-time
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    UserSearchRequest:
      properties:
        poolTicketId:
          format: int64
          type: integer
      type: object
    UserSearchResponse:
      properties:
        found:
          type: boolean
        userUuid:
          format: uuid
          type: string
      type: object
    UserSearchResponse1:
      properties:
        brandIdentifier:
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    UserSessionResponse:
      properties:
        expiration:
          type: string
      type: object
    UserStatementRequest:
      properties:
        currency:
          description: 'If not provided default currency will be used. Format: ISO
            4217 (3 characters) and upper case'
          type: string
        nextPageId:
          description: Id for next page that is taken from previous search response.
            Should be null on first request
          type: string
        pageSize:
          description: How many transactions to load. Default value is 50, max is
            1000
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
      type: object
    UserStatisticsResponse:
      properties:
        wonTotal:
          type: string
      type: object
    UserTicketsResponse:
      properties:
        hasMore:
          type: boolean
        tickets:
          items:
            $ref: '#/components/schemas/ListedTicketDto'
          type: array
      type: object
    UserTransactionDetails:
      properties:
        amount:
          type: number
        currencyCode:
          type: string
        datetime:
          format: date-time
          type: string
        id:
          format: int64
          type: integer
        type:
          type: string
      type: object
    UserTransactionsExportRequest:
      properties:
        brandIdentifier:
          type: string
        currency:
          type: string
        from:
          format: date
          type: string
        limit:
          format: int32
          type: integer
        to:
          format: date
          type: string
        userUuid:
          format: uuid
          type: string
      type: object
    UserTransactionsRequest:
      properties:
        nextPageId:
          description: Id for next page that is taken from previous search response.
            Should be null on first request
          type: string
        pageSize:
          description: How many transactions to load. Default 100
          format: int32
          minimum: 1
          type: integer
        query:
          $ref: '#/components/schemas/Query1'
      required:
        - query
      type: object
    UserTransactionsResponse:
      properties:
        nextPageId:
          description: Id for next page if there are more transactions to load.
          type: string
        transactions:
          items:
            $ref: '#/components/schemas/TransactionResponse1'
          type: array
      type: object
    UserUuidResponse:
      properties:
        userUuid:
          type: string
      type: object
    UserUuidsResponse:
      properties:
        userUuids:
          items:
            type: string
          type: array
      type: object
    UsersSearchRequest:
      properties:
        archived:
          type: boolean
        query:
          $ref: '#/components/schemas/Query3'
        queryNullOrEmpty:
          type: boolean
      type: object
    ValidationRequest:
      properties:
        brandIdentifier:
          description: Brand identifier of scenario.
          example: betpawa-uganda
          type: string
        fieldsToCheck:
          additionalProperties:
            description: Fields for validation as a key and their data as a value.
            example: '{"identifier", "555555"}'
            type: string
          description: Fields for validation as a key and their data as a value.
          example: '{"identifier", "555555"}'
          type: object
        scenarioName:
          description: The name of the validation scenario to be used.
          example: signUp
          type: string
      type: object
    VerifyAndAuthenticateRequest:
      properties:
        phoneNumber:
          description: User's phone number
          type: string
        verificationCode:
          description: Verification code from message
          type: string
      required:
        - phoneNumber
        - verificationCode
      type: object
    VerifyOtpRequest:
      properties:
        otpCode:
          description: Received OPT code
          type: string
        phoneNumber:
          description: Phone number to update password. Also it is key for call limiter
          type: string
      required:
        - otpCode
        - phoneNumber
      type: object
    VerifyOtpResponse:
      properties:
        limits:
          $ref: '#/components/schemas/LimitsResponse'
        valid:
          type: boolean
      type: object
    VideoStreamResponse:
      properties:
        accessToken:
          type: string
        expirationDate:
          format: date-time
          type: string
        outletAuthKey:
          type: string
      type: object
    View:
      properties:
        marketTypes:
          description: 'Remove other markets from response. If this field is null
            we use ''query.marketTypes''. If this field & ''query.marketTypes'' is
            null we keep only main markets. If this field is empty we remove all markets. '
          example:
            - 3743
          items:
            type: string
          maxItems: 7
          minItems: 0
          type: array
      type: object
    VirtualInfo:
      properties:
        roundId:
          format: int64
          type: integer
        roundName:
          type: string
        seasonId:
          format: int64
          type: integer
        seasonName:
          type: string
      type: object
    WazdanSetup:
      properties:
        brandIdentifier:
          type: string
        enabled:
          type: boolean
        host:
          type: string
        license:
          type: string
        licenseBackend:
          type: string
        name:
          type: string
        operator:
          type: string
        partnerCode:
          type: string
        proxyUrl:
          type: string
        secretKey:
          type: string
        taxSystem:
          format: int32
          type: integer
      required:
        - host
        - license
        - licenseBackend
        - operator
        - partnerCode
        - proxyUrl
        - secretKey
      type: object
    WidgetResponse:
      properties:
        id:
          type: string
        type:
          type: string
      type: object
    WithdrawClientFundsRequest:
      properties:
        brandIdentifier:
          example: betpawa-uganda
          type: string
        compensationAmount:
          description: 'Max value=''0.999''

            ''compensationAmount'' is expected when withdrawal-option requires integer
            amount and client has non-integer balance. ''compensationAmount'' is expected
            to round-up the balance.

            '
          example: '0.68'
          type: string
        currency:
          example: UGX
          type: string
        msisdn:
          example: '256787276868'
          type: string
        note:
          description: Text for user-note, which will be visible for admins.
          type: string
        userUuid:
          example: 00112233-4455-6677-8899-aabbccddeeff
          type: string
        withdrawAmount:
          description: 'When withdrawal-option allows non-integer amounts > ''withdrawAmount''
            is allowed to be non-integer. And no ''compensationAmount'' is expected.

            When withdrawal-option requires integer amount and client has integer
            balance > integer ''withdrawAmount'' is required. And no ''compensationAmount''
            is expected.

            When withdrawal-option requires integer amount and client has non-integer
            balance > integer ''withdrawAmount'' is required. But ''compensationAmount''
            is expected to round-up the balance.

            '
          example: '12.34'
          type: string
        withdrawalTypeName:
          example: UGANDA_PAWAPAY_AIRTEL
          type: string
      required:
        - brandIdentifier
        - currency
        - msisdn
        - userUuid
        - withdrawAmount
        - withdrawalTypeName
      type: object
    WithdrawClientFundsResponse:
      properties:
        failureReason:
          description: Empty in case of success
          example: You cannot withdraw more money than you have on your account
          type: string
        request:
          $ref: '#/components/schemas/WithdrawClientFundsRequest'
        withdrawalId:
          description: Positive in case of success
          example: 1
          format: int32
          type: integer
      type: object
    WithdrawClientFundsSuggestion:
      properties:
        allActiveWithdrawalTypes:
          description: Alternative values for 'withdrawalTypeName' in creation-request
          example: '[UGANDA_PAWAPAY_AIRTEL, ...]'
          items:
            description: Alternative values for 'withdrawalTypeName' in creation-request
            example: '[UGANDA_PAWAPAY_AIRTEL, ...]'
            type: string
          type: array
        brandIdentifier:
          description: Expected in creation-request
          example: betpawa-uganda
          type: string
        compensationAmount:
          description: Expected in creation-request
          example: '0.68'
          type: string
        currency:
          description: Expected in creation-request
          example: UGX
          type: string
        msisdn:
          description: Expected in creation-request
          example: '256787276868'
          type: string
        preferredWithdrawalTypeName:
          description: Default value for 'withdrawalTypeName' in creation-request
          example: UGANDA_PAWAPAY_AIRTEL
          type: string
        userUuid:
          description: Expected in creation-request
          example: 00112233-4455-6677-8899-aabbccddeeff
          type: string
        withdrawAmount:
          description: Expected in creation-request
          example: '13'
          type: string
      type: object
    WithdrawalProcessFailure:
      properties:
        reason:
          type: string
        withdrawalRequestUuid:
          format: uuid
          type: string
      type: object
    WithdrawalRequestStatusUpdateRequest:
      properties:
        newStatus:
          type: string
        uuid:
          format: uuid
          type: string
      type: object
    WithdrawalTypeReplacement:
      properties:
        forAmountStrictlyLessThan:
          type: number
        from:
          type: string
        to:
          type: string
        valid:
          type: boolean
      type: object
    WithdrawalTypeReplacingProperties:
      properties:
        featureDisabled:
          type: boolean
        replacements:
          items:
            $ref: '#/components/schemas/WithdrawalTypeReplacement'
          type: array
      type: object
    WithdrawalUuidsDto:
      properties:
        uuids:
          items:
            format: uuid
            type: string
          type: array
      type: object
    WithdrawalsResponseV2Dto:
      properties:
        failures:
          items:
            $ref: '#/components/schemas/WithdrawalProcessFailure'
          type: array
        successfulWithdrawalUuids:
          items:
            format: uuid
            type: string
          type: array
      type: object
    ZonesRequest:
      properties:
        competitions:
          description: Tournaments / Competition / Leagues
          example:
            - 11965
            - 12546
          items:
            type: string
          maxItems: 42
          minItems: 1
          type: array
        regions:
          description: Countries / Regions
          example:
            - 448
            - 449
          items:
            type: string
          maxItems: 18
          minItems: 1
          type: array
      type: object
  securitySchemes:
    Brand:
      in: header
      name: x-pawa-brand
      type: apiKey
    Token:
      in: cookie
      name: x-pawa-token
      type: apiKey
info:
  description: "## Api-Gateway-Web\n\nApi-gateway is responsible for validating all\
    \ incoming requests.  \nTo use our api each request should have a header named\
    \ \"**x-pawa-brand**\" henceforth referred as **Brand**.  \nBrand is a unique\
    \ identifier for BetPawa clients, that will be provided by us.  \n\nFor user authentication\
    \ refer to **user service** documentation.  \nAfter user has been logged in, he\
    \ is provided with a header \"**x-pawa-token**\" henceforth referred as **Token**.\
    \  \nToken is bind to user session, therefore all following user request must\
    \ have it.\n\n\n### Error Handling\nAll **unsuccessful** API calls to any service\
    \ will be wrapped into **ErrorResponse**.  \nExample response:  \n{ \"error\"\
    : 11102, \"uuid\": \"12bd2a1c-c359-4192-8755-a1504bcf02bf\", \"params\": null,\
    \ \"payload\": null }\n\n**Missing or invalid token will result in following error\
    \ codes in ErrorResponse:**\n* TOKEN_NOT_PROVIDED = 11100;\n* TOKEN_IS_INVALID\
    \ = 11102;\n* TOKEN_IS_REVOKED = 11103;\n* ACCESS_DENIED = 11104;  \n* BRAND_HEADER_IS_MISSING\
    \ = 11105;\n\nEach service has its own error code mapping\n\n#### RequestRateLimiter\n\
    Some endpoint may have [RequestRateLimiter](https://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/gatewayfilter-factories/requestratelimiter-factory.html).\n\
    This filer limits load to the endpoint. After increasing the limit the **HTTP\
    \ 429 - Too Many Requests** response will be returned\n\nConfiguration \n\n* Limits\
    \ configuration are configured on api routes `helm/api-gateway/gateway-paths/services`.\n\
    RequestRateLimiter filter can be removed completely to deactivate limiter for\
    \ some route. \n\n* The limited endpoint load is distributed according the `routeAndBrandKeyResolver.`\n\
    It allows to set limit for route ID and provided brand identifier (x-pawa-brand\
    \ header) pair \n\n* Also, extended http cals metric is provided. The metric **http_server_requests_branded**\
    \ will have status code, route ID and brand identifier in tags\n\n## Cashout\n\
    \nThis service is responsible for cashout related operations.\n\n### Error Handling\n\
    All **unsuccessful** API calls to the service will be wrapped into **ErrorResponse**.\
    \  \nExample response:  \n```json\n{\n  \"error\":\"FOB_ODDS_CHANGED\",\n  \"\
    uuid\":\"12bd2a1c-c359-4192-8755-a1504bcf02bf\",\n  \"params\":null,\n  \"payload\"\
    :null\n}\n```\n\n**Possible error codes in ErrorResponse (and their descriptions):**\n\
    * `INVALID_BETSLIP`: could not find betslip.\n* `BET_ODDS_CHANGED`: bet's odds\
    \ have changed.\n* `UNKNOWN_SERVER_ERROR`: unknown error.\n* `CASHOUT_WRONG_BETSLIP_STATUS`:\
    \ wrong betslip status for cashout.\n* `CASHOUT_BETSLIP_LOST`: betslip lost. Cannot\
    \ cashout.\n* `CASHOUT_BETSLIP_WON`: betslip won. Cannot cashout.\n* `CASHOUT_WRONG_BETSLIP`:\
    \ wrong betslip. It's not cashoutable.\n* `CASHOUT_ILLEGAL_PAYOUT_VALUE`: illegal\
    \ payout value.\n* `CASHOUT_PRICES_OFFLINE`: current probabilities are unavailable.\n\
    * `CASHOUT_NOT_AVAILABLE`: cashout is disabled.\n* `CASHOUT_OFFER_EXPIRED`: cashout\
    \ offer is expired.\n* `CASHOUT_BETSLIP_SETTLED`: betslip is settled.  \n* `CASHOUT_INVALID_ID`:\
    \ invalid id for cashout entity, \n* `CASHOUT_ALL_ITEMS_SETTLED`: all items are\
    \ settled, \n* `CASHOUT_OFFER_EXCEEDED_ALLOWED_CHANGE`: cashout offer exceeded\
    \ allowed change, \n* `CASHOUT_OFFER_LESS_THAN_MINIMUM_OFFER`: cashout offer less\
    \ than minimum offer;\n\n## Classifier-Brand-Web\n\n<p>Classifier brand server\
    \ collects information regarding brand-jurisdiction entities</p>\n\n## Feed-Classifier\n\
    \nFeed Classifier (ex Market Classifier) is responsible for getting market types/market\
    \ groups/selections/periods/categories and related \nproperties\n\n### Error Handling\n\
    All **unsuccessful** API calls to the service will be wrapped into **ErrorResponse**.\n\
    ```json\n{\n  \"error\": \"FC_REQUEST_PARAM_WRONG_TYPE\",\n  \"uuid\": \"40d43cc0-7ca6-4f27-b0d1-628fa6e5df9b\"\
    ,\n  \"params\": [\n    \"f4a1dd74-4302-486a-af9b-de492663c6d0\"\n  ],\n  \"payload\"\
    : null\n}\n```\n\n* `FC_REQUEST_PARAM_WRONG_TYPE`: Value was of wrong type, expected:\
    \ Integer, actual: Boolean\n* `FC_REQUEST_SORTING_INVALID_FIELD`: The requested\
    \ sorting field: Invalid does not exist\n* `FC_REQUEST_SORTING_INVALID_DIRECTION`:\
    \ The requested sorting direction: Invalid is not valid\n* `FC_MARKET_TYPE_SNAPSHOT_NOT_FOUND`:\
    \ Market type snapshot not found with id: 3000\n* `FC_MARKET_TYPE_SNAPSHOTS_ALL_NOT_FOUND`:\
    \ Market type snapshots all not found\n* `FC_MARKET_TYPES_ALL_NOT_FOUND`: Market\
    \ types all not found\n* `FC_MARKET_TYPES_NOT_FOUND_BY_CATEGORY`: Market types\
    \ not found by categoryId: 1000\n* `FC_MARKET_TYPES_NOT_FOUND_BY_CATEGORY_AND_IDS`:\
    \ Market types not found by categoryId: 1000 and ids: 4000\n* `FC_MARKET_TYPES_NOT_FOUND_BY_CATEGORY_AND_GROUP`:\
    \ Market types not found by categoryId: 1000 and marketGroupId: 2000\n\n** Exception\
    \ handler also will log error description in service logs\n\n## Fixed-Odds-Bets\n\
    \nThis service is responsible for sports betting.\nAll request to the fixed odds\
    \ bets required authentication by user or admin.\n\n### Error Handling\nAll **unsuccessful**\
    \ API calls to the service will be wrapped into **ErrorResponse**.  \nExample\
    \ response:\n```json\n{\n  \"error\": \"UNKNOWN\",\n  \"uuid\": \"9ce5a78a-b864-4502-bfe8-56a12d0ea056\"\
    ,\n  \"params\": null,\n  \"payload\": null\n}\n```\n\n**Possible error codes\
    \ in ErrorResponse (and their descriptions):**\n* `FOB_REQUIRED_PARAMS_NOT_SET`:\
    \ request does not have required fields.\n* `FOB_INVALID_BETSLIP`: betslip does\
    \ not exist\n* `FOB_INVALID_BET_ITEM`: betslip item does not exist\n* `FOB_ALREADY_ON_CANCELLATION`:\
    \ betslip cancellation has already been requested\n* `FOB_ALREADY_CANCELLED`:\
    \ betslip is already cancelled\n* `FOB_NO_CANCELLATION_REQUEST`: beslip has no\
    \ any cancellation request\n* `FOB_WRONG_VERDICT`: cancellation wrong verdict\n\
    * `FOB_QUEUE_IS_FULL`: servers too busy\n* `FOB_PRICE_NOT_FOUND`: selectionId\
    \ does not exist\n* `FOB_UNKNOWN_SERVER_ERROR`: unexpected server error\n* `TRANSACTION_CLIENT_EMPTY_RESPONSE`:\
    \ bet stake transaction has not been created\n* `GATEWAY_TIMEOUT`: service is\
    \ not available\n\n## Gaming-Integration-Web\n\n_Integration service with game\
    \ providers_ \n\n## API Protocol to provide\nThe betPawa system supports the following\
    \ REST API, using JSON protocol to pass arguments via POST requests.\nThe basic\
    \ authentication is based on a base64 encoded string of \"username:password\"\
    . If authentication fails, http\nstatus 401 will be returned with an empty body.\n\
    \nAuthentication header example:\n\n`Authorization: Basic d2F6ZGFuOnN0YWdpbmc=`<br>\n\
    `Content-Type: application/json; charset=UTF-`\n\n## Implementation\nThe betPawa\
    \ system having its own token which identifies user account should provide service\
    \ with the following URIs:\n\n* [POST] / authenticate \u2013 authenticate token\
    \ and get player info from the betPawa wallet\n* [POST] / bet \u2013 debit player\
    \ account with the bet amount\n* [POST] / rollback \u2013 rollback stake after\
    \ unknown status or failed getStake\n* [POST] / win \u2013 credit player account\
    \ with win amount or close game round\n* [POST] / game-close \u2013 called when\
    \ game application has been closed\n* [POST] / funds \u2013 get information on\
    \ current player credit\n\n## Idempotency of transactions\n\nSome methods pass\
    \ transactionId value which should be used to make transactions idempotent,\n\
    ie if a method is called with the same transactionId as seen before, the same\
    \ result as last time should be returned.\nNo new transaction or wallet amount\
    \ change should occur.\n\nThe following methods calls should be idempotent:\n\
    * bet\n* rollback\n* win\n\n## Response statuses\nResponses defined below have\
    \ a status field which should contain method execution status:\n\n* 0 if successful\n\
    * \\>0 if unsuccessful, considered an error\n\nThe following statuses will be\
    \ mapped to messages in game applications:\n\nSTATUS MESSAGE\n\n* (1) Session\
    \ not found\n* (2) Insufficient funds\n* (3) User is blocked\n\nAll other statuses\
    \ will result in \u2018Connection problem\u2019 or Technical problem message.\n\
    \nAll requests which result in a response which has at least status field are\
    \ considered successful and\ndo not trigger rollbackStake request and are also\
    \ not repeated (pending transactions). For a\ntransaction to cause a rollback\
    \ or repeat, request must result in a timeout, empty or un-processable\nresponse\
    \ or a response without status.\n\n## Identity-Web\n\n**Error Codes**\n\nINVALID_BRAND(\"\
    Invalid brand {}.\", 1041)  \nPASSWORD_LENGTH_MISMATCH(\"Your password must be\
    \ at least {} characters long.\", 1003)  \nPASSWORD_PATTERN_MISMATCH(\"Your password\
    \ not strong enough\")  \nINVALID_PHONE_NUMBER(\"{} is not a valid phone number.\"\
    , 1002)  \nANY_OPERATIONS_NOT_ALLOWED_FROM_CARRIER__ALLOWED_CARRIERS(\"Sorry,\
    \ we do not accept signups from your carrier. We currently support only signups\
    \ from {}\", 1016)  \nLANDLINE_NUMBERS_ARENT_ACCEPTED(\"Landline numbers aren't\
    \ accepted. Please enter your mobile number.\", 1043)  \nINVALID_USER_BRAND_IDENTIFIER(\"\
    User's data can't be matched with country and brand\", 1058)  \nFILED_CANT_BE_NULLABLE(\"\
    Please fill out all the fields.\", 1026)  \nFIELD_DOES_NOT_CONTAIN_PROPOSED_VALUE(\"\
    The field does not contain the proposed values\")  \nYOU_MUST_BE_OLDER_THAN(\"\
    You must be older than {}.\")  \nVALIDATION_SCENARIO_NAME_ALREADY_EXIST(\"Scenarios\
    \ name already exist\")  \nVALIDATION_SCENARIO_NOT_FOUND(\"Scenario not found\"\
    )  \nVALIDATION_SCENARIOS_RULES_CONFIGURATION_NOT_ALLOWED(\"Wrong configuration\
    \ of scenario.fields.rule\")  \nNON_EXISTING_PHONE_OPERATORS_FOR_BRAND(\"Phone\
    \ operators for brand {} don't exist.\")  \nCANNOT_UPDATE_PREFIX_FOR_NON_EXISTING_PHONE_NETWORK(\"\
    Cannot update prefix for non-existing phone network {}.\")  \nPREFIX_ALREADY_EXISTS_IN_ANOTHER_NETWORK(\"\
    Cannot add prefix {} to network {}, it already exists in another network {}\"\
    )  \n\n### Scenario example\nThere is a truncated example of simple **signUp**\
    \ scenario with defined fields and their rules in **betpawa-uganda** brand \n\
    ````\n{\n  \"name\": \"signUp\",\n  \"brandIdentifier\": \"betpawa-uganda\",\n\
    \  \"fields\": [\n    { \"fieldName\": \"firstName\" },\n    { \"fieldName\":\
    \ \"lastName\" },\n    { \"fieldName\": \"identificationType\",\n      \"rules\"\
    : [\n        { \"validatorType\": \"oneOfRule\", \"oneOf\": [ \"NIN\" ]}\n   \
    \   ]\n    },\n    { \"fieldName\": \"phoneNumber\",\n      \"rules\": [\n   \
    \     { \"validatorType\": \"carriersBasedPhoneNumberRule\" }\n      ]\n    }\n\
    \  ]\n}\n````\n\n### Rules\nPossible rules for validation can be found in **RuleDto**\
    \ definition.\n\n## Ledger-Web\n\n<p>API service for managing user balance</p>\n\
    \n### Web Sockets\nUser balances are propagated via websockets (Live-Data service)\n\
    event-key: **user_balance**\n\n## Messaging-Web\n\n<p>API service for targeted\
    \ or broadcast mailing to users within one brand. Can be used for operational,\
    \ marketing, research and other purposes.</p><p>Service provides only \nHTTP endpoints\
    \ and can be called only by logged in users/admins.</p>\n<p>Two types of messages\
    \ are supported (Operational and Marketing).</p>\n\nService supports multiple\
    \ languages. Language is selected by providing **x-pawa-language** in the header\
    \ of request.\nFor storing user preferred language check **Preference** service.\n\
    \n**Possible error codes used in ErrorResponse:**   \nINVALID_USER_IDS_FILE(66001,\
    \ \"Invalid user ids file. Please upload %s file\"),   \nUSER_IDS_WITH_BROADCAST_MESSAGE(66002,\
    \ \"Broadcast message should not contain user ids\"),  \nMISSING_USER_IDS_FOR_DIRECT_MESSAGE(66003,\
    \ \"User ids are missing for direct message\")\n\n## Preference-Web\n\nPreference\
    \ service is providing:\n* User derived statistics like logins count, last login,\
    \ kyc verified etc.\n* User related static data like phone number, signed up date\
    \ etc.\n* Brand related data like supported languages, currency, country etc.\n\
    \nUser derived data endpoints can be used to save any user related data that is\
    \ needed which will be stored as key:value format.\nOne of predefined keys in\
    \ user derived data is **language** which stores users preferred language. \n\
    Language is stored in [ISO 639-1 format](https://en.wikipedia.org/wiki/ISO_639-1).\
    \ Its value may be used on backend, \nfor example sending sms about forgotten\
    \ password. If value is not set then default language is English (code = **en**).\n\
    \n## Progressive-Jackpot\n\n<p>Progressive jackpot API service</p>\n\n### Jackpot\
    \ live updates\nThis service produces jackpot balance updates to [live-data](https://github.com/AlienGain/live-data)\n\
    service. Live data has specific keys for data filtering.<br>\nUse <b>progressive_jackpot</b>\
    \ key to get all live jackpot updates or include <b>brandIdentifier</b> to filter\
    \ out jackpots for required brand.\n\n## Region\n\nThis service is used to manage\
    \ Regions and sub-region information. Aka a country can have small districts and\
    \ at the same time can be part of a bigger geographical location. \nIt exposes\
    \ endpoints to get region/subregions or country by http.\nExposes by gRPC service->rpc\
    \ methods for get regions names or get regions with filtering: byNameLike, byParent,\
    \ \npossible exclude virtuals \n\n### Error Handling\nAll **unsuccessful** API\
    \ calls to the service will be wrapped into **ErrorResponse**.  \nExample response:\
    \  \n```json\n{\n  \"error\": \"REGION_COUNTRY_NOT_FOUND\",\n  \"uuid\": \"40d43cc0-7ca6-4f27-b0d1-628fa6e5df9b\"\
    ,\n  \"params\": [\n    \"1321\"\n  ],\n  \"payload\": null\n}\n```\n\n**Possible\
    \ error codes in ErrorResponse (and their descriptions):**\n* `REGION_COUNTRY_NOT_FOUND`:\
    \ when cannot find country by provided id.\n* `REGION_NOT_FOUND`: when cannot\
    \ find region by provided id\n\n## Sportsbook-Virtual\n\nAPI service providing\
    \ events related data from internal feed-provider to client.\n\nAlmost all data\
    \ that we provide is brand or lang specific.\nPlease provide headers `x-pawa-brand`\
    \ or `x-pawa-language` if needed.\n\n### Error Handling\n\nAll **unsuccessful**\
    \ API calls to the service will be wrapped into **ErrorResponse**.  \nExample\
    \ response:\n\n```json\n{\n  \"error\": \"UNKNOWN\",\n  \"uuid\": \"9ce5a78a-b864-4502-bfe8-56a12d0ea056\"\
    ,\n  \"params\": [\n    null\n  ],\n  \"payload\": {\n    \"additionalProp1\"\
    : {}\n  }\n}\n```\n\n## Sportsbook\n\nAPI service providing events related data\
    \ from internal feed-provider to client.\n\nAlmost all data that we provide is\
    \ brand or lang specific. \nPlease provide headers `x-pawa-brand` or `x-pawa-language`\
    \ if needed.\n\n## Data streaming\n\nSportsbook provides data to `live-data service\
    \ via kafka, that is available for sockets streaming.\nRight now there are these\
    \ sockets you can use: \n\n##### Odds data streaming (provides live event odds):\n\
    \n###### All odds\n```text\nkey-pattern: \"brandIdentifier_{}_sportsbook_live_event_id_{}\"\
    \nkey-example: \"brandIdentifier_aliengain-estonia_sportsbook_live_event_id_event123\"\
    \n```\n\n###### Only odds from market types that are used in filters `component-data.sportsbookConfigurator.marketTypeFilters`\n\
    ```text\nkey-pattern: \"brandIdentifier_{}_sportsbook_short_live_event_id_{}\"\
    \nkey-example: \"brandIdentifier_aliengain-estonia_sportsbook_short_live_event_id_event123\"\
    \n```\n\n```json\n{\n  \"eventId\": \"event123\",\n  \"odds\": [\n    {\n    \
    \  \"id\": \"selection1\",\n      \"price\": \"2.5\"\n    },\n    {\n      \"\
    id\": \"selection2\",\n      \"price\": \"1.8\"\n    }\n  ],\n  \"totalMarketCount\"\
    : 1\n}\n```\n\n##### Result data streaming (provides with event result):\n\n```text\n\
    key-pattern: \"sportsbook_results_event_id_{}\"\nkey-example: \"sportsbook_results_event_id_event456\"\
    \n```\n\n```json\n{\n  \"eventId\": \"event456\",\n  \"resultsResponse\": {\n\
    \    \"display\": {\n      \"minute\": \"90+3'\"\n    },\n    \"participantPeriodResults\"\
    : [\n      {\n        \"participant\": {\n          \"type\": \"team-1\"\n   \
    \     },\n        \"periodResults\": [\n          {\n            \"periodId\"\
    : 1,\n            \"result\": \"2-1\",\n            \"type\": \"final\"\n    \
    \      }\n        ]\n      },\n      {\n        \"participant\": {\n         \
    \ \"type\": \"team-2\"\n        },\n        \"periodResults\": [\n          {\n\
    \            \"periodId\": 1,\n            \"result\": \"1-2\",\n            \"\
    type\": \"final\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n#####\
    \ Scoreboard data streaming (provides with live scoreboard data updates):\n\n\
    ```text\nkey-pattern: \"sportsbook_scoreboard_event_id_{}\"\nkey-example: \"sportsbook_scoreboard_event_id_event789\"\
    \n```\n\n```json\n{\n  \"eventId\": \"event789\",\n  \"scoreboardResponse\": {\n\
    \    \"matchState\": {\n      \"minute\": 45,\n      \"second\": 30\n    },\n\
    \    \"matchScore\": {\n      \"scoreHome\": \"1\",\n      \"scoreAway\": \"0\"\
    \n    },\n    \"display\": {\n      \"minute\": 45\n    },\n    \"currentPeriod\"\
    : {\n      \"historicId\": 2\n    }\n  }\n}\n```\n\n##### NOTE:\n- if u use odds\
    \ data with data from the controller that returns an event by id then u probably\
    \ should stick to the following logic when receiving data from the stream:\n \
    \ - remove/hide the selection/market from eventById if we do not have it in received\
    \ data\n  - reload the entire event if eventById does not have the odd that was\
    \ received \n- scoreboard data is deprecated and will be removed\n- result data\
    \ same object that we have in event response and if some improvements are coming\
    \ they will be changing simultaneously\n  - result data currently in betta testing\
    \ (2024-04-25) will be available in a couple of month. \n\n## Error Handling\n\
    \nAll **unsuccessful** API calls to the service will be wrapped into **ErrorResponse**.\
    \  \nExample response:\n\n```json\n{\n  \"error\": \"UNKNOWN\",\n  \"uuid\": \"\
    9ce5a78a-b864-4502-bfe8-56a12d0ea056\",\n  \"params\": [\n    null\n  ],\n  \"\
    payload\": {\n    \"additionalProp1\": {}\n  }\n}\n```\n\n**Possible error codes\
    \ used in ErrorResponse:**\n\n- `SPORTSBOOK_NOT_FOUND`: Event by id %s is not\
    \ found\n- `SPORTSBOOK_MARKET_NOT_FOUND`: Market type: %s not found\n- `SPORTSBOOK_PRICING_GROUP_NOT_FOUND`:\
    \ Competition by id %s is not found\n- `SPORTSBOOK_REGION_NOT_FOUND`: Region by\
    \ id %s is not found\n- `SPORTSBOOK_CATEGORY_NOT_FOUND`: Category by id %s is\
    \ not found\n- `SPORTSBOOK_WRONG_SELECTION`: {BOOKING_NUMBER ERROR} One or more\
    \ selections are not found\n- `SPORTSBOOK_SPORTRADAR_MISCONFIGURATION`: Sportradar\
    \ is not configured properly (SportRadar video stream)\n- `SPORTSBOOK_PERFORM_ERROR`:\
    \ Perform autherization got an error (Perform video stream)\n- `SPORTSBOOK_DUPLICATE_EVENT_ID`\
    \ {BOOKING_NUMBER ERROR}: Booking number may have same event twice or more\n-\
    \ `BOOKING_CODE_NOT_FOUND` {BOOKING_NUMBER ERROR}: The booking code can't be found,\
    \ because it doesn't exist or expired\n  after all games was ended\n- `BOOKING_CODE_INVALID`\
    \ {BOOKING_NUMBER ERROR} Invalid format of code\n\n## Hot-Price-Http\n\n\n\n##\
    \ User-Web\n\nUser entities represent accounts in the system.\n\nHaving a user\
    \ is mandatory to access most of the existing endpoints. Such endpoints are marked\
    \ as required `Token` that is provided on authentication in the system.\n\nPhone\
    \ number is used as user identifier.\n\nGeneral portal customers users are created\
    \ via `api/user/v1/users` endpoint and will always have a role `USER` that limits\
    \ their access to only `/api/{service}/v1/` endpoints\n\nIt is not possible to\
    \ remove User from the system, but user account can be closed or banned to revoke\
    \ their access to the system.\n\n  \n**Error codes:**  \nACCOUNT_NOT_FOUND (\"\
    User %s not found\")  \nINVALID_PHONE_NUMBER (\"%s is not a valid phone number\"\
    )  \nPASSWORD_REQUIREMENTS_MISMATCH (\"Your password must be at least 4 characters\
    \ long\")  \nACCOUNT_EXISTS (\"Your account already exists\")  \nACCOUNT_CLOSED\
    \ (\"Account is closed.\")  \nACCOUNT_SELF_EXCLUDED (\"User is self-excluded until:\
    \ %s\")  \nACCOUNT_TEMPORARILY_SUSPENDED (\"Your account has been suspended. Please\
    \ contact us for any inquiry.\")  \nACCOUNT_NOT_VERIFIED (\"Your account %s is\
    \ not verified\")  \nWRONG_USERNAME_OR_PASSWORD (\"Wrong username or password\"\
    )  \nACCOUNT_BANNED (\"You have been banned, please contact support for further\
    \ information.\")  \nNEW_PASSWORD_MUST_BE_DIFFERENT (\"New password cannot be\
    \ the same as old one\")  \nPASSWORD_INVALID (\"Current password is not correct\"\
    )  \nVERIFICATION_CODE_MUST_BE_NUMBER (\"One-Time Password must be a number\"\
    )  \nVERIFICATION_CODE_ALREADY_USED (\"One-Time Password has already been used\
    \ once\")  \nVERIFICATION_CODE_EXPIRED (\"One-Time Password has expired\")  \n\
    WRONG_NAME_INPUT (\"Empty names not allowed\")  \nNIN_NOT_VALID (\"Please check\
    \ that you have entered your National Identification (NIN) number correctly. If\
    \ you still encounter this error, please contact our Support\")  \nWRONG_UG_NAME_INPUT\
    \ (\"Invalid name: only letters, spaces, hyphens, and apostrophes are allowed.\
    \ 2-40 symbols allowed.\")  \nWRONG_DOCUMENT_NUMBER (\"Please check that you have\
    \ entered your document number correctly. Only numbers, and letters are allowed.\
    \ If you continue to encounter this error, please contact our Support.\")  \n\
    USER_IDENTIFIER_IS_MISSING (\"Identifier is missing\")  \nUSER_NOTE_NOT_FOUND\
    \ (\"User note %s is not found\")  \nGENERIC_ATTEMPTS_EXCEEDED (\"Attempts exceeded\"\
    )  \nLOGINS_ATTEMPTS_EXCEEDED (\"Login attempts exceeded\")  \nPASSWORD_RESET_ATTEMPTS_EXCEEDED\
    \ (\"Password reset attempts exceeded\")  \nREQUEST_OTP_ATTEMPTS_EXCEEDED (\"\
    OTP request attempts exceeded\")  \nOTP_TEST_ATTEMPTS_EXCEEDED (\"OTP test attempts\
    \ exceeded\")  \nINVALID_USER_BRAND_IDENTIFIER (\"Phone number should match user's\
    \ country and brand\")  \nPERSONAL_DATA_ATTEMPTS_EXCEEDED (\"KYC verification\
    \ attempts exceeded\")  \nMULTIPLE_EXCEPTION_WRAPPER (\"More than one exception\
    \ occurred\")  \nBANK_DETAILS_ARE_MISSING (\"Bank name and account number must\
    \ be provided\")  \nDATE_SHOULD_BE_IN_FUTURE (\"Date should be in the future\"\
    )  \nOTHER_USER_ALREADY_CONNECTED (\"Other user already connected\")  \nUSER_ALREADY_VERIFIED\
    \ (\"User already verified\")  \nUSERS_MAX_CONNECTIONS_REACHED (\"User reached\
    \ max number of connections\")  \nUSERS_NON_UNIQUE (\"Users should be unique\"\
    )  \nUSERS_NOT_CONNECTED (\"Users are not connected\")  \nUSER_CONNECTION_CREATION_ATTEMPTS_EXCEEDED\
    \ (\"User connection creation attempts exceeded\")  \nUSER_CONNECTION_VERIFICATION_ATTEMPTS_EXCEEDED\
    \ (\"User connection verification attempts exceeded\")  \nVERIFY_ACCOUNT_ATTEMPTS_EXCEEDED\
    \ (\"Verify account attempts exceeded\")  \nPASSWORD_CANNOT_MATCH_OTP_CODE (\"\
    The password cannot match the OTP code\")  \nUSER_ALREADY_ARCHIVED (\"User %s\
    \ is already archived\")  \nUSER_ALREADY_ACTIVE (\"User %s is already active\"\
    )\n\n## Virtuals\n\nThe virtuals service is responsible for generating events,\
    \ odds, results, push seasons/rounds, simulate, enable leagues \nand standing\
    \ for our virtual betting product.\n\nRequests to the virtuals are looks like:\n\
    * *requires authentication by admin* - /admin/, /admin/v1/leagues/\n* *public*\
    \ - /front-page/, /in-play/, /standing/\n\n### Error Handling\nAll **unsuccessful**\
    \ API calls to the service will be wrapped into **ErrorResponse**:\n```json\n\
    {\n  \"error\": \"SEASON_NOT_FOUND\",\n  \"uuid\": \"e5e2e090-cef3-4d76-a2ea-ba22b68f648c\"\
    ,\n  \"params\": [\n    \"43610\"\n  ],\n  \"payload\": null\n}\n```\n\n**Possible\
    \ error codes in ErrorResponse (and their descriptions):**\n* `SEASON_NOT_FOUND`\
    \ : Season not found for *seasonId*\n* `SEASON_AND_ROUND_ID_NOT_FOUND` : Season\
    \ with round not found for *seasonId* and *roundId*\n* `GAME_ROUND_INPLAY_NOT_FOUND`\
    \ : Inplay game round not found\n* `GAME_ROUND_NOT_FOUND` : Game round not found\
    \ for *gameRoundId*\n* `LEAGUE_ID_NOT_EXIST` : League with id does not exist for\
    \ *leagueId*"
  title: Api-Gateway
  version: 0.891.0
openapi: 3.0.3
paths:
  /api/auth/v1/logout:
    post:
      operationId: logout
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: User logout, invalidates token which is taken from the cookie
      tags:
        - Auth
  /api/auth/v1/token/validate:
    get:
      operationId: validate
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Validates token from the cookie, valid token means that user is logged
        in to the system.
      tags:
        - Auth
  /api/brand/v1/countries/{brand-name}:
    get:
      operationId: getCountries
      parameters:
        - in: path
          name: brand-name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CountryResponse'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Returns countries where brand operates.
      tags:
        - Brands API
  /api/cashout/v2/confirm:
    post:
      operationId: confirmCashoutOffer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferStatusResponse'
          description: Cashout offer confirmed
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Cashout offer not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Cashout Confirm
      tags:
        - User Cashout API V2
  /api/cashout/v2/request-offer:
    post:
      operationId: requestCashout_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferResponse'
          description: Cashout offer requested
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Cashout Offer Request
      tags:
        - User Cashout API V2
  /api/cashout/v2/request-offer-auto:
    post:
      operationId: autoPollingRequestCashout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferResponse'
          description: Cashout offer requested
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Cashout Request Auto-polling
      tags:
        - User Cashout API V2
  /api/cashout/v2/request-offer-polling:
    post:
      operationId: longPollingRequestCashout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferResponse'
          description: Cashout offer requested
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Cashout Request Long-polling
      tags:
        - User Cashout API V2
  /api/cashout/v2/status/{status-id}:
    get:
      operationId: getConfirmationStatus
      parameters:
        - in: path
          name: status-id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferStatusResponse'
          description: Offer status found
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Offer status not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Get confirmation status
      tags:
        - User Cashout API V2
  /api/cashout/v3/auto/request-offer:
    post:
      operationId: requestCashout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferResponse'
          description: Cashout offer requested
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Auto-Cashout Offer Request
      tags:
        - User Cashout API V2
  /api/fixed-odds-bets/v1/betslip/pending:
    get:
      operationId: getPendingBetslips
      parameters:
        - in: query
          name: skip
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - in: query
          name: take
          required: false
          schema:
            default: 50
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBetslipsResponsePaged'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Incorrect arguments
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected server error
      summary: List of pending betslips (paged) for the authenticated user
      tags:
        - Betslip API
  /api/fixed-odds-bets/v1/betslip/pending/count:
    get:
      operationId: getPendingBetslipCount
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBetslipCountResponse'
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected server error
      summary: Count of pending REAL betslips
      tags:
        - Betslip API
  /api/fixed-odds-bets/v1/betslip/settled:
    get:
      operationId: getSettledBetslips
      parameters:
        - in: query
          name: skip
          required: true
          schema:
            format: int32
            type: integer
        - in: query
          name: take
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBetslipsResponsePaged'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Incorrect arguments
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected server error
      summary: List of settled betslips (paged) for the authenticated user
      tags:
        - Betslip API
  /api/fixed-odds-bets/v1/betslip/virtual:
    get:
      operationId: getVirtualBetslips
      parameters:
        - in: query
          name: skip
          required: true
          schema:
            format: int32
            type: integer
        - in: query
          name: take
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBetslipsResponsePaged'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Incorrect arguments
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected server error
      summary: List of virtual betslips (paged) for the authenticated user
      tags:
        - Betslip API
  /api/fixed-odds-bets/v1/betslip/{id}:
    get:
      operationId: getBetslip
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: language
          required: true
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetslipDetails'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Incorrect arguments
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected server error
      summary: Get betslip details by ID
      tags:
        - Betslip API
  /api/integration/v1/aggregator/games:
    get:
      operationId: getGameList_1
      parameters:
        - in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseGameResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Returns ordered list of available games. Ordered by global position.
        Response is cached for 1 minute
      tags:
        - Games
    post:
      operationId: getGameList_2
      parameters:
        - in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GamesSortRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseGameResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Returns paginated and sorted list of available games
      tags:
        - Games
  /api/integration/v1/aggregator/games/{categoryUuid}:
    get:
      operationId: getGameListByCategory
      parameters:
        - in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            type: string
        - in: path
          name: categoryUuid
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseGameResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Returns category ordered list of available games. Ordered by category
        position. Response is cached for 1 minute
      tags:
        - Games
    post:
      operationId: getGameListByCategory_1
      parameters:
        - in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            type: string
        - in: path
          name: categoryUuid
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GamesSortRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseGameResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Returns paginated and sorted list of available games by category
      tags:
        - Games
  /api/integration/v1/conversion/cash-in:
    post:
      operationId: cashIn
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseBalanceResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Converts betPawaChips to currency of the brand identifier
      tags:
        - Currency Converter
  /api/integration/v1/conversion/cash-in/tax/preview:
    get:
      operationId: taxPreview
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashInTaxPreviewResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Provides preview of taxes in case of user decides to cash out
      tags:
        - Currency Converter
  /api/integration/v1/conversion/top-up:
    post:
      operationId: topUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopUpRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseBalanceResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Converts currency of the brand identifier to betPawaChips
      tags:
        - Currency Converter
  /api/integration/v1/conversion/top-up/tax/preview:
    post:
      operationId: topUpTaxPreview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopUpRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopUpTaxPreviewResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Provides preview of taxes in case of user decides to cash out
      tags:
        - Currency Converter
  /api/integration/v1/session/revoke:
    post:
      operationId: revokeUserSessions
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Revokes all casino sessions for logged in user
      tags:
        - Sessions
  /api/integration/v2/launch-url:
    post:
      operationId: launchGameV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameLauncherRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameLauncherResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      tags:
        - Game Launch Provider
  /api/ledger/v1/funds/balance:
    get:
      operationId: getBalance
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get balance of default currency. If balance is negative zero amount
        will be returned
      tags:
        - User Balance
    post:
      operationId: getBalance1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalanceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get balance for requested currency, always returns true balance (even
        negative)
      tags:
        - User Balance
  /api/ledger/v1/funds/transactions/statement:
    post:
      operationId: getTransactionStatement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStatementRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTransactionsResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get transactions of logged in user with running balance
      tags:
        - User Transactions
  /api/ledger/v1/funds/transfer:
    post:
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundsTransferRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Transfer funds between accounts that belong to the same user
      tags:
        - User Transactions
  /api/messaging/v1/messages/list:
    post:
      operationId: getUserMessages
      parameters:
        - in: header
          name: x-pawa-language
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMessageViewRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMessageViewResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get specified page of user messages with sign-up date validation. Page
        size is 15 messages
      tags:
        - User Messaging
    put:
      operationId: updateUserMessageStatuses
      parameters:
        - in: header
          name: x-pawa-language
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/UserMessageStatusUpdateRequest'
              type: array
        required: true
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Set new status for user messages
      tags:
        - User Messaging
  /api/messaging/v2/messages/active:
    get:
      operationId: getUserActiveMessagesV2
      parameters:
        - in: header
          name: x-pawa-language
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountAndAdditionalViewMessagesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get counter for unread messages and messages with configured 'additional
        view' for the currently logged-in user with sign-up date validation
      tags:
        - User Messaging
  /api/payment/v1/deposit-details:
    get:
      operationId: getDepositDetails
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TransactionDetailsResponse'
                type: array
          description: OK
      summary: Get deposit details for logged in user for last 90 days
      tags:
        - user-transactions-controller
  /api/payment/v1/deposit/chargeable-fee:
    get:
      operationId: calculateChargeableFee
      parameters:
        - in: query
          name: amount
          required: true
          schema:
            type: number
        - in: query
          name: depositType
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositChargeableFeeResponse'
          description: OK
      summary: Calculate chargeable deposit fee
      tags:
        - Deposit Init
  /api/payment/v1/deposit/fee:
    get:
      operationId: getDepositFee
      parameters:
        - in: query
          name: amount
          required: true
          schema:
            type: number
        - in: query
          name: depositType
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositCompensatedFeeResponse'
          description: OK
      summary: Get compensatable deposit fee amount and compensation size
      tags:
        - Deposit Init
  /api/payment/v1/deposit/list/recent:
    get:
      operationId: findRecentDeposits
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCollectionUserTransactionDetails'
          description: OK
      summary: Get user deposits for the last 30 days
      tags:
        - user-transactions-controller
  /api/payment/v1/deposit/options:
    get:
      operationId: getDepositOptions
      parameters:
        - in: header
          name: userUuid
          required: false
          schema:
            type: string
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseListDepositOptionDto'
          description: OK
      tags:
        - Deposit Options
  /api/payment/v1/deposit/request/create:
    post:
      operationId: initDepositWithName
      parameters:
        - in: header
          name: userUuid
          required: true
          schema:
            type: string
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitDepositRequestWithDepositTypeName'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitDepositResponse'
          description: OK
      summary: Initiate deposit with deposit type name
      tags:
        - Deposit Init
  /api/payment/v1/deposit/request/{id}:
    get:
      operationId: getDepositStatus
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: userUuid
          required: true
          schema:
            type: string
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitDepositStatusResponse'
          description: OK
      summary: Get status for deposit init by id
      tags:
        - Deposit Init
  /api/payment/v1/deposit/type/details/{depositTypeName}:
    get:
      operationId: getDepositTypeDetails
      parameters:
        - in: path
          name: depositTypeName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositTypeDetailsDto'
          description: OK
      summary: Get deposit type details by name
      tags:
        - Deposit Type
  /api/payment/v1/deposit/type/{name}/tier-fees:
    get:
      operationId: getDepositTypeTierFees
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/DepositTypeTierFeesDto'
                type: array
          description: OK
      summary: Get all deposit tiered fee compensation's
      tags:
        - Deposit Type
  /api/payment/v1/digmo/balance/{userUuid}:
    get:
      operationId: getBalance2
      parameters:
        - in: path
          name: userUuid
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DigmoUserBalanceResponse'
          description: OK
      summary: Get user balance in digmo
      tags:
        - Digmo integration
  /api/payment/v1/digmo/invitation-link:
    post:
      operationId: invitationLink
      parameters:
        - in: header
          name: userUuid
          required: true
          schema:
            format: uuid
            type: string
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigmoInvitationLinkRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DigmoInvitationLinkResponse'
          description: OK
      summary: Find active else generate invitation link
      tags:
        - Digmo integration
  /api/payment/v1/payout-details:
    get:
      operationId: getPayoutDetails
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TransactionDetailsResponse'
                type: array
          description: OK
      summary: Get payout details for logged in user for last 90 days
      tags:
        - user-transactions-controller
  /api/payment/v1/payout/request/disabled/process:
    post:
      operationId: processDisabledTypeRequest
      parameters:
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePayoutCreationResponse'
          description: OK
      summary: Process payout request for disabled type
      tags:
        - Payout Request
  /api/payment/v1/payout/request/process:
    post:
      operationId: processNewRequest
      parameters:
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePayoutCreationResponse'
          description: OK
      summary: Process payout request for active type
      tags:
        - Payout Request
  /api/payment/v1/payout/request/tax:
    get:
      operationId: calculateTax
      parameters:
        - in: query
          name: amount
          required: true
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBigDecimal'
          description: OK
      summary: Calculate tax for the payout
      tags:
        - Payout Request
  /api/payment/v1/withdrawal/list/recent:
    get:
      operationId: findRecentWithdrawals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCollectionUserTransactionDetails'
          description: OK
      summary: Get user withdrawals for the last 30 days
      tags:
        - user-transactions-controller
  /api/payment/v2/payout/type/active:
    get:
      operationId: getPayoutMethodsForCurrentUser
      parameters:
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePayoutMethodsResponseV2'
          description: OK
      summary: Get active payout methods
      tags:
        - Payout Type
  /api/payment/v2/payout/type/disabled:
    get:
      operationId: getDisabledPayoutMethodsForCurrentUser
      parameters:
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePayoutMethodsResponseV2'
          description: OK
      summary: Get disabled payout methods
      tags:
        - Payout Type
  /api/payment/v2/withdrawal/cancel:
    post:
      operationId: cancelWithdrawal
      parameters:
        - in: header
          name: userUuid
          required: true
          schema:
            format: uuid
            type: string
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelWithdrawalV2'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBoolean'
          description: OK
      summary: Cancel withdrawal by UUID
      tags:
        - Withdrawal request
  /api/payment/v2/withdrawal/pending:
    get:
      operationId: getPendingPayoutsV2
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseListPendingPayoutsResponseV2'
          description: OK
      summary: Get pending withdrawals
      tags:
        - Withdrawal request
  /api/pool/v1/place-bet:
    post:
      description: Allows a user to place a bet on a pool. Requires user authentication.
      operationId: placeBet
      parameters:
        - description: 'Device type from which the bet is placed. Possible values: WEB,
          SMART_PHONE, FEATURE_PHONE, USSD, POINT_OF_SALES, APP'
          in: header
          name: deviceType
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceBetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTicketResponse'
          description: Bet successfully placed
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Request has invalid entity or insufficient funds
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized - User authentication required
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error response
      security:
        - Brand: []
      summary: Place bet for the pool
      tags:
        - public
        - Place Bet Controller
  /api/pool/v1/pool/active:
    get:
      description: Retrieves a paginated list of currently active pools. Supports
        pagination with skip and take parameters.
      operationId: actives
      parameters:
        - description: Number of records to skip for pagination
          example: 0
          in: query
          name: skip
          required: false
          schema:
            default: 0
            format: int32
            minimum: 0
            type: integer
        - description: Number of records to take (page size)
          example: 10
          in: query
          name: take
          required: false
          schema:
            default: 10
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivePoolsResponse'
          description: List of active pools successfully retrieved
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error response
      security:
        - Brand: []
      summary: Get list of active pools
      tags:
        - Pool Controller
        - public
  /api/pool/v1/pool/resulted:
    get:
      description: Retrieves a paginated list of pools that have been resulted (completed).
        Supports pagination with skip and take parameters.
      operationId: results
      parameters:
        - description: Number of records to skip for pagination
          example: 0
          in: query
          name: skip
          required: false
          schema:
            default: 0
            format: int32
            minimum: 0
            type: integer
        - description: Number of records to take (page size)
          example: 10
          in: query
          name: take
          required: false
          schema:
            default: 10
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultedPoolsResponse'
          description: List of resulted pools successfully retrieved
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error response
      security:
        - Brand: []
      summary: Get list of resulted pools
      tags:
        - Pool Controller
        - public
  /api/pool/v1/pool/{id}:
    get:
      description: Retrieves detailed information about a specific pool by its ID.
        The jurisdiction is determined from the user context.
      operationId: get
      parameters:
        - description: The unique identifier of the pool
          in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolResponse'
          description: Pool details successfully retrieved
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Pool not found for the given ID and jurisdiction
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error response
      security:
        - Brand: []
      summary: Get pool by ID
      tags:
        - Pool Controller
        - public
  /api/pool/v1/ticket:
    get:
      description: Retrieves a paginated list of tickets for the authenticated user.
        Supports pagination with skip and take parameters.
      operationId: listTickets
      parameters:
        - description: Number of records to skip for pagination
          example: 0
          in: query
          name: skip
          required: false
          schema:
            default: 0
            format: int32
            minimum: 0
            type: integer
        - description: Number of records to take (page size)
          example: 8
          in: query
          name: take
          required: false
          schema:
            default: 8
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTicketsResponse'
          description: List of user's tickets successfully retrieved
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized - User authentication required
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error response
      security:
        - Brand: []
      summary: List user's tickets
      tags:
        - public
        - Ticket Controller
  /api/pool/v1/ticket/{id}:
    get:
      description: Retrieves detailed information about a specific ticket by its ID
        for the authenticated user.
      operationId: getTicket
      parameters:
        - description: The unique identifier of the ticket
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTicketResponse'
          description: Ticket details successfully retrieved
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Ticket not found or invalid ticket ID
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized - User authentication required
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error response
      security:
        - Brand: []
      summary: Get ticket details by ID
      tags:
        - public
        - Ticket Controller
  /api/preference/v1/component-data:
    post:
      operationId: componentData
      parameters:
        - in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentDataRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/JsonNode'
                type: object
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Aggregates and returns initial settings for front-end and user derived
        data as JSON object
      tags:
        - Component data
  /api/preference/v1/preregistration:
    put:
      operationId: preregisterUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreregistrationRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Stores data of preregistered users in new markets
      tags:
        - Preregistration
  /api/preference/v1/user-derived-data:
    get:
      operationId: getUserDerivedData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDerivedDataResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Return all derived data for current user
      tags:
        - User derived data
    put:
      operationId: addUserDerivedData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserDerivedDataRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Add or update user derived value. If key exists then value will be
        overridden
      tags:
        - User derived data
  /api/preference/v1/user-derived-data/{data-key}:
    get:
      operationId: getUserDerivedDataByKey
      parameters:
        - in: path
          name: data-key
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDerivedDataByKeyResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The specified resource was not found
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Return derived data by key for current user
      tags:
        - User derived data
  /api/progressive-jackpot/v1/jackpot/active:
    get:
      operationId: findActiveJackpots
      parameters:
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActiveJackpotsResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
                type: object
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
                type: object
          description: Server Error
      tags:
        - jackpot-controller
  /api/progressive-jackpot/v1/jackpot/last-ended:
    post:
      operationId: findEndedJackpots
      parameters:
        - in: header
          name: x-pawa-brand
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JackpotsRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListResponseLastEndedJackpotResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
                type: object
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
                type: object
          description: Server Error
      tags:
        - jackpot-controller
  /api/region/v1/countries/{id}:
    get:
      operationId: getCountry
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDto'
          description: Returns country info for a specific id
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Country by provided id not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Get a country by ID
      tags:
        - regions-controller
  /api/region/v1/regions/{id}:
    get:
      operationId: getRegion
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionDto'
          description: Returns region info for a specific id
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Region by provided id not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Get a region by ID
      tags:
        - regions-controller
  /api/region/v2/regions/{id}/subregions:
    get:
      operationId: getSubRegions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int32
            type: integer
        - in: query
          name: skip
          required: false
          schema:
            default: 0
            format: int32
            minimum: 0
            type: integer
        - in: query
          name: take
          required: false
          schema:
            default: 20
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseRegionDto'
          description: Returns a list of subregions by provided region id sorted by
            region name
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Subregions by parent id not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unexpected service error
      summary: Get a list of subregions by region ID sorted by region name
      tags:
        - RegionController (v2)
  /api/sportsbook/v1/results/list/all:
    get:
      operationId: getAll_11
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseResultsWithEventResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get all Results
      tags:
        - Results controller (V1)
  /api/sportsbook/v1/video-stream/perform/authorize:
    post:
      operationId: getActiveRegionsByCategoryId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformAuthorizationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoStreamResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: 'Authorize user to view '
      tags:
        - Perform authorization controller (V1)
  /api/sportsbook/v1/video-stream/sportradar/authorize:
    post:
      operationId: getJwtToken
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JWTResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      tags:
        - Perform authorization controller (V1)
  /api/sportsbook/v2/booking-number:
    post:
      operationId: createBookingNumberV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionListRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCodeResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Creates new Booking-Number by list of selection ids (V2)
      tags:
        - Booking Number Controller (V2)
  /api/sportsbook/v2/booking-number/{booking-code}:
    get:
      description: Gets booking number selections by booking code and returns selection
        details
      operationId: getBookingNumberSelectionsV2
      parameters:
        - example: 1A11A1A
          in: path
          name: booking-code
          required: true
          schema:
            example: 1A11A1A
            type: string
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseEventSelectionTupleResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get booking number selection details
      tags:
        - Booking Number Controller (V2)
  /api/sportsbook/v2/prices/full/list:
    post:
      operationId: getPricesWithEventInfoBySelections1
      parameters:
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionListRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseEventSelectionTupleResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get a list of events by selections IDs
      tags:
        - PriceController (V2)
  /api/sportsbook/v2/prices/list:
    post:
      operationId: getPricesBySelections1
      parameters:
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionListRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseOddsSelectionResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get a list of prices by selections IDs
      tags:
        - PriceController (V2)
  /api/sportsbook/v2/search:
    post:
      operationId: search
      parameters:
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseV2'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Search for events and competitions
      tags:
        - Search controller (V2)
  /api/sportsbook/v2/search/popular:
    get:
      operationId: popular
      parameters:
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseV2'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Search for events and competitions
      tags:
        - Search controller (V2)
  /api/sportsbook/v3/categories/list:
    get:
      operationId: getAllCategories
      parameters:
        - in: query
          name: q
          required: false
          schema:
            $ref: '#/components/schemas/CategoriesRequest'
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllCategoriesResponseV3'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get all category & regions for requested data
      tags:
        - Categories controller (V3)
  /api/sportsbook/v3/categories/list/{category-id}:
    get:
      operationId: getAllCategoriesAndOnlyOneWithRegions
      parameters:
        - example: 2
          in: path
          name: category-id
          required: true
          schema:
            example: '2'
            maxLength: 36
            minLength: 1
            type: string
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllCategoriesResponseV3'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get all category & regions for requested data
      tags:
        - Categories controller (V3)
  /api/sportsbook/v3/events/lists/by-queries:
    get:
      operationId: getListOfEventsByCriteria_1
      parameters:
        - in: query
          name: q
          required: true
          schema:
            $ref: '#/components/schemas/EventsBatchRequest'
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventsBatchResponseV3'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get a event with prices by queries request
      tags:
        - Events Controller (V3)
  /api/sportsbook/v3/events/{event-id}:
    get:
      operationId: getEventById
      parameters:
        - in: path
          name: event-id
          required: true
          schema:
            type: string
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get a event with prices by ID
      tags:
        - Events Controller (V3)
  /api/sportsbook/virtual/v1/events/list/by-round/{round-id}:
    get:
      operationId: getByRoundId_1
      parameters:
        - example: 1
          in: path
          name: round-id
          required: true
          schema:
            example: '1'
            type: string
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseEventWithPricesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get virtual events by round
      tags:
        - Virtual Controller
  /api/sportsbook/virtual/v1/seasons/list/actual:
    get:
      operationId: getActual
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseSeasonResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get actual seasons
      tags:
        - Season Controller
  /api/sportsbook/virtual/v1/seasons/list/past:
    get:
      operationId: getAll1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseSeasonResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get all seasons
      tags:
        - Season Controller
  /api/sportsbook/virtual/v1/standings/by-season/{season-id}:
    get:
      operationId: getBySeasonId
      parameters:
        - example: 1
          in: path
          name: season-id
          required: true
          schema:
            example: '1'
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandingResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get actual seasons
      tags:
        - Standings Controller
  /api/sportsbook/virtual/v2/events/list/by-round/{round-id}:
    get:
      operationId: getByRoundId
      parameters:
        - example: 1
          in: path
          name: round-id
          required: true
          schema:
            example: '1'
            type: string
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseEventWithPricesByMarketResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get virtual events by round
      tags:
        - Virtual Controller
  /api/sportsbook/virtual/v2/prices/full/list:
    post:
      operationId: getPricesWithEventInfoBySelections
      parameters:
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionListRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseEventSelectionTupleResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get a list of events by selections IDs
      tags:
        - PriceController (V2)
  /api/sportsbook/virtual/v2/prices/list:
    post:
      operationId: getPricesBySelections
      parameters:
        - example: en
          in: header
          name: x-pawa-language
          required: false
          schema:
            default: en
            example: en
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionListRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericListResponseOddsSelectionResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Access Denied
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Get a list of prices by selections IDs
      tags:
        - PriceController (V2)
  /api/user/v1/connection:
    post:
      operationId: createUnverifiedConnections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConnectionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedUsersResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Create connection to other user
      tags:
        - Connected Accounts Management
  /api/user/v1/connection/verify:
    post:
      operationId: createVerifiedConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConnectionVerificationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedUsersResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Verify connection to other user
      tags:
        - Connected Accounts Management
  /api/user/v1/password:
    post:
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangePasswordRequest'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: User change password. In password update form
      tags:
        - User Account Management
  /api/user/v1/self-exclude:
    put:
      operationId: selfExclude
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfExcludeRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Self excludes user. User will be logged out and wont be able to log
        in.
      tags:
        - User Account Management
  /api/user/v1/switch:
    post:
      operationId: authenticate_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectedUserAuthenticationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
          description: Successful Operation. x-pawa-token will be set to cookie. This
            token should be provided for all further requests
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requests suspended for 60 minutes for the user because of 10
            unsuccessful attempts.
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Authenticates connected user based on the token of existing user. Endpoint
        will limit requests for user for 60 minutes in case of 10 unsuccessful attempts.
      tags:
        - Connected Accounts Management
  /api/user/v3/authenticate:
    post:
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseV3'
          description: Successful Operation. x-pawa-token will be set to cookie. This
            token should be provided for all further requests
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requests suspended for 60 minutes for the user because of 10
            unsuccessful attempts.
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Authenticates user based on provided credentials. Endpoint will limit
        requests for user for 60 minutes in case of 10 unsuccessful attempts.
      tags:
        - Authentication
  /api/user/v3/password/request-otp:
    post:
      operationId: requestOtpCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequestV3'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitsCollectionResponse'
          description: Successful Operation.
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Endpoint will limit requests for user for some time in case
            of too many attempts.
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: User requests it's password to be reset. One-time password will be
        send according to selected method
      tags:
        - User Account Management
  /api/user/v3/password/update-and-authenticate:
    post:
      operationId: updatePasswordAndAuthenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRequestV3'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseV3'
          description: Successful Operation. x-pawa-token will be set to cookie. This
            token should be provided for all further requests
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Endpoint will limit requests for user for some time in case
            of too many attempts.
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Authenticates user based on provided OTP code. Endpoint will limit
        requests for user.
      tags:
        - User Account Management
  /api/user/v3/password/verify-otp:
    post:
      operationId: verifyOtpCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOtpRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyOtpResponse'
          description: Successful Operation.
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Endpoint will limit requests for user for some time in case
            of too many attempts.
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Checks received OTP code for validity
      tags:
        - User Account Management
  /api/user/v3/request-verification-code:
    post:
      operationId: requestVerificationCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequestV3'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitsCollectionResponse'
          description: Successful Operation.
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Endpoint will limit requests for user for some time in case
            of too many attempts.
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: User requests his verification code from list of available methods.
        The message with code will be send by selected method
      tags:
        - User Account Management
  /api/user/v3/signup-and-authenticate:
    post:
      description: 'Create user with specified phone number and password.

        If sign up is successful and verification isn''t required - response will
        return status code 201 with header `x-pawa-token` and `userUuid` in response
        body.

        If user already exists in system and entered valid password - system will
        automatically login user and return the same response as successful sign up.


        If account verification is required - response will return status code 400
        and error ACCOUNT_NOT_VERIFIED.

        To verify user account `/api/user/v3/request-verification-code` endpoint must
        be used with user phone nuber and desired OTP delivery method.

        Then complete verification here `/api/user/v3/verify-and-authenticate` by
        entering OTP code. If new code is accepted then endpoint return the same response
        as successful sign up.


        To retrieve OTP - user''s last sms could be retrieved on develop `https://api.develop.qa.verekuu.com/sms-for-user/{phoneNumber}`
        and on test `https://api.test.qa.verekuu.com/sms-for-user/{phoneNumber}`.
        E.g. - `curl https://api.test.qa.verekuu.com/sms-for-user/+2348167467552`

        '
      operationId: signUpAndAuthenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequestV2'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseV3'
          description: Successful Operation
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Mandatory fields are missing, validation failure or phone number
            verification is required.
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Creates and automatically logs in user in the system.
      tags:
        - Authentication
  /api/user/v3/verify-and-authenticate:
    post:
      operationId: verifyAndAuthenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyAndAuthenticateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseV3'
          description: Successful Operation.
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Endpoint will limit requests for user for some time in case
            of too many attempts.
        '401':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  params:
                    items:
                      type: string
                    type: array
                  payload:
                    additionalProperties:
                      type: object
                    type: object
                  uuid:
                    type: string
          description: Server Error
      summary: Completes user's phone number verification by code send in message
      tags:
        - User Account Management
  /api/virtuals/front-page:
    get:
      operationId: getFrontPage
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrontPage'
          description: Returns front page with seasons and game rounds
      summary: Generate current time front-page of seasons and game rounds
      tags:
        - FrontPageController
  /api/virtuals/in-play:
    get:
      operationId: getCurrent
      parameters:
        - in: query
          name: arg0
          required: true
          schema:
            enum:
              - EN
              - FR
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InPlay'
          description: Returns current inplay game-round
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Inplay game round not found
      summary: Get current inplay game-round
      tags:
        - InPlayController
  /api/virtuals/in-play/{gameRoundId}:
    get:
      operationId: getGameRound
      parameters:
        - in: path
          name: gameRoundId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: arg1
          required: true
          schema:
            enum:
              - EN
              - FR
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InPlay'
          description: Returns current inplay game-round for a requested game-round
            id
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Game round not found
      summary: Get current inplay game-round for a requested game-round id
      tags:
        - InPlayController
  /api/virtuals/standing/matchUps/{seasonId}:
    get:
      operationId: getMatchUps
      parameters:
        - in: path
          name: seasonId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: arg1
          required: true
          schema:
            enum:
              - EN
              - FR
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchUps'
          description: Returns match-ups(teams, rounds, leagues) for a requested season
            id
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Season not found
      summary: Get match-ups for a requested season id
      tags:
        - StandingController
  /api/virtuals/standing/matchUps/{seasonId}/{roundId}:
    get:
      operationId: getMatchUps_1
      parameters:
        - in: path
          name: seasonId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: roundId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: arg2
          required: true
          schema:
            enum:
              - EN
              - FR
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchUps'
          description: Returns match-ups(teams, rounds, leagues) for a requested season
            id and game-round id
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Season with round not found
      summary: Get match-ups for a requested season id and game-round id
      tags:
        - StandingController
  /api/virtuals/standing/{seasonId}:
    get:
      operationId: getStanding
      parameters:
        - in: path
          name: seasonId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: arg1
          required: true
          schema:
            enum:
              - EN
              - FR
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standing'
          description: Returns season standings for a requested season id
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Season not found
      summary: Get standing for a requested season id
      tags:
        - StandingController
  /payment/digmo/callback/invitation/update:
    post:
      operationId: invitationUpdated
      parameters:
        - in: header
          name: X-SIGNATURE
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
      tags:
        - digmo-callback-controller
  /payment/digmo/callback/user/update:
    post:
      operationId: userUpdated
      parameters:
        - in: header
          name: X-SIGNATURE
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
      tags:
        - digmo-callback-controller
security:
  - Brand: []
    Token: []
servers:
  - description: Generated server url
    url: http://api-gateway-web:8080
tags:
  - description: Managing user active sessions
    name: Session
  - description: Managing user sessions
    name: Auth
  - description: Additional preferences for specific brand
    name: Brand preferences
  - description: Public API of brands service.
    name: Brands API
  - description: Private API to create/update/manage brand entities.
    name: Brands Administration
  - description: This controller is in charge of getting periods
    name: PeriodController (V3)
  - description: This controller is in charge of getting markets and selections
    name: FeedClassifierController (v2)
  - description: This controller is in charge of getting market groups
    name: MarketGroupController (v3)
  - description: This controller is in charge of getting unique market types and their
      selections as well as categories
    name: FeedClassifierControllerV3 (v3)
  - description: This controller is in charge of getting categories
    name: CategoryController (V3)
  - description: Admin Betslip API v1 endpoints
    name: Admin Betslip API V1
  - description: Provides possibility to modify game list
    name: Game Management
  - description: Handles user sessions
    name: Sessions
  - description: Provides possibility to modify game images assets
    name: Game Image Management
  - description: Centralized way to launch games
    name: Game Launch Provider
  - description: Provides possibility to modify game categories
    name: Game Category Management
  - description: Handles conversion from and to betPawaChips
    name: Currency Converter
  - description: Provides possibility to import master data via csv amd query it later
    name: Game master data
  - description: Provides possibility to reimport games
    name: Game Import Management
  - description: Provides possibility to modify game ribbons
    name: Ribbon Management
  - description: Provides possibility to enable/disable game suppliers
    name: Supplier Management
  - description: Provides possibility to view and update provider setups
    name: Casino Providers Setups Admin
  - description: Provides list of available games
    name: Games
  - description: Managing Identity Scenarios
    name: Identity Scenarios
  - description: API for managing phone prefixes
    name: Phone prefixes
  - description: Access to user transactions
    name: User Transactions
  - description: Access to actual user balance
    name: User Balance
  - description: API endpoints for retrieving and tracking messages by user.
    name: User Messaging
  - description: API endpoints for Creating/Removing Message Types.
    name: Message Types Administration
  - description: API endpoints for Creating/Removing messages. It's allowed to upload
      csv file with list of recipients userUuids that will be used to create message.
    name: Messaging Administration
  - description: Maintain payment related user-preferences.
    name: Payment user-preferences
  - description: API endpoints to check user existence
    name: User check
  - description: API endpoints for payout type with data from current user
    name: Payout Type
  - description: Endpoints to get deposits info for specific user
    name: Admin UserInfo deposits
  - description: API endpoints for brand configuration manipulation
    name: Brand Configuration Admin
  - description: Quartz maintenance/clean-up.
    name: Quartz Admin
  - description: API endpoints for payout type manipulation
    name: Payout Type Admin
  - description: API endpoints to access deposit options
    name: Deposit Options
  - description: API endpoints for withdrawal request manipulation
    name: Withdrawal request. Admin - V3
  - description: Endpoints to get payment summary for specific user
    name: Admin user payment summary
  - description: API endpoints for forced-withdrawal maintenance.
    name: ForcedWithdrawal Admin
  - description: API endpoints for Digmo integration
    name: Digmo integration
  - description: API endpoints for admin withdrawal requests maintenance
    name: Withdrawals. Admin - V2
  - description: Endpoints to find user-ids by deposits' data
    name: Admin usersearch using deposits' data
  - description: API endpoints for deposit type manipulation
    name: Deposit Type Admin
  - description: Api endpoints for deposit statements
    name: Deposit statements
  - description: API endpoints for manual deposit
    name: Manual deposit
  - description: Gateway-statuses
    name: Deposit gateway-statuses
  - description: API endpoints for deposit init operations
    name: Deposit Init
  - description: API endpoints for payout request manipulation
    name: Payout Request
  - description: payment-properties
    name: Payment properties V2
  - description: Admin API endpoints for manual transaction
    name: Manual transaction
  - description: API endpoints for withdrawal manipulation
    name: Withdrawal request
  - description: Withdrawal request details API.
    name: Withdrawal request details. Admin - V3
  - description: Endpoints to get payouts info for specific user
    name: Admin UserInfo payouts
  - description: API endpoints for pawapay wallet balance configuration manipulation
    name: Pawapay Wallet Balance Configuration Admin
  - description: Gateway-statuses
    name: Payout gateway-statuses
  - description: API endpoints to access manual withdrawals
    name: Manual Withdrawal Controller
  - description: API endpoints to access deposit types
    name: Deposit Type
  - description: Administrative API endpoints for managing pools - creating, editing,
      confirming, and cancelling pools
    name: Admin Pool Controller
  - description: This controller is in charge of getting, adding, editing template
    name: Admin Template Controller
  - description: This controller is in charge of updating tiebreakers' results
    name: Admin Tiebreaker Result Controller
  - description: API endpoints for placing bets on pools
    name: Place Bet Controller
  - description: API endpoints for retrieving user's pool tickets information
    name: Ticket Controller
  - description: This controller is in charge of fetching and listing ticket details
    name: Admin Ticket Controller
  - description: API endpoints for retrieving pool information
    name: Pool Controller
  - description: The purpose of this controller is to get, add and update pool configurations
    name: Admin Pool Configuration Controller
  - description: This controller is responsible for updating result of jackpot row or
      event
    name: Admin Result Controller
  - description: This controller is responsible for downloading correct-count as CSV
    name: Admin Reporting Controller
  - description: This controller is responsible for actions around free tickets
    name: Admin Free Ticket Controller
  - description: The purpose of this controller is searching user
    name: Admin User Search Controller
  - description: The purpose of this controller is to provide pool lists by status
    name: Pool Admin Controller
  - description: Derived values for specific user
    name: User derived data administration
  - description: Aggregation of data from multiple services
    name: Component data
  - description: Stores data of preregistered users in new markets
    name: Preregistration
  - description: Derived values for specific user
    name: User derived data
  - description: Key specific configurations
    name: Derived Data Metadata
  - description: Access to blocked participants of progressive jackpot
    name: Blocked participants of progressive jackpot
  - description: Access to progressive jackpot
    name: Progressive jackpot
  - description: Access to progressive jackpot configuration
    name: Progressive jackpot configuration
  - description: This controller is in charge of getting regions and subregions
    name: RegionController (v2)
  - description: To getting seasons
    name: Season Controller
  - description: To getting selection of prices and events
    name: PriceController (V1)
  - description: To getting selection of prices and events
    name: PriceController (V2)
  - description: To getting virtual events
    name: Virtual Controller
  - description: To getting standings
    name: Standings Controller
  - description: Scoreboard controller
    name: Scoreboard controller (V1)
  - description: To getting events by specific query
    name: Events Controller (V2)
  - description: Configurations
    name: Sportsbook-Configuration Controller
  - description: To getting counts of live/upcoming events across categories/regions/competitions
    name: Categories controller (V3)
  - description: This controller provides selection details by booking code
    name: Booking Number Controller (V2)
  - description: Search by 'text'
    name: Search controller (V1)
  - description: To getting events by specific query
    name: Events Controller (V3)
  - description: To getting groups of live/upcoming events by requests
    name: Upcoming Controller
  - description: Controller to get an accessToken for perform
    name: Perform authorization controller (V1)
  - description: To getting counts of live/upcoming events across categories/regions/competitions
    name: Categories controller (V2)
  - description: To getting live events
    name: Live Controller
  - description: This controller provides selection details by booking code
    name: Booking Number Controller (V1)
  - description: To getting counts of live/upcoming events across categories/regions/competitions
    name: Categories controller (V1)
  - description: Results controller
    name: Results controller (V1)
  - description: To getting events by ids or specific query
    name: Events Controller (V1)
  - description: Search by 'text'
    name: Search controller (V2)
  - description: Allows to make events hot manually via admin
    name: ManualHotEvents Admin-Controller
  - description: API endpoints for banning and closing users
    name: User Access Management
  - description: Managing user sessions
    name: Authentication
  - description: API endpoints for updating user notes data
    name: User Notes Management
  - description: API endpoints for managing connected accounts
    name: Connected Accounts Management for Admins
  - description: API endpoints for updating user data
    name: User Management
  - description: API endpoints for connecting different user accounts
    name: Connected Accounts Management
  - description: API endpoints for password change, restore and verification management
    name: User Account Management
  - description: API endpoints for searching user data
    name: User Search Management
  - description: API endpoints for managing OTP configurations
    name: OTP configuration Management
  - description: This controller is in charge of getting front page of seasons and game
      rounds
    name: FrontPageController
  - description: This controller is in charge of enable/disable leagues
    name: LeagueAdminController
  - description: This controller is in charge of getting inplay game rounds
    name: InPlayController
  - description: This controller is in charge of getting standings/match-ups
    name: StandingController
  - description: This controller is in charge of pushing seasons/game-rounds, simulate
      season and setup league helper
    name: AdminController
